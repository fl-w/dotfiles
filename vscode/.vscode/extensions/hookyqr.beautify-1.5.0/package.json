{
	"name": "beautify",
	"displayName": "Beautify",
	"description": "Beautify code in place for VS Code",
	"version": "1.5.0",
	"publisher": "HookyQR",
	"engines": {
		"vscode": "^1.22.0"
	},
	"categories": [
		"Other",
		"Programming Languages",
		"Formatters"
	],
	"activationEvents": [
		"*"
	],
	"icon": "icon.png",
	"galleryBanner": {
		"color": "#e8e030",
		"theme": "light"
	},
	"license": "MIT",
	"main": "./extension",
	"contributes": {
		"languages": [
			{
				"id": "json",
				"aliases": [
					"JSON"
				],
				"filenames": [
					".jsbeautifyrc",
					".jshintrc"
				]
			}
		],
		"jsonValidation": [
			{
				"fileMatch": ".jsbeautifyrc",
				"url": "./schema/beautifyrc.json"
			}
		],
		"commands": [
			{
				"command": "HookyQR.beautify",
				"title": "Beautify selection"
			},
			{
				"command": "HookyQR.beautifyFile",
				"title": "Beautify file"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Beautify config",
			"properties": {
				"beautify.ignore": {
					"type": [
						"string",
						"array"
					],
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.",
					"scope": "resource"
				},
				"beautify.config": {
					"type": [
						"string",
						"object",
						"null"
					],
					"default": null,
					"description": "A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.",
					"properties": {
						"brace_style": {
							"description": "[collapse|expand|end-expand|none][,preserve-inline]  [JS]",
							"type": "string",
							"default": "collapse",
							"enum": [
								"collapse",
								"expand",
								"end-expand",
								"none",
								"collapse,preserve-inline",
								"expand,preserve-inline",
								"end-expand,preserve-inline",
								"none,preserve-inline"
							]
						},
						"indent_level": {
							"description": "Initial indentation level. [JS]",
							"type": "integer",
							"default": 0
						},
						"space_in_paren": {
							"description": "Add padding spaces within parentheses, ie. f( a, b ). [JS]",
							"type": "boolean",
							"default": false
						},
						"space_in_empty_paren": {
							"description": "Leave space in empty parentheses, ie. f( ). [JS]",
							"type": "boolean",
							"default": false
						},
						"jslint_happy": {
							"description": "Enable jslint-stricter mode. (Forces 'space_after_anon_function') [JS]",
							"type": "boolean",
							"default": false
						},
						"space_after_anon_function": {
							"description": "Add a space before an anonymous function's parens, ie. function (). [JS]",
							"type": "boolean",
							"default": false
						},
						"space_after_named_function": {
							"description": "Add a space before a named function's parens, ie. function example (). [JS]",
							"type": "boolean",
							"default": false
						},
						"break_chained_methods": {
							"description": "Break chained method calls across subsequent lines. [JS]",
							"type": "boolean",
							"default": false
						},
						"keep_array_indentation": {
							"description": "Preserve array indentation. [JS]",
							"type": "boolean",
							"default": false
						},
						"keep_function_indentation": {
							"description": "Preserve function indentation. [JS]",
							"type": "boolean",
							"default": false
						},
						"space_before_conditional": {
							"description": "Ensure a space before conditional statement. [JS]",
							"type": "boolean",
							"default": true
						},
						"unescape_strings": {
							"description": "Decode printable characters encoded in xNN notation. [JS]",
							"type": "boolean",
							"default": false
						},
						"comma_first": {
							"description": "Put commas at the beginning of new line instead of end. [JS]",
							"type": "boolean",
							"default": false
						},
						"operator_position": {
							"description": "Move operators to before or after a new line, or keep as is. [JS]",
							"type": "string",
							"enum": [
								"before-newline",
								"after-newline",
								"preserve-newline"
							],
							"default": "before-newline"
						},
						"e4x": {
							"description": "Pass E4X xml literals through untouched. [JS]",
							"type": "boolean",
							"default": false
						},
						"unindent_chained_methods": {
							"description": "Unindent chained methods. [JS]",
							"type": "boolean",
							"default": false
						},
						"js": {
							"type": "object",
							"properties": {
								"brace_style": {
									"description": "[collapse|expand|end-expand|none][,preserve-inline]  [JS]",
									"type": "string",
									"default": "collapse",
									"enum": [
										"collapse",
										"expand",
										"end-expand",
										"none",
										"collapse,preserve-inline",
										"expand,preserve-inline",
										"end-expand,preserve-inline",
										"none,preserve-inline"
									]
								},
								"indent_level": {
									"description": "Initial indentation level. [JS]",
									"type": "integer",
									"default": 0
								},
								"space_in_paren": {
									"description": "Add padding spaces within parentheses, ie. f( a, b ). [JS]",
									"type": "boolean",
									"default": false
								},
								"space_in_empty_paren": {
									"description": "Leave space in empty parentheses, ie. f( ). [JS]",
									"type": "boolean",
									"default": false
								},
								"jslint_happy": {
									"description": "Enable jslint-stricter mode. (Forces 'space_after_anon_function') [JS]",
									"type": "boolean",
									"default": false
								},
								"space_after_anon_function": {
									"description": "Add a space before an anonymous function's parens, ie. function (). [JS]",
									"type": "boolean",
									"default": false
								},
								"space_after_named_function": {
									"description": "Add a space before a named function's parens, ie. function example (). [JS]",
									"type": "boolean",
									"default": false
								},
								"break_chained_methods": {
									"description": "Break chained method calls across subsequent lines. [JS]",
									"type": "boolean",
									"default": false
								},
								"keep_array_indentation": {
									"description": "Preserve array indentation. [JS]",
									"type": "boolean",
									"default": false
								},
								"keep_function_indentation": {
									"description": "Preserve function indentation. [JS]",
									"type": "boolean",
									"default": false
								},
								"space_before_conditional": {
									"description": "Ensure a space before conditional statement. [JS]",
									"type": "boolean",
									"default": true
								},
								"unescape_strings": {
									"description": "Decode printable characters encoded in xNN notation. [JS]",
									"type": "boolean",
									"default": false
								},
								"comma_first": {
									"description": "Put commas at the beginning of new line instead of end. [JS]",
									"type": "boolean",
									"default": false
								},
								"operator_position": {
									"description": "Move operators to before or after a new line, or keep as is. [JS]",
									"type": "string",
									"enum": [
										"before-newline",
										"after-newline",
										"preserve-newline"
									],
									"default": "before-newline"
								},
								"e4x": {
									"description": "Pass E4X xml literals through untouched. [JS]",
									"type": "boolean",
									"default": false
								},
								"unindent_chained_methods": {
									"description": "Unindent chained methods. [JS]",
									"type": "boolean",
									"default": false
								}
							}
						},
						"css": {
							"type": "object",
							"properties": {
								"selector_separator_newline": {
									"description": "Add a newline between multiple selectors. [CSS]",
									"type": "boolean",
									"default": true
								},
								"newline_between_rules": {
									"description": "Add a newline between CSS rules. [CSS]",
									"type": "boolean",
									"default": false
								},
								"space_around_selector_separator": {
									"description": "(Deprecated: use space_around_combinator) [CSS]",
									"type": "boolean",
									"default": false
								},
								"space_around_combinator": {
									"description": "Ensure space around selector separators (>+~). [CSS]",
									"type": "boolean",
									"default": false
								}
							}
						},
						"html": {
							"type": "object",
							"properties": {
								"void_elements": {
									"description": "HTLM void elements - aka self-closing tags. [HTML]",
									"type": "array",
									"items": {
										"type": "string"
									},
									"default": [
										"area",
										"base",
										"br",
										"col",
										"embed",
										"hr",
										"img",
										"input",
										"keygen",
										"link",
										"menuitem",
										"meta",
										"param",
										"source",
										"track",
										"wbr",
										"!doctype",
										"?xml",
										"?php",
										"?=",
										"basefont",
										"isindex"
									]
								},
								"inline": {
									"description": "",
									"type": "array",
									"items": {
										"type": "string"
									},
									"default": [
										"a",
										"abbr",
										"area",
										"audio",
										"b",
										"bdi",
										"bdo",
										"br",
										"button",
										"canvas",
										"cite",
										"code",
										"data",
										"datalist",
										"del",
										"dfn",
										"em",
										"embed",
										"i",
										"iframe",
										"img",
										"input",
										"ins",
										"kbd",
										"keygen",
										"label",
										"map",
										"mark",
										"math",
										"meter",
										"noscript",
										"object",
										"output",
										"progress",
										"q",
										"ruby",
										"s",
										"samp",
										"select",
										"small",
										"span",
										"strong",
										"sub",
										"sup",
										"svg",
										"template",
										"textarea",
										"time",
										"u",
										"var",
										"video",
										"wbr",
										"text",
										"acronym",
										"address",
										"big",
										"dt",
										"ins",
										"strike",
										"tt"
									]
								},
								"wrap_attributes": {
									"description": "Wrap attributes to new lines. [HTML]",
									"type": "string",
									"default": "auto",
									"enum": [
										"auto",
										"force",
										"force-aligned",
										"force-expand-multiline",
										"align-multiple",
										"preserve",
										"preserve-aligned"
									]
								},
								"wrap_attributes_indent_size": {
									"description": "Indent wrapped attributes to after N characters. Defaults to 'indent_size'. [HTML]",
									"type": "number"
								},
								"indent_inner_html": {
									"description": "Indent <head> and <body> sections. [HTML]",
									"type": "boolean",
									"default": false
								},
								"indent_scripts": {
									"description": "[keep|separate|normal] [HTML]",
									"type": "string",
									"default": "normal",
									"enum": [
										"keep",
										"separate",
										"normal"
									]
								},
								"unformatted": {
									"description": "List of tags that should not be reformatted. [HTML]",
									"type": "array",
									"items": {
										"type": "string"
									},
									"default": []
								},
								"content_unformatted": {
									"description": "List of tags whose content should not be reformatted. [HTML]",
									"type": "array",
									"items": {
										"type": "string"
									},
									"default": [
										"pre",
										"textarea"
									]
								},
								"extra_liners": {
									"description": "List of tags that should have an extra newline before them. [HTML]",
									"type": "array",
									"items": {
										"type": "string"
									},
									"default": [
										"head",
										"body",
										"/html"
									]
								},
								"indent_body_inner_html": {
									"description": "Indent elements within html <body> element. [HTML]",
									"type": "boolean",
									"default": true
								},
								"indent_head_inner_html": {
									"description": "Indent elements within html <head> element. [HTML]",
									"type": "boolean",
									"default": true
								},
								"indent_handlebars": {
									"description": "format and indent {{#foo}} and {{/foo}}. [HTML]",
									"type": "boolean",
									"default": false
								}
							}
						}
					}
				},
				"beautify.language": {
					"type": "object",
					"description": "Link file types to the beautifier type",
					"default": {
						"js": {
							"type": [
								"javascript",
								"json",
								"jsonc"
							],
							"filename": [
								".jshintrc",
								".jsbeautifyrc"
							]
						},
						"css": [
							"css",
							"less",
							"scss"
						],
						"html": [
							"htm",
							"html"
						]
					},
					"properties": {
						"js": {
							"type": [
								"object",
								"array",
								"null"
							],
							"items": {
								"type": "string"
							},
							"description": "Array of language types, or an object containing types, extensions and filenames to associate",
							"properties": {
								"type": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "VS Code language name"
								},
								"ext": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "File extensions (without the leading dot)"
								},
								"filename": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "Full filenames (eg: '.jsbeautifyrc')"
								}
							}
						},
						"css": {
							"type": [
								"object",
								"array",
								"null"
							],
							"items": {
								"type": "string"
							},
							"description": "Array of language types, or an object containing types, extensions and filenames to associate",
							"properties": {
								"type": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "VS Code language name"
								},
								"ext": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "File extensions (without the leading dot)"
								},
								"filename": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "Full filenames (eg: '.jsbeautifyrc')"
								}
							}
						},
						"html": {
							"type": [
								"object",
								"array",
								"null"
							],
							"items": {
								"type": "string"
							},
							"description": "Array of language types, or an object containing types, extensions and filenames to associate",
							"properties": {
								"type": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "VS Code language name"
								},
								"ext": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "File extensions (without the leading dot)"
								},
								"filename": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "Full filenames (eg: '.jsbeautifyrc')"
								}
							}
						}
					}
				}
			}
		}
	},
	"dependencies": {
		"editorconfig": "0.15.0",
		"js-beautify": "^1.10.0",
		"minimatch": "^3.0.4"
	},
	"devDependencies": {
		"@types/mocha": "^2.2.42",
		"@types/node": "^8.10.48",
		"expect.js": "^0.3.1",
		"mocha": "^5.2.0",
		"vscode": "^1.1.33"
	},
	"scripts": {
		"test": "node ./node_modules/vscode/bin/test"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/HookyQR/VSCodeBeautify"
	},
	"bugs": {
		"url": "https://github.com/HookyQR/VSCodeBeautify/issues"
	},
	"__metadata": {
		"id": "697255a9-3f36-44c8-b084-d3b91edfb23a",
		"publisherId": "901b401e-7657-4a33-8c9a-0854c569607e",
		"publisherDisplayName": "HookyQR"
	}
}