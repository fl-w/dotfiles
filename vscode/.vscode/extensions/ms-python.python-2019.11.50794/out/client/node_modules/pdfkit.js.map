{"version":3,"sources":["../../webpack/bootstrap","../../external \"util\"","../.././node_modules/safer-buffer/safer.js","../.././node_modules/crypto-js/core.js","../.././node_modules/crypto-js/index.js","../../external \"fs\"","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_core.js","../../external \"stream\"","../.././node_modules/crypto-js/cipher-core.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_export.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_descriptors.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_wks.js","../../external \"buffer\"","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dp.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_is-object.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_global.js","../../external \"events\"","../.././node_modules/restructure/src/utils.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_hide.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_an-object.js","../../external \"zlib\"","../.././node_modules/crypto-js/evpkdf.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-iobject.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_has.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_fails.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_ctx.js","../.././node_modules/crypto-js/enc-base64.js","../.././node_modules/crypto-js/md5.js","../.././node_modules/restructure/src/Number.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-object.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_property-desc.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iterators.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.string.iterator.js","../.././node_modules/iconv-lite/lib/index.js","../../external \"string_decoder\"","../.././node_modules/crypto-js/x64-core.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-pie.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/web.dom.iterable.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_library.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-length.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_uid.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_set-to-string-tag.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_meta.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_for-of.js","../.././node_modules/tiny-inflate/index.js","../.././node_modules/crypto-js/sha1.js","../.././node_modules/crypto-js/hmac.js","../.././node_modules/restructure/src/DecodeStream.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iobject.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_cof.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_defined.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-gopd.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-primitive.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-sap.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iter-define.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-integer.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_shared-key.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_shared.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_enum-bug-keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/core.get-iterator-method.js","../.././node_modules/babel-runtime/helpers/typeof.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_wks-ext.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_wks-define.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-gops.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_validate-collection.js","../.././node_modules/unicode-trie/index.js","../.././node_modules/fontkit/index.js","../.././node_modules/iconv-lite/lib/bom-handling.js","../.././node_modules/iconv-lite/encodings/index.js","../.././node_modules/iconv-lite/encodings/internal.js","../.././node_modules/iconv-lite/encodings/utf16.js","../.././node_modules/iconv-lite/encodings/utf7.js","../.././node_modules/iconv-lite/encodings/sbcs-codec.js","../.././node_modules/iconv-lite/encodings/sbcs-data.js","../.././node_modules/iconv-lite/encodings/sbcs-data-generated.js","../.././node_modules/iconv-lite/encodings/dbcs-codec.js","../.././node_modules/iconv-lite/encodings/dbcs-data.js","../.././node_modules/iconv-lite/lib/streams.js","../.././node_modules/iconv-lite/lib/extend-node.js","../.././node_modules/crypto-js/sha256.js","../.././node_modules/crypto-js/sha512.js","../.././node_modules/restructure/src/Array.js","../.././node_modules/restructure/src/Struct.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_ie8-dom-define.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_dom-create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_a-function.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iter-step.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_redefine.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dps.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-keys-internal.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_to-absolute-index.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_classof.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_is-array.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-gopn.js","../.././node_modules/babel-runtime/core-js/object/define-property.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_collection-strong.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_redefine-all.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_an-instance.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iter-call.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_is-array-iter.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_collection.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_collection-to-json.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_set-collection-of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_set-collection-from.js","../.././node_modules/brotli/dec/streams.js","../.././node_modules/brotli/dec/dictionary.js","../.././node_modules/brotli/dec/huffman.js","../.././node_modules/fontkit/node_modules/unicode-properties/node_modules/unicode-trie/index.js","../.././node_modules/linebreak/src/linebreaker.js","../.././node_modules/png-js/png-node.js","../.././node_modules/crypto-js/lib-typedarrays.js","../.././node_modules/crypto-js/enc-utf16.js","../.././node_modules/crypto-js/sha224.js","../.././node_modules/crypto-js/sha384.js","../.././node_modules/crypto-js/sha3.js","../.././node_modules/crypto-js/ripemd160.js","../.././node_modules/crypto-js/pbkdf2.js","../.././node_modules/crypto-js/mode-cfb.js","../.././node_modules/crypto-js/mode-ctr.js","../.././node_modules/crypto-js/mode-ctr-gladman.js","../.././node_modules/crypto-js/mode-ofb.js","../.././node_modules/crypto-js/mode-ecb.js","../.././node_modules/crypto-js/pad-ansix923.js","../.././node_modules/crypto-js/pad-iso10126.js","../.././node_modules/crypto-js/pad-iso97971.js","../.././node_modules/crypto-js/pad-zeropadding.js","../.././node_modules/crypto-js/pad-nopadding.js","../.././node_modules/crypto-js/format-hex.js","../.././node_modules/crypto-js/aes.js","../.././node_modules/crypto-js/tripledes.js","../.././node_modules/crypto-js/rc4.js","../.././node_modules/crypto-js/rabbit.js","../.././node_modules/crypto-js/rabbit-legacy.js","../.././node_modules/restructure/index.js","../.././node_modules/restructure/src/EncodeStream.js","../.././node_modules/restructure/src/LazyArray.js","../.././node_modules/restructure/src/Bitfield.js","../.././node_modules/restructure/src/Boolean.js","../.././node_modules/restructure/src/Buffer.js","../.././node_modules/restructure/src/Enum.js","../.././node_modules/restructure/src/Optional.js","../.././node_modules/restructure/src/Reserved.js","../.././node_modules/restructure/src/String.js","../.././node_modules/restructure/src/VersionedStruct.js","../.././node_modules/restructure/src/Pointer.js","../.././node_modules/babel-runtime/core-js/object/get-own-property-descriptor.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/get-own-property-descriptor.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","../.././node_modules/babel-runtime/core-js/get-iterator.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/get-iterator.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.array.iterator.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_add-to-unscopables.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iter-create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_array-includes.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_html.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-gpo.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_string-at.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/core.get-iterator.js","../.././node_modules/babel-runtime/core-js/object/freeze.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/freeze.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.freeze.js","../.././node_modules/babel-runtime/core-js/symbol/iterator.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/symbol/iterator.js","../.././node_modules/babel-runtime/core-js/symbol.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/symbol/index.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.symbol.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_enum-keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-gopn-ext.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.symbol.async-iterator.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.symbol.observable.js","../.././node_modules/babel-runtime/core-js/object/keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.keys.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/define-property.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.define-property.js","../.././node_modules/babel-runtime/helpers/classCallCheck.js","../.././node_modules/babel-runtime/helpers/createClass.js","../.././node_modules/babel-runtime/core-js/map.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/map.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.map.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_set-species.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_array-methods.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_array-species-create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_array-species-constructor.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.map.to-json.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_array-from-iterable.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.map.of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.map.from.js","../.././node_modules/babel-runtime/helpers/possibleConstructorReturn.js","../.././node_modules/babel-runtime/helpers/inherits.js","../.././node_modules/babel-runtime/core-js/object/set-prototype-of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/set-prototype-of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.set-prototype-of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_set-proto.js","../.././node_modules/babel-runtime/core-js/object/create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/create.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.create.js","../.././node_modules/babel-runtime/core-js/object/define-properties.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/define-properties.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.define-properties.js","../.././node_modules/deep-equal/index.js","../.././node_modules/deep-equal/lib/keys.js","../.././node_modules/deep-equal/lib/is_arguments.js","../.././node_modules/babel-runtime/core-js/object/assign.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/object/assign.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.object.assign.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_object-assign.js","../.././node_modules/babel-runtime/core-js/string/from-code-point.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/string/from-code-point.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.string.from-code-point.js","../.././node_modules/babel-runtime/core-js/array/from.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/array/from.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.array.from.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_create-property.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/_iter-detect.js","../.././node_modules/babel-runtime/core-js/set.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/set.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.set.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.set.to-json.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.set.of.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es7.set.from.js","../.././node_modules/fontkit/node_modules/unicode-properties/unicode-properties.es.js","../.././node_modules/dfa/index.js","../.././node_modules/babel-runtime/core-js/number/epsilon.js","../.././node_modules/babel-runtime/node_modules/core-js/library/fn/number/epsilon.js","../.././node_modules/babel-runtime/node_modules/core-js/library/modules/es6.number.epsilon.js","../.././node_modules/clone/clone.js","../.././node_modules/brotli/decompress.js","../.././node_modules/brotli/dec/decode.js","../.././node_modules/brotli/dec/bit_reader.js","../.././node_modules/brotli/dec/dictionary-data.js","../.././node_modules/brotli/dec/context.js","../.././node_modules/brotli/dec/prefix.js","../.././node_modules/brotli/dec/transform.js","../.././node_modules/linebreak/node_modules/base64-js/lib/b64.js","../.././node_modules/linebreak/src/classes.js","../.././node_modules/linebreak/src/pairs.js","../.././node_modules/pdfkit/js/pdfkit.es5.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","buffer","Buffer","safer","Safer","from","Uint8Array","encodingOrOffset","length","TypeError","alloc","size","fill","encoding","RangeError","buf","kStringMaxLength","process","binding","e","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH","CryptoJS","Math","undefined","F","obj","subtype","C","C_lib","lib","Base","extend","overrides","this","mixIn","init","$super","apply","arguments","instance","properties","propertyName","toString","clone","WordArray","words","sigBytes","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","slice","random","nBytes","rcache","m_w","m_z","mask","result","_r","push","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","nWordsReady","max","_minBufferSize","nBytesReady","min","offset","_doProcessBlock","processedWords","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","HMAC","algo","core","version","__e","Cipher","Base64","EvpKDF","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","xformMode","_xformMode","_key","dataUpdate","finalProcessedData","keySize","ivSize","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","decrypt","ciphertext","C_mode","StreamCipher","finalProcessedBlocks","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","xorBlock","block","_prevBlock","processBlock","encryptBlock","thisBlock","decryptBlock","C_pad","pad","Pkcs7","nPaddingBytes","paddingWord","paddingWords","padding","unpad","CipherParams","BlockCipher","modeCreator","_mode","__creator","cipherParams","formatter","C_format","format","OpenSSLFormatter","OpenSSL","salt","openSSLStr","ciphertextWords","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","compute","derivedParams","global","ctx","hide","has","$export","type","source","own","out","IS_FORCED","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","P","IS_BIND","B","IS_WRAP","W","expProto","target","a","b","Function","virtual","R","U","store","uid","USE_SYMBOL","anObject","IE8_DOM_DEFINE","toPrimitive","dP","f","O","Attributes","it","window","self","__g","NumberT","PropertyDescriptor","Number","resolveLength","stream","parent","res","decode","isNaN","opts","val","configurable","createDesc","isObject","MD5","iterations","derivedKey","derivedKeyWords","IObject","defined","exec","aFunction","fn","that","map","_map","base64Chars","triplet","j","charAt","paddingChar","base64Str","base64StrLength","reverseMap","_reverseMap","paddingIndex","indexOf","bits1","bits2","parseLoop","T","abs","sin","_hash","M","offset_i","M_offset_i","H","M_offset_0","M_offset_1","M_offset_2","M_offset_3","M_offset_4","M_offset_5","M_offset_6","M_offset_7","M_offset_8","M_offset_9","M_offset_10","M_offset_11","M_offset_12","M_offset_13","M_offset_14","M_offset_15","FF","GG","HH","II","nBitsTotal","nBitsLeft","nBitsTotalH","floor","nBitsTotalL","H_i","x","HmacMD5","DecodeStream","Fixed","__hasProp","endian","TYPES","encode","uint8","uint16be","uint16","uint16le","uint24be","uint24","uint24le","uint32be","uint32","uint32le","int8","int16be","int16","int16le","int24be","int24","int24le","int32be","int32","int32le","floatbe","float","floatle","doublebe","double","doublele","_super","fracBits","__super__","constructor","_point","child","ctor","__extends","fixed16be","fixed16","fixed16le","fixed32be","fixed32","fixed32le","bitmap","writable","$keys","enumBugKeys","keys","$at","iterated","_t","_i","point","index","done","bomHandling","iconv","encodings","defaultCharUnicode","defaultCharSingleByte","str","options","getEncoder","write","trail","end","skipDecodeWarning","console","error","decoder","getDecoder","encodingExists","getCodec","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecOptions","codec","codecDef","encodingName","toLowerCase","replace","bomAware","addBOM","PrependBOM","stripBOM","StripBOM","nodeVer","versions","node","nodeVerArr","split","X32WordArray","C_x64","x64","Word","high","low","toX32","x64Words","x64WordsLength","x32Words","x64Word","wordsLength","propertyIsEnumerable","Iterators","TO_STRING_TAG","DOMIterables","NAME","Collection","proto","Array","dPs","IE_PROTO","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","document","open","lt","close","Properties","toInteger","id","px","def","TAG","tag","stat","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","KEY","NEED","fastKey","getWeak","onFreeze","isArrayIter","toLength","getIterFn","BREAK","RETURN","iterable","entries","ITERATOR","step","iterator","iterFn","next","TINF_OK","TINF_DATA_ERROR","Tree","table","Uint16Array","trans","Data","dest","sourceIndex","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","delta","first","sum","offs","tinf_build_tree","off","num","tinf_getbit","bit","tinf_read_bits","tinf_decode_symbol","cur","len","tinf_decode_trees","dt","hlit","hdist","hclen","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","bfinal","subarray","SHA1","HmacSHA1","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","_error","pos","UInt8","UInt16","UInt24","UInt32","Int8","Int16","Int24","Int32","Float","Double","bytes","ret","readString","byte","_ref","readBuffer","readUInt24BE","readUInt16BE","readUInt8","readUInt24LE","readUInt16LE","readInt24BE","readInt16BE","readInt24LE","readInt8","cof","pIE","toIObject","gOPD","getOwnPropertyDescriptor","valueOf","fails","exp","LIBRARY","redefine","$iterCreate","setToStringTag","getPrototypeOf","BUGGY","returnThis","Constructor","DEFAULT","IS_SET","FORCED","methods","IteratorPrototype","getMethod","kind","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","values","shared","copyright","classof","getIteratorMethod","_iterator2","_interopRequireDefault","_symbol2","_typeof","default","wksExt","$Symbol","getOwnPropertySymbols","TYPE","UnicodeTrie","inflate","isBuffer","uncompressedLength","view","readUInt32BE","highStart","errorValue","DataView","getUint32","Uint32Array","SHIFT_1","INDEX_2_BLOCK_LENGTH","DATA_BLOCK_LENGTH","LSCP_INDEX_2_OFFSET","UTF8_2B_INDEX_2_OFFSET","codePoint","_interopDefault","ex","_Object$getOwnPropertyDescriptor","_getIterator","_Object$freeze","_Object$keys","_Object$defineProperty","_classCallCheck","_createClass","_Map","_possibleConstructorReturn","_inherits","restructure_src_utils","_Object$defineProperties","isEqual","_Object$assign","_String$fromCodePoint","_Array$from","_Set","unicode","StateMachine","_Number$EPSILON","cloneDeep","brotli","fontkit","logErrors","formats","cache","descriptor","memoized","_len","args","set","registerFormat","openSync","filename","postscriptName","fs","readFileSync","callback","readFile","err","font","probe","getFont","defaultLanguage","setDefaultLanguage","lang","SubHeader","Struct","firstCode","entryCount","idDelta","idRangeOffset","CmapGroup","startCharCode","endCharCode","glyphID","UnicodeValueRange","startUnicodeValue","additionalCount","UVSMapping","unicodeValue","DefaultUVS","NonDefaultUVS","VarSelectorRecord","varSelector","defaultUVS","Pointer","nonDefaultUVS","CmapSubtable","VersionedStruct","0","language","codeMap","LazyArray","2","subHeaderKeys","subHeaderCount","subHeaders","glyphIndexArray","4","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCode","reservedPad","Reserved","startCode","_currentOffset","6","glyphIndices","8","reserved","is32","nGroups","groups","10","12","13","14","numRecords","varSelectors","CmapEntry","platformID","encodingID","lazy","cmap","numSubtables","tables","head","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","modified","xMin","yMin","xMax","yMax","macStyle","Bitfield","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","hhea","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfMetrics","HmtxEntry","advance","bearing","hmtx","metrics","bearings","maxp","numGlyphs","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","getEncoding","languageID","MAC_LANGUAGE_ENCODINGS","ENCODINGS","15","17","18","24","25","26","27","28","30","37","38","39","40","143","146","LANGUAGES","60","90","1","31","61","91","32","62","92","3","33","63","93","34","64","94","5","35","65","128","36","66","129","7","67","130","68","131","9","69","132","70","133","11","41","71","134","42","72","135","43","73","136","44","74","137","45","75","138","16","46","76","139","47","77","140","48","78","141","19","49","79","142","20","50","80","21","51","81","144","22","52","82","145","23","53","83","54","84","147","55","85","148","56","86","149","57","87","150","58","88","151","29","59","89","1078","16393","1159","1074","1052","6153","1089","1115","1156","8201","1111","1051","1118","17417","1042","1060","5121","5129","1088","11274","15361","13321","1108","16394","3073","18441","1062","13322","2049","7177","1063","9226","11265","11273","2094","5130","13313","2057","1134","7178","12289","1033","1071","12298","4097","12297","2110","17418","6145","1061","1086","4106","8193","1080","1100","18442","16385","1124","1082","2058","1025","1035","1153","19466","10241","2060","1146","6154","7169","3084","1102","15370","14337","1036","1148","10250","9217","5132","1104","20490","1067","6156","2128","3082","1101","4108","1121","1034","2092","1122","1044","21514","1068","1110","2068","14346","1133","1079","1154","8202","1069","3079","1096","2077","1059","1031","1123","1053","2117","5127","1045","1114","1093","4103","1046","1064","8218","2055","2070","2143","5146","1032","1094","1097","1150","1135","1131","1092","1026","1095","2155","1098","1027","1128","3179","1054","3076","1037","1048","1105","5124","1081","1047","1055","2052","1038","1049","1090","4100","1039","9275","1152","1028","1136","4155","1058","1155","1057","5179","1070","1050","1117","3131","1056","4122","2141","1083","2115","1029","2108","2107","1091","1030","1076","8251","1066","1164","1077","6203","1106","1125","1040","7227","1160","2067","2064","1103","1157","1043","1041","7194","1144","3081","1099","3098","1130","10249","1087","6170","4105","1107","2074","9225","1158","1132","NameRecord","nameID","string","relativeTo","allowNull","LangTagRecord","NameTable","count","stringOffset","records","langTagCount","langTags","NAMES","_iterator","_isArray","isArray","record","preEncode","byteLength","en","OS2","header","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulCharRange","vendorID","fsSelection","usFirstCharIndex","usLastCharIndex","typoAscender","typoDescender","typoLineGap","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContent","usLowerOpticalPointSize","usUpperOpticalPointSize","post","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","2.5","offsets","cvt","controlValues","fpgm","instructions","loca","prep","controlValueProgram","glyf","CFFIndex","getCFFVersion","hdrSize","offSize","offsetType","startPos","start","arr","item","writeUInt16BE","sizes","writeUInt8","_isArray2","_i2","_ref2","_iterator3","_isArray3","_i3","_ref3","_item","FLOAT_LOOKUP","FLOAT_ENCODE_LOOKUP",".","E","E-","-","CFFOperand","readInt32BE","n1","n2","parseFloat","forceLarge","writeInt32BE","writeInt16BE","c1","c2","FLOAT_EOF","CFFDict","ops","fields","field","decodeOperands","operands","_this","op","encodeOperands","_this2","_startOffset","_field","dict","includePointers","pointerSize","startOffset","k","pointers","pointerOffset","_iterator4","_isArray4","_i4","_ref4","_iterator5","_isArray5","_i5","_ref5","_op","ptr","CFFPointer","_r$Pointer","Ptr","CFFPrivateDict","CFFBlendOp","numBlends","pop","standardStrings","StandardEncoding","ISOAdobeCharset","LangSysTable","reqFeatureIndex","featureCount","featureIndexes","LangSysRecord","langSys","Script","defaultLangSys","langSysRecords","ScriptRecord","script","ScriptList","Feature","featureParams","lookupCount","lookupListIndexes","FeatureRecord","feature","FeatureList","LookupFlags","markAttachmentType","LookupList","SubTable","Lookup","lookupType","subTableCount","subTables","markFilteringSet","Optional","useMarkFilteringSet","_","RangeRecord","startCoverageIndex","Coverage","glyphCount","glyphs","rangeCount","rangeRecords","ClassRangeRecord","class","ClassDef","startGlyph","classValueArray","classRangeCount","classRangeRecord","Device","deltaFormat","LookupRecord","sequenceIndex","lookupListIndex","Rule","input","lookupRecords","RuleSet","ClassRule","classes","ClassSet","Context","coverage","ruleSetCount","ruleSets","classDef","classSetCnt","classSet","coverages","ChainRule","backtrackGlyphCount","backtrack","inputGlyphCount","lookaheadGlyphCount","lookahead","ChainRuleSet","ChainingContext","chainCount","chainRuleSets","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","F2DOT14","RegionAxisCoordinates","startCoord","peakCoord","endCoord","VariationRegionList","axisCount","regionCount","variationRegions","DeltaSet","shortDeltas","shortDeltaCount","regionDeltas","regionIndexCount","deltas","ItemVariationData","itemCount","regionIndexes","deltaSets","ItemVariationStore","variationRegionList","variationDataCount","itemVariationData","ConditionTable","axisIndex","filterRangeMinValue","filterRangeMaxValue","ConditionSet","conditionCount","conditionTable","FeatureTableSubstitutionRecord","featureIndex","alternateFeatureTable","FeatureTableSubstitution","substitutionCount","substitutions","FeatureVariationRecord","conditionSet","featureTableSubstitution","FeatureVariations","majorVersion","minorVersion","featureVariationRecordCount","featureVariationRecords","PredefinedOp","predefinedOps","CFFEncodingVersion","_r$Number","Range1","nLeft","Range2","CFFEncoding","nCodes","codes","nRanges","ranges","RangeArray","_r$Array","range","CFFCharset","CharStrings","FDRange3","fd","FDRange4","FDSelect","fds","sentinel","CFFPrivateOp","FontDict","CFFTopDict","VariationStore","itemVariationStore","CFF2TopDict","CFFTop","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDict","CFFFont","top","isCIDFont","ROS","sid","getCharString","glyph","getGlyphName","gid","charset","fdForGlyph","mid","privateDictForGlyph","FDArray","Private","FullName","FamilyName","VerticalOrigin","glyphIndex","vertOriginY","VORG","defaultVertOriginY","numVertOriginYMetrics","BigMetrics","height","width","horiBearingX","horiBearingY","horiAdvance","vertBearingX","vertBearingY","vertAdvance","SmallMetrics","bearingX","bearingY","EBDTComponent","xOffset","yOffset","ByteAligned","BitAligned","SBitLineMetrics","numComponents","components","dataLen","ascender","descender","widthMax","caretSlopeNumerator","caretSlopeDenominator","minOriginSB","minAdvanceSB","maxBeforeBL","minAfterBL","CodeOffsetPair","glyphCode","IndexSubtable","imageFormat","imageDataOffset","offsetArray","lastGlyphIndex","firstGlyphIndex","imageSize","bigMetrics","glyphArray","glyphCodeArray","IndexSubtableArray","subtable","BitmapSizeTable","indexSubTableArray","indexTablesSize","numberOfIndexSubTables","colorRef","hori","vert","startGlyphIndex","endGlyphIndex","ppemX","ppemY","bitDepth","EBLC","numSizes","ImageTable","ppem","resolution","imageOffsets","sbix","numImgTables","imageTables","LayerRecord","paletteIndex","BaseGlyphRecord","firstLayerIndex","numLayers","COLR","numBaseGlyphRecords","baseGlyphRecord","layerRecords","numLayerRecords","ColorRecord","blue","green","red","alpha","CPAL","numPaletteEntries","numPalettes","numColorRecords","colorRecords","colorRecordIndices","offsetPaletteTypeArray","offsetPaletteLabelArray","offsetPaletteEntryLabelArray","BaseCoord","coordinate","referenceGlyph","baseCoordPoint","deviceTable","BaseValues","defaultIndex","baseCoordCount","baseCoords","FeatMinMaxRecord","minCoord","maxCoord","MinMax","featMinMaxCount","featMinMaxRecords","BaseLangSysRecord","minMax","BaseScript","baseValues","defaultMinMax","baseLangSysCount","baseLangSysRecords","BaseScriptRecord","BaseScriptList","BaseTagList","Axis","baseTagList","baseScriptList","BASE","horizAxis","vertAxis","65536","65537","AttachPoint","AttachList","attachPoints","CaretValue","caretValuePoint","LigGlyph","LigCaretList","ligGlyphCount","ligGlyphs","MarkGlyphSetsDef","markSetTableFormat","markSetCount","GDEF","glyphClassDef","attachList","ligCaretList","markAttachClassDef","65538","markGlyphSetsDef","65539","ValueFormat","types","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","yPlaDevice","xAdvDevice","yAdvDevice","ValueRecord","buildStruct","struct","rel","PairValueRecord","secondGlyph","value1","value2","PairSet","Class2Record","Anchor","xCoordinate","yCoordinate","anchorPoint","xDeviceTable","yDeviceTable","EntryExitRecord","entryAnchor","exitAnchor","MarkRecord","markAnchor","MarkArray","BaseRecord","classCount","BaseArray","ComponentRecord","LigatureAttach","LigatureArray","GPOSLookup","valueFormat","valueCount","valueFormat1","valueFormat2","pairSetCount","pairSets","classDef1","classDef2","class1Count","class2Count","classRecords","entryExitCount","entryExitRecords","markCoverage","baseCoverage","markArray","baseArray","ligatureCoverage","ligatureArray","mark1Coverage","mark2Coverage","mark1Array","mark2Array","posFormat","extension","GPOS","scriptList","featureList","lookupList","featureVariations","Sequence","AlternateSet","Ligature","compCount","LigatureSet","GSUBLookup","deltaGlyphID","substitute","substFormat","sequences","alternateSet","ligatureSets","substitutes","GSUB","JstfGSUBModList","JstfPriority","shrinkageEnableGSUB","shrinkageDisableGSUB","shrinkageEnableGPOS","shrinkageDisableGPOS","shrinkageJstfMax","extensionEnableGSUB","extensionDisableGSUB","extensionEnableGPOS","extensionDisableGPOS","extensionJstfMax","JstfLangSys","JstfLangSysRecord","jstfLangSys","JstfScript","extenderGlyphs","langSysCount","JstfScriptRecord","JSTF","scriptCount","VariableSizeNumber","_size","MapDataEntry","entry","entryFormat","outerIndex","innerIndex","DeltaSetIndexMap","mapCount","mapData","HVAR","advanceWidthMapping","LSBMapping","RSBMapping","Signature","SignatureBlock","cbSignature","signature","DSIG","ulVersion","usNumSigs","usFlag","signatures","signatureBlocks","GaspRange","rangeMaxPPEM","rangeGaspBehavior","gasp","numRanges","gaspRanges","DeviceRecord","pixelSize","maximumWidth","widths","hdmx","sizeDeviceRecord","KernPair","left","right","ClassTable","firstGlyph","nGlyphs","Kern2Array","leftTable","rowWidth","KernSubtable","nPairs","pairs","rightTable","array","kernValueCount","leftClassCount","rightClassCount","kernValue","leftClass","rightClass","kernIndex","KernTable","subVersion","tupleIndex","kern","nTables","LTSH","yPels","PCLT","fontNumber","pitch","typeFamily","symbolSet","typeface","characterComplement","fileName","strokeWeight","widthType","serifStyle","Ratio","bCharSet","xRatio","yStartRatio","yEndRatio","vTable","yPelHeight","VdmxGroup","recs","startsz","endsz","VDMX","numRecs","numRatios","ratioRanges","vhea","advanceHeightMax","minTopSideBearing","minBottomSideBearing","yMaxExtent","VmtxEntry","vmtx","shortFrac","Correspondence","fromCoord","toCoord","Segment","pairCount","correspondence","avar","segment","UnboundedArrayAccessor","_items","getItem","inspect","UnboundedArray","LookupTable","ValueType","Shadow","BinarySearchHeader","unitSize","nUnits","LookupSegmentSingle","lastGlyph","LookupSegmentArray","LookupSingle","binarySearchHeader","segments","StateTable","entryData","newState","Entry","StateArray","nClasses","classTable","stateArray","entryTable","BslnSubtable","mappingData","standardGlyph","controlPoints","bsln","defaultBaseline","Setting","setting","fontFeatures","FeatureName","nSettings","settingTable","featureFlags","defaultSetting","feat","featureNameCount","reserved1","reserved2","featureNames","Axis$1","axisTag","minValue","defaultValue","maxValue","Instance","coord","postscriptNameID","instanceSize","fvar","offsetToData","countSizePairs","axisSize","instanceCount","axis","shortFrac$1","Offset","gvar","globalCoordCount","globalCoords","ClassTable$1","subFeatureFlags","stateTable","ClassLookupTable","newStateOffset","WidthDeltaRecord","justClass","beforeGrowLimit","beforeShrinkLimit","afterGrowLimit","afterShrinkLimit","growFlags","shrinkFlags","WidthDeltaCluster","ActionData","lowerLimit","upperLimit","order","addGlyph","substThreshold","substGlyph","variationAxis","minimumLimit","noStretchValue","maximumLimit","Action","actionClass","actionType","actionLength","actionData","PostcompensationAction","PostCompensationTable","lookupTable","JustificationTable","wdcOffset","postCompensationTable","widthDeltaClusters","just","horizontal","vertical","LigatureData","action","ContextualData","markIndex","currentIndex","InsertionData","currentInsertIndex","markedInsertIndex","SubstitutionTable","items","SubtableData","substitutionTable","ligatureActions","ligatureList","insertionActions","Subtable","FeatureEntry","featureType","featureSetting","enableFlags","disableFlags","MorxChain","defaultFlags","chainLength","nFeatureEntries","nSubtables","features","subtables","morx","unused","nChains","chains","OpticalBounds","bottom","opbd","CBLC","_class$1","TableEntry","checkSum","Directory","numTables","binarySearch","cmp","_applyDecoratedDescriptor$1","decorators","context","desc","forEach","initializer","reverse","reduce","decorator","tables$$","VoidPointer","maxExponentFor2","log","LN2","maxPowerOf2","pow","CmapProcessor","cmapTable","findSubtable","uvs","lookup","codepoint","variationSelector","getVariationSelector","rangeOffset","_gid","_min","_max","_mid","group","selectors","toArray","sel","getCharacterSet","endCodes","tail","_res","codePointsForGlyph","_res2","g","_res3","_i6","_ref6","_res4","_iterator6","_isArray6","_i7","_ref7","_group","KernProcessor","positions","getKerning","crossStream","variation","pairIdx","pair","leftOffset","rightOffset","override","UnicodeLayoutEngine","positionGlyphs","clusterStart","clusterEnd","isMark","positionCluster","baseBox","cbox","copy","codePoints","minX","yGap","mark","markBox","position","combiningClass","getCombiningClass","maxX","minY","maxY","BBox","Infinity","addPoint","y","UNICODE_SCRIPTS","Caucasian_Albanian","Arabic","Imperial_Aramaic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Chakma","Canadian_Aboriginal","Carian","Cham","Cherokee","Coptic","Cypriot","Cyrillic","Devanagari","Deseret","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Hangul","Han","Hanunoo","Hebrew","Hiragana","Pahawh_Hmong","Katakana_Or_Hiragana","Old_Italic","Javanese","Kayah_Li","Katakana","Kharoshthi","Khmer","Khojki","Kannada","Kaithi","Tai_Tham","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Mandaic","Manichaean","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Malayalam","Modi","Mongolian","Mro","Meetei_Mayek","Myanmar","Old_North_Arabian","Nabataean","Nko","Ogham","Ol_Chiki","Old_Turkic","Oriya","Osmanya","Palmyrene","Pau_Cin_Hau","Old_Permic","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Miao","Inscriptional_Parthian","Rejang","Runic","Samaritan","Old_South_Arabian","Saurashtra","Shavian","Sharada","Siddham","Khudawadi","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagbanwa","Takri","Tai_Le","New_Tai_Lue","Tamil","Tai_Viet","Telugu","Tifinagh","Tagalog","Thaana","Thai","Tibetan","Tirhuta","Ugaritic","Vai","Warang_Citi","Old_Persian","Cuneiform","Yi","Inherited","Common","Unknown","OPENTYPE_SCRIPTS","RTL","arab","hebr","syrc","thaa","cprt","khar","phnx","nko ","lydi","avst","armi","phli","prti","sarb","orkh","samr","mand","merc","mero","mani","mend","nbat","narb","palm","phlp","direction","GlyphRun","direction$$","bbox","GlyphPosition","allTypographicFeatures","code","exclusive","allTypeFeatures","ligatures","requiredLigatures","commonLigatures","rareLigatures","rebusPictures","diphthongLigatures","squaredLigatures","abbrevSquaredLigatures","symbolLigatures","contextualLigatures","historicalLigatures","cursiveConnection","unconnected","partiallyConnected","cursive","letterCase","verticalSubstitution","substituteVerticalForms","linguisticRearrangement","numberSpacing","monospacedNumbers","proportionalNumbers","thirdWidthNumbers","quarterWidthNumbers","smartSwash","wordInitialSwashes","wordFinalSwashes","nonFinalSwashes","diacritics","showDiacritics","hideDiacritics","decomposeDiacritics","verticalPosition","normalPosition","superiors","inferiors","ordinals","scientificInferiors","fractions","noFractions","verticalFractions","diagonalFractions","overlappingCharacters","preventOverlap","typographicExtras","slashedZero","mathematicalExtras","mathematicalGreek","ornamentSets","noOrnaments","dingbats","piCharacters","fleurons","decorativeBorders","internationalSymbols","mathSymbols","characterAlternatives","noAlternates","designComplexity","designLevel1","designLevel2","designLevel3","designLevel4","designLevel5","styleOptions","noStyleOptions","displayText","engravedText","illuminatedCaps","titlingCaps","tallCaps","characterShape","traditionalCharacters","simplifiedCharacters","JIS1978Characters","JIS1983Characters","JIS1990Characters","traditionalAltOne","traditionalAltTwo","traditionalAltThree","traditionalAltFour","traditionalAltFive","expertCharacters","JIS2004Characters","hojoCharacters","NLCCharacters","traditionalNamesCharacters","numberCase","lowerCaseNumbers","upperCaseNumbers","textSpacing","proportionalText","monospacedText","halfWidthText","thirdWidthText","quarterWidthText","altProportionalText","altHalfWidthText","transliteration","noTransliteration","annotation","noAnnotation","boxAnnotation","roundedBoxAnnotation","circleAnnotation","invertedCircleAnnotation","parenthesisAnnotation","periodAnnotation","romanNumeralAnnotation","diamondAnnotation","invertedBoxAnnotation","invertedRoundedBoxAnnotation","kanaSpacing","fullWidthKana","proportionalKana","ideographicSpacing","fullWidthIdeographs","proportionalIdeographs","halfWidthIdeographs","unicodeDecomposition","canonicalComposition","compatibilityComposition","transcodingComposition","rubyKana","CJKSymbolAlternatives","noCJKSymbolAlternatives","CJKSymbolAltOne","CJKSymbolAltTwo","CJKSymbolAltThree","CJKSymbolAltFour","CJKSymbolAltFive","ideographicAlternatives","noIdeographicAlternatives","ideographicAltOne","ideographicAltTwo","ideographicAltThree","ideographicAltFour","ideographicAltFive","CJKVerticalRomanPlacement","CJKVerticalRomanCentered","CJKVerticalRomanHBaseline","italicCJKRoman","CJKItalicRoman","caseSensitiveLayout","caseSensitiveSpacing","alternateKana","alternateHorizKana","alternateVertKana","stylisticAlternatives","noStylisticAlternates","stylisticAltOne","stylisticAltTwo","stylisticAltThree","stylisticAltFour","stylisticAltFive","stylisticAltSix","stylisticAltSeven","stylisticAltEight","stylisticAltNine","stylisticAltTen","stylisticAltEleven","stylisticAltTwelve","stylisticAltThirteen","stylisticAltFourteen","stylisticAltFifteen","stylisticAltSixteen","stylisticAltSeventeen","stylisticAltEighteen","stylisticAltNineteen","stylisticAltTwenty","contextualAlternates","swashAlternates","contextualSwashAlternates","lowerCase","defaultLowerCase","lowerCaseSmallCaps","lowerCasePetiteCaps","upperCase","defaultUpperCase","upperCaseSmallCaps","upperCasePetiteCaps","languageTag","CJKRomanSpacing","halfWidthCJKRoman","proportionalCJKRoman","defaultCJKRoman","fullWidthCJKRoman","selector","OTMapping","rlig","clig","dlig","hlig","liga","hist","smcp","pcap","frac","dnom","numr","afrc","case","ccmp","cpct","valt","swsh","cswh","curs","c2pc","c2sc","fin2","medi","med2","fin3","fina","pkna","half","halt","hkna","vkna","ital","lnum","onum","mgrk","calt","vrt2","tnum","pnum","sups","subs","ordn","pwid","hwid","qwid","twid","fwid","palt","trad","smpl","jp78","jp83","jp90","jp04","expt","hojo","nlck","tnam","ruby","titl","zero","ss01","ss02","ss03","ss04","ss05","ss06","ss07","ss08","ss09","ss10","ss11","ss12","ss13","ss14","ss15","ss16","ss17","ss18","ss19","ss20","_class$3","AATMapping","ot","aat","mapFeatureStrings","typeCode","settingCode","_class$2","AATLookupTable","seg","glyphsForValue","classValue","_segment","AATStateMachine","processEntry","currentState","dir","classCode","shouldAdvance","entryIndex","traverse","state","visited","add","_stateTable","row","enter","exit","AATMorxProcessor","processIndicRearragement","processContextualSubstitution","processLigature","processNoncontextualSubstitutions","processGlyphInsertion","inputCache","chain","processSubtable","ligatureStack","markedGlyph","markedIndex","stateMachine","getStateMachine","getProcessor","verb","swap","reorderGlyphs","subsitutions","getGlyph","_lookup","_lookupTable","_ligatureStack","actions","actionIndex","last","ligatureIndex","ligatureGlyphs","_codePoints","componentGlyph","unshift","ligatureEntry","_insertGlyphs","insertionActionIndex","isBefore","_glyphs","insertions","_count","_isBefore","getSupportedFeatures","generateInputs","generateInputCache","_iterator7","_isArray7","generateInputsForSubtable","stack","found","_cache","_stack$pop","rangeA","rangeB","reverseA","reverseB","_class$4","_temp","AATLayoutEngine","morxProcessor","fallbackPosition","glyphRun","mapOTToAAT","getAvailableFeatures","_feature","_f","mapAATToOT","stringsForGlyph","glyphStrings","_addStrings","strings","_cmapProcessor","ShapingPlan","stages","globalFeatures","allFeatures","_addFeatures","stageIndex","stage","arg","local","addStage","setFeatureOverrides","assignGlobalFeatures","processor","applyFeatures","VARIATION_FEATURES","COMMON_FEATURES","FRACTIONAL_FEATURES","HORIZONTAL_FEATURES","DIRECTIONAL_FEATURES","ltr","rtl","DefaultShaper","plan","_plan","planPreprocessing","planFeatures","planPostprocessing","assignFeatures","userFeatures","isDigit","zeroMarkWidths","trie","FEATURES","ShapingClasses","Non_Joining","Left_Joining","Right_Joining","Dual_Joining","Join_Causing","ALAPH","DALATH RISH","Transparent","ISOL","FINA","STATE_TABLE","ArabicShaper","_DefaultShaper","curAction","prevAction","getShapingClass","_STATE_TABLE$state$ty","category","getCategory","_class$5","_temp$1","GlyphIterator","shouldIgnore","ignoreMarks","ignoreBaseGlyphs","isBase","ignoreLigatures","isLigature","move","peek","idx","increment","peekIndex","DEFAULT_SCRIPTS","OTProcessor","scriptTag","lookups","variationsIndex","_variationProcessor","findVariationsIndex","normalizedCoords","selectScript","ligatureID","currentFeature","findScript","changed","repeat","substituteFeature","substituteFeatureForVariations","lookupsForFeatures","exclude","lookupIndex","sort","substitution","coords","variations","conditions","variationConditionsMatch","every","condition","advances","applyLookups","glyphIterator","_iterator8","_isArray8","_i8","_ref8","_ref9","_iterator9","_isArray9","_i9","_ref10","applyLookup","applyLookupList","_iterator10","_isArray10","_i10","_ref11","lookupRecord","_iterator11","_isArray11","_i11","_ref12","coverageIndex","_iterator12","_isArray12","_i12","_ref13","match","sequence","matched","sequenceMatches","component","sequenceMatchIndices","coverageSequenceMatches","getClassID","_iterator13","_isArray13","_i13","_ref14","classSequenceMatches","_this3","classID","applyContext","_iterator14","_isArray14","_i14","_ref15","rule","_iterator15","_isArray15","_i15","_ref16","_rule","applyChainingContext","_iterator16","_isArray16","_i16","_ref17","rules","_iterator17","_isArray17","_i17","_ref18","_rule2","GlyphInfo","_font","ligatureComponent","isLigated","cursiveAttachment","markAttachment","shaperInfo","substituted","isMultiplied","_id","HangulShaper","getType","STATE_TABLE$1","DECOMPOSE","hasGlyphForCodePoint","decompose","COMPOSE","compose","TONE_MARK","reorderToneMark","INVALID","insertDottedCircle","HANGUL_BASE","HANGUL_COUNT","L_BASE","V_BASE","T_BASE","V_COUNT","T_COUNT","L_END","V_END","T_END","DOTTED_CIRCLE","isL","isV","isT","isTone","isLVT","isLV","isCombiningL","isCombiningV","isCombiningT","X","L","V","LV","LVT","glyphForCodePoint","v","ljmo","vjmo","insert","tjmo","prevType","lv","del","advanceWidth","getLength","dottedCircle","_class$6","_temp$2","indicMachine","accepting","tags","useData","categories","decompositions","2507","2508","2888","2891","2892","3018","3019","3020","3144","3264","3271","3272","3274","3275","3402","3403","3404","3546","3548","3549","3550","3635","3763","3955","3957","3958","3959","3960","3961","3969","6971","6973","6976","6977","6979","69934","69935","70475","70476","70843","70844","70846","71098","71099","CATEGORIES","N","ZWNJ","ZWJ","SM","VD","A","Placeholder","Dotted_Circle","RS","Coeng","Repha","Ra","CM","POSITIONS","Start","Ra_To_Become_Reph","Pre_M","Pre_C","Base_C","After_Main","Above_C","Before_Sub","Below_C","After_Sub","Before_Post","Post_C","After_Post","Final_C","SMVD","End","CONSONANT_FLAGS","JOINER_FLAGS","HALANT_OR_COENG_FLAGS","INDIC_CONFIGS","Default","hasOldSpec","virama","basePos","rephPos","rephMode","blwfMode","INDIC_DECOMPOSITIONS","6078","6079","6080","6084","6085","trie$1","IndicShaper","setupSyllables","initialReordering","finalReordering","unicodeScript","fromOpenType","indicConfig","isOldSpec","_loop","decomposed","indicCategory","indicPosition","_class$7","_temp$3","IndicInfo","syllableType","syllable","isConsonant","isJoiner","isHalantOrCoeng","wouldSubstitute","_glyph$features","_layoutEngine","engine","GSUBProcessor","consonantPosition","consonant","info","nextSyllable","_glyphs$start$shaperI","limit","hasReph","rphf","_g","seenBelow","_info","_info2","disallowDoubleHalants","_j","lastPos","_info3","_j2","_j3","blwf","abvf","pstf","pref","_i18","_j4","cfar","_i19","nonJoiner","_j5","tryPref","BASE_C","_i20","newPos","_i21","oldPos","tmp","newRephPos","_i22","reph","_i23","_newPos","_oldPos2","_oldPos","_tmp","test","categories$1","decompositions$2","trie$2","stateMachine$1","UniversalShaper","setupSyllables$1","clearSubstitutionFlags","recordRphf","recordPref","reorder","useCategory","USEInfo","nextSyllable$1","isHalant","SHAPERS","mong","phag","hang","bng2","beng","dev2","deva","gjr2","gujr","guru","gur2","knda","knd2","mlm2","mlym","ory2","orya","taml","tml2","telu","tel2","khmr","bali","batk","brah","bugi","buhd","cakm","cham","dupl","egyp","gran","hano","java","kthi","kali","khoj","sind","lepc","limb","mahj","mtei","modi","hmng","rjng","saur","shrd","sidd","sinh","sund","sylo","tglg","tagb","tale","lana","tavt","takr","tibt","tfng","tirh","latn","DFLT","_OTProcessor","_index","curGlyph","replacement","_index2","_index3","ligature","_curGlyph","characters","_index4","ligatureGlyph","isMarkLigature","lastLigID","lastNumComps","curComps","matchIndex","GPOSProcessor","applyPositionValue","variationProcessor","variationStore","getDelta","nextGlyph","_pair","class1","class2","nextIndex","_nextGlyph","curRecord","nextRecord","getAnchor","rightToLeft","baseGlyphIndex","baseIndex","markRecord","baseAnchor","applyAnchor","_markIndex","_baseGlyphIndex","ligIndex","ligAttach","markGlyph","ligGlyph","compIndex","_markRecord","_baseAnchor","mark1Index","prevIndex","_cur","good","mark2Index","_markRecord2","_baseAnchor2","markCoords","markPos","anchor","fixCursiveAttachment","fixMarkAttachment","_k","OTLayoutEngine","glyphInfos","setup","shaper","choose","glyphInfo","zeroMarkAdvances","cleanup","LayoutEngine","unicodeLayoutEngine","kernProcessor","layout","_script","getScript","forString","glyphsForString","_script2","forCodePoints","hideDefaultIgnorables","positioned","space","isDefaultIgnorable","ch","plane","SVG_COMMANDS","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","closePath","Path","commands","_bbox","_cbox","toFunction","cmds","command","toSVG","round","mapPoints","path","_fn","transform","m0","m1","m2","m3","m4","m5","translate","rotate","angle","cos","scale","scaleX","scaleY","cx","cy","p0","p1","p2","p3","_c$args","_c$args2","qp1x","qp1y","cp1x","cp1y","cp2x","p3x","cp2y","p3y","_c$args3","b2ac","t1","sqrt","t2","_arr","_class$8","StandardNames","_applyDecoratedDescriptor$4","_class","Glyph","_getPath","_getCBox","_getBBox","_getTableMetrics","metric","_getMetrics","_metrics","_getTableMetrics2","leftBearing","_getTableMetrics3","advanceHeight","topBearing","os2","getAdvanceAdjustment","getScaledPath","_getName","render","save","restore","GlyfHeader","numberOfContours","Point","onCurve","endContour","Component","dx","dy","scale01","scale10","TTFGlyph","_Glyph","internal","_getTableStream","_parseGlyphCoord","short","same","_decode","glyfPos","_decodeSimple","_decodeComposite","points","endPtsOfContours","numCoords","flag","py","_getPhantomPoints","transformPoints","phantomPoints","haveInstructions","gPos","_getContours","_contours","contour","directory","contours","firstPt","lastPt","curvePt","pt","prevPt","midX","midY","CFFGlyph","CFF2","bias","cff","nStems","usedGsubrs","usedSubrs","_usedGsubrs","_usedSubrs","gsubrs","gsubrsBias","privateDict","subrs","Subrs","subrsBias","vstore","vsindex","checkWidth","shift","nominalWidthX","parseStems","phase","c1x","c1y","c2x","c2y","subr","blendVector","getBlendVector","numOperands","s1","s2","v1","v2","c3x","c3y","c4x","c4y","c5x","c5y","c6x","c6y","pts","startx","starty","b1","SBIXImage","originX","originY","buflen","SBIXGlyph","_TTFGlyph","getImageForSize","img","image","renderOutlines","COLRLayer","color","COLRGlyph","layers","fillColor","cpal","colr","rec","baseLayer","_getBaseGlyph","GlyphVariationProcessor","normalizeCoords","blendVectors","normalized","glyphPoints","tupleCount","here","sharedPoints","decodePoints","origPoints","tupleDataSize","tupleCoords","startCoords","_a","endCoords","_a2","factor","tupleFactor","nPoints","xDeltas","decodeDeltas","yDeltas","outPoints","hasDelta","interpolateMissingDeltas","deltaX","deltaY","run","runCount","readUInt16","Int16Array","inPoints","firstPoint","endPoint","firstDelta","curDelta","deltaInterpolate","deltaShift","ref1","ref2","in1","in2","out1","out2","_p","ref","_table$advanceWidthMa","itemStore","varData","deltaSet","netAdjustment","master","scalar","regionIndex","axes","Subset","mapping","includeGlyph","encodeStream","EncodeStream","nextTick","Point$1","Glyf","xPoints","yPoints","TTFGlyphEncoder","encodeSimple","lastX","lastY","lastFlag","pointCount","_encodePoint","shortFlag","sameFlag","diff","TTFSubset","_Subset","glyphEncoder","_addGlyph","curOffset","nextOffset","cvt ","CFFSubset","subsetCharstrings","charstrings","subsetSubrs","used","subsetFontdict","used_fds","used_subrs","FontName","createCIDFontdict","addString","Encoding","CIDCount","_applyDecoratedDescriptor","TTFFont","variationCoords","_directoryPos","_tables","_decodeDirectory","_getTable","_decodeTable","getName","nextState","createSubset","getVariation","settings","namedVariations","trim","WOFFDirectoryEntry","compLength","origChecksum","WOFFDirectory","flavor","totalSfntSize","metaOffset","metaLength","metaOrigLength","privOffset","privLength","WOFFFont","_TTFFont","outBuffer","WOFF2Glyph","_transformedGlyphs","Base128","knownTags","WOFF2DirectoryEntry","customTag","transformVersion","transformed","transformLength","WOFF2Directory","totalCompressedSize","WOFF2Font","_dataPos","_decompress","_decompressed","decompressedSize","decompressed","_transformGlyfTable","GlyfTable","nContours","totalPoints","read255UInt16","decodeTriplet","composites","Substream","_buf","indexFormat","nContourStreamSize","nPointsStreamSize","flagStreamSize","glyphStreamSize","compositeStreamSize","bboxStreamSize","instructionStreamSize","bboxes","WORD_CODE","ONE_MORE_BYTE_CODE2","ONE_MORE_BYTE_CODE1","LOWEST_U_CODE","withSign","baseval","b0","b2","TTCHeader","numFonts","131072","dsigTag","dsigLength","dsigOffset","TrueTypeCollection","fonts","DFontName","Ref","nameOffset","attr","dataOffset","handle","Type","maxTypeIndex","refList","TypeList","DFontMap","typeList","nameListOffset","DFontHeader","dataLength","mapLength","DFont","sfnt","PrependBOMWrapper","StripBOMWrapper","pass","InternalCodec","InternalEncoderBase64","InternalEncoderCesu8","InternalDecoderCesu8","utf8","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","InternalEncoder","InternalDecoder","StringDecoder","prevStr","acc","contBytes","accBytes","completeQuads","bufIdx","charCode","curByte","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","overflowByte","Utf16Codec","Utf16Encoder","Utf16Decoder","initialBytes","initialBytesLen","detectEncoding","defaultEncoding","asciiCharsLE","asciiCharsBE","utf16be","buf2","utf16","Utf7Codec","utf7","unicode11utf7","Utf7Encoder","Utf7Decoder","nonDirectChars","inBase64","base64Accum","chunk","base64Regex","plusChar","minusChar","andChar","Utf7IMAPCodec","Utf7IMAPEncoder","base64AccumIdx","Utf7IMAPDecoder","lastI","b64str","canBeDecoded","utf7imap","uChar","base64IMAPChars","SBCSCodec","chars","asciiString","decodeBuf","encodeBuf","SBCSEncoder","SBCSDecoder","_sbcs","newBuf","idx1","idx2","10029","maccenteuro","808","ibm808","cp808","mik","ascii8bit","usascii","ansix34","ansix341968","ansix341986","csascii","cp367","ibm367","isoir6","iso646us","iso646irv","us","latin1","latin2","latin3","latin4","latin5","latin6","latin7","latin8","latin9","latin10","csisolatin1","csisolatin2","csisolatin3","csisolatin4","csisolatincyrillic","csisolatinarabic","csisolatingreek","csisolatinhebrew","csisolatin5","csisolatin6","l1","l2","l3","l4","l5","l6","l7","l8","l9","l10","isoir14","isoir57","isoir100","isoir101","isoir109","isoir110","isoir144","isoir127","isoir126","isoir138","isoir148","isoir157","isoir166","isoir179","isoir199","isoir203","isoir226","cp819","ibm819","cyrillic","arabic","arabic8","ecma114","asmo708","greek","greek8","ecma118","elot928","hebrew","hebrew8","turkish","turkish8","thai","thai8","celtic","celtic8","isoceltic","tis6200","tis62025291","tis62025330","10000","10006","10007","10079","10081","cspc8codepage437","cspc775baltic","cspc850multilingual","cspcp852","cspc862latinhebrew","cpgr","msee","mscyrl","msansi","msgreek","msturk","mshebr","msarab","winbaltrim","cp20866","20866","ibm878","cskoi8r","cp21866","21866","ibm1168","strk10482002","tcvn5712","tcvn57121","gb198880","cn","csiso14jisc6220ro","jisc62201969ro","jp","cshproman8","r8","roman8","xroman8","ibm1051","mac","csmacintosh","437","737","775","850","852","855","856","857","858","860","861","862","863","864","865","866","869","874","922","1129","1161","1162","1163","1250","1251","1252","1253","1254","1255","1256","1257","1258","28591","28592","28593","28594","28595","28596","28597","28598","28599","28600","28601","28603","28604","28605","28606","windows874","win874","cp874","windows1250","win1250","cp1250","windows1251","win1251","cp1251","windows1252","win1252","cp1252","windows1253","win1253","cp1253","windows1254","win1254","cp1254","windows1255","win1255","cp1255","windows1256","win1256","cp1256","windows1257","win1257","cp1257","windows1258","win1258","cp1258","iso88591","cp28591","iso88592","cp28592","iso88593","cp28593","iso88594","cp28594","iso88595","cp28595","iso88596","cp28596","iso88597","cp28597","iso88598","cp28598","iso88599","cp28599","iso885910","cp28600","iso885911","cp28601","iso885913","cp28603","iso885914","cp28604","iso885915","cp28605","iso885916","cp28606","cp437","ibm437","csibm437","cp737","ibm737","csibm737","cp775","ibm775","csibm775","cp850","ibm850","csibm850","cp852","ibm852","csibm852","cp855","ibm855","csibm855","cp856","ibm856","csibm856","cp857","ibm857","csibm857","cp858","ibm858","csibm858","cp860","ibm860","csibm860","cp861","ibm861","csibm861","cp862","ibm862","csibm862","cp863","ibm863","csibm863","cp864","ibm864","csibm864","cp865","ibm865","csibm865","cp866","ibm866","csibm866","cp869","ibm869","csibm869","cp922","ibm922","csibm922","cp1046","ibm1046","csibm1046","cp1124","ibm1124","csibm1124","cp1125","ibm1125","csibm1125","cp1129","ibm1129","csibm1129","cp1133","ibm1133","csibm1133","cp1161","ibm1161","csibm1161","cp1162","ibm1162","csibm1162","cp1163","ibm1163","csibm1163","maccroatian","maccyrillic","macgreek","maciceland","macroman","macromania","macthai","macturkish","macukraine","koi8r","koi8u","koi8ru","koi8t","armscii8","rk1048","tcvn","georgianacademy","georgianps","pt154","viscii","iso646cn","iso646jp","hproman8","macintosh","ascii","tis620","_dbcs","DBCSCodec","UNASSIGNED","GB18030_CODE","NODE_START","UNASSIGNED_NODE","mappingTable","decodeTables","decodeTableSeq","_addDecodeChunk","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","to","_fillEncodeTable","encodeAdd","_setEncodeChar","defCharSB","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","DBCSEncoder","leadSurrogate","seqObj","DBCSDecoder","nodeIdx","prevBuf","findIdx","_getDecodeTrieNode","addr","curAddr","writeTable","part","codeTrail","seq","_getEncodeBucket","uCode","dbcsCode","bucket","_setEncodeSequence","oldVal","prefix","mbCode","nextChar","resCode","uChars","gbChars","prevBufOffset","seqStart","curSeq","uCodeLead","shiftjis","¥","‾","csshiftjis","mskanji","sjis","windows31j","ms31j","xsjis","windows932","ms932","932","cp932","eucjp","gb2312","gb231280","gb23121980","csgb2312","csiso58gb231280","euccn","windows936","ms936","936","cp936","gbk","xgbk","isoir58","€","chinese","windows949","ms949","949","cp949","cseuckr","csksc56011987","euckr","isoir149","korean","ksc56011987","ksc56011989","ksc5601","windows950","ms950","950","cp950","big5","big5hkscs","cnbig5","csbig5","xxbig5","Transform","IconvLiteEncoderStream","conv","decodeStrings","IconvLiteDecoderStream","decodeStream","supportsStreams","_collect","collect","_transform","_flush","cb","chunks","on","original","supportsNodeEncodingsExtension","extendNodeEncodings","nodeNativeEncodings","utf-8","ucs-2","utf-16le","isNativeEncoding","SlowBuffer","SlowBufferToString","SlowBufferWrite","isFinite","remaining","BufferIsEncoding","isEncoding","BufferByteLength","BufferToString","BufferWrite","_offset","_length","_encoding","Readable","ReadableSetEncoding","setEncoding","_readableState","undoExtendNodeEncodings","K","isPrime","sqrtN","getFractionalBits","nPrime","SHA256","h","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","HmacSHA256","X64Word","X64WordArray","X64Word_create","SHA512","H0","H1","H2","H3","H4","H5","H6","H7","H0h","H0l","H1h","H1l","H2h","H2l","H3h","H3l","H4h","H4l","H5h","H5l","H6h","H6l","H7h","H7l","ah","al","bh","bl","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","Wi","Wih","Wil","gamma0xh","gamma0xl","gamma0h","gamma0l","gamma1xh","gamma1xl","gamma1h","gamma1l","Wi7","Wi7h","Wi7l","Wi16","Wi16h","Wi16l","t1l","chh","chl","majh","majl","sigma0h","sigma0l","sigma1h","sigma1l","Ki","Kih","Kil","t1h","t2l","HmacSHA512","ArrayT","utils","lengthType","defineProperties","_setup","_parseFields","_ref1","is","createElement","getKeys","arrayIndexOf","ARG","tryGet","callee","hiddenKeys","getOwnPropertyNames","redefineAll","anInstance","forOf","$iterDefine","setSpecies","DESCRIPTORS","validate","SIZE","getEntry","getConstructor","wrapper","IS_MAP","ADDER","_l","clear","delete","callbackfn","setStrong","safe","forbiddenField","ArrayProto","each","common","IS_WEAK","_c","IS_ADDER","COLLECTION","of","mapFn","nextItem","BrotliInput","BrotliOutput","read","dictionary","offsetsByLength","sizeBitsByLength","minDictionaryWordLength","maxDictionaryWordLength","HuffmanCode","GetNextKey","ReplicateValue","NextTableBitSize","root_bits","BrotliBuildHuffmanTable","root_table","code_lengths","code_lengths_size","symbol","table_bits","table_size","total_size","sorted","start_table","Int32Array","SHIFT_2","OMITTED_BMP_INDEX_1_LENGTH","INDEX_2_MASK","INDEX_SHIFT","DATA_MASK","INDEX_1_OFFSET","DATA_GRANULARITY","[object Object]","AI","AL","BA","BK","CB","CI_BRK","CJ","CP_BRK","CR","DI_BRK","IN_BRK","LF","LineBreaker","NL","NS","SA","SG","SP","WJ","XX","classTrie","pairTable","ID","characterClasses","PR_BRK","toByteArray","Break","mapClass","mapFirst","curClass","nextClass","nextCodePoint","nextCharClass","required","nextBreak","lastClass","shouldBreak","zlib","PNG","chunkSize","colors","text","palette","imgData","transparency","readUInt32","_results","colorType","compressionMethod","filterMethod","interlaceMethod","indexed","grayscale","rgb","hasAlphaChannel","pixelBitlength","colorSpace","file","pixels","load","decodePixels","col","pa","paeth","pb","pc","pixelBytes","scanlineLength","upper","upperLeft","_m","decodePalette","copyToImageData","imageData","_decodedPalette","ArrayBuffer","superInit","typedArray","Int8Array","Uint8ClampedArray","Float32Array","Float64Array","byteOffset","typedArrayByteLength","swapEndian","word","Utf16","Utf16BE","utf16Chars","utf16Str","utf16StrLength","Utf16LE","SHA224","HmacSHA224","SHA384","HmacSHA384","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","newY","LFSR","roundConstantMsw","roundConstantLsw","bitPosition","SHA3","outputLength","_state","nBlockSizeLanes","M2i","M2i1","lane","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","blockSizeBits","outputLengthBytes","outputLengthLanes","hashWords","HmacSHA3","_zl","_zr","_sl","_sr","_hl","_hr","RIPEMD160","ar","br","cr","dr","er","hr","zl","zr","sl","sr","f1","f2","f3","f4","f5","rotl","z","HmacRIPEMD160","PBKDF2","blockIndex","blockIndexWords","blockWords","blockWordsLength","intermediate","intermediateWords","CFB","generateKeystreamAndEncrypt","keystream","CTR","counter","_counter","CTRGladman","incWord","b3","incCounter","OFB","_keystream","ECB","AnsiX923","lastBytePos","Ansix923","Iso10126","Iso97971","ZeroPadding","NoPadding","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","xi","sx","x2","x4","x8","RCON","AES","_nRounds","_keyPriorReset","keyWords","ksRows","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","_doCryptBlock","nRounds","s0","s3","t0","t3","PC1","PC2","BIT_SHIFTS","SBOX_P","268435456","536870912","805306368","1073741824","1342177280","1610612736","1879048192","2147483648","2415919104","2684354560","2952790016","3221225472","3489660928","3758096384","4026531840","134217728","402653184","671088640","939524096","1207959552","1476395008","1744830464","2013265920","2281701376","2550136832","2818572288","3087007744","3355443200","3623878656","3892314112","4160749568","268435457","536870913","805306369","1073741825","1342177281","1610612737","1879048193","2147483649","2415919105","2684354561","2952790017","3221225473","3489660929","3758096385","4026531841","134217729","402653185","671088641","939524097","1207959553","1476395009","1744830465","2013265921","2281701377","2550136833","2818572289","3087007745","3355443201","3623878657","3892314113","4160749569","16777216","33554432","50331648","67108864","83886080","100663296","117440512","150994944","167772160","184549376","201326592","218103808","234881024","251658240","8388608","25165824","41943040","58720256","75497472","92274688","109051904","125829120","142606336","159383552","176160768","192937984","209715200","226492416","243269632","260046848","285212672","301989888","318767104","335544320","352321536","369098752","385875968","419430400","436207616","452984832","469762048","486539264","503316480","520093696","276824064","293601280","310378496","327155712","343932928","360710144","377487360","394264576","411041792","427819008","444596224","461373440","478150656","494927872","511705088","528482304","1048576","2097152","3145728","4194304","5242880","6291456","7340032","9437184","10485760","11534336","12582912","13631488","14680064","15728640","524288","1572864","2621440","3670016","4718592","5767168","6815744","7864320","8912896","9961472","11010048","12058624","13107200","14155776","15204352","16252928","17825792","18874368","19922944","20971520","22020096","23068672","24117248","26214400","27262976","28311552","29360128","30408704","31457280","32505856","17301504","18350080","19398656","20447232","21495808","22544384","23592960","24641536","25690112","26738688","27787264","28835840","29884416","30932992","31981568","33030144","196608","262144","327680","393216","458752","589824","655360","720896","786432","851968","917504","983040","32768","98304","163840","229376","294912","360448","425984","491520","557056","622592","688128","753664","819200","884736","950272","1015808","1114112","1179648","1245184","1310720","1376256","1441792","1507328","1638400","1703936","1769472","1835008","1900544","1966080","2031616","1081344","1146880","1212416","1277952","1343488","1409024","1474560","1540096","1605632","1671168","1736704","1802240","1867776","1933312","1998848","2064384","4096","8192","12288","16384","20480","24576","28672","36864","40960","45056","49152","53248","57344","61440","2048","6144","10240","14336","18432","22528","26624","30720","34816","38912","43008","47104","51200","55296","59392","63488","69632","73728","77824","81920","86016","90112","94208","102400","106496","110592","114688","118784","122880","126976","67584","71680","75776","79872","83968","88064","92160","96256","100352","104448","108544","112640","116736","120832","124928","129024","256","512","768","1024","1280","1536","1792","2304","2560","2816","3072","3328","3584","3840","384","640","896","1408","1664","1920","2176","2432","2688","2944","3200","3456","3712","3968","4352","4608","4864","5120","5376","5632","5888","6400","6656","6912","7168","7424","7680","7936","4224","4480","4736","4992","5248","5504","5760","6016","6272","6528","6784","7040","7296","7552","7808","8064","96","112","160","176","192","208","224","240","104","120","152","168","184","200","216","232","248","272","288","304","320","336","352","368","400","416","432","448","464","480","496","264","280","296","312","328","344","360","376","392","408","424","440","456","472","488","504","2147483650","2147483651","2147483652","2147483653","2147483654","2147483655","2147483656","2147483657","2147483658","2147483659","2147483660","2147483661","2147483662","2147483663","2147483664","2147483665","2147483666","2147483667","2147483668","2147483669","2147483670","2147483671","2147483672","2147483673","2147483674","2147483675","2147483676","2147483677","2147483678","2147483679","SBOX_MASK","DES","keyBits","keyBitPos","subKeys","_subKeys","nSubKey","subKey","bitShift","invSubKeys","_invSubKeys","_lBlock","_rBlock","exchangeLR","exchangeRL","lBlock","rBlock","TripleDES","_des1","_des2","_des3","RC4","keySigBytes","_S","keyByteIndex","keyByte","generateKeystreamWord","keystreamWord","RC4Drop","drop","C_","Rabbit","_X","_C","_b","IV","IV_0","IV_1","i0","i2","i1","i3","gx","ga","gb","RabbitLegacy","Boolean","Enum","bufferSize","bufferOffset","ensure","_read","flush","writeBuffer","writeString","writeUInt24BE","writeUInt24LE","writeInt24BE","writeInt24LE","LazyArrayT","BooleanT","BufferT","StringT","versionGetter","versionSetter","_base","_base1","_base2","_base3","nullValue","relativeToGetter","decodeValue","relative","$Object","$getOwnPropertyDescriptor","addToUnscopables","Arguments","toAbsoluteIndex","IS_INCLUDES","$this","fromIndex","documentElement","toObject","ObjectProto","TO_STRING","getIterator","freeze","$freeze","$fails","wks","wksDefine","enumKeys","_create","gOPNExt","$GOPD","$GOPS","$DP","gOPN","$JSON","JSON","_stringify","HIDDEN","TO_PRIMITIVE","isEnum","SymbolRegistry","AllSymbols","OPSymbols","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","D","protoDesc","wrap","isSymbol","$defineProperty","$defineProperties","$propertyIsEnumerable","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","FAILS_ON_PRIMITIVES","replacer","$replacer","gOPS","getSymbols","symbols","windowNames","getWindowNames","_defineProperty","_defineProperty2","props","protoProps","staticProps","Map","strong","SPECIES","asc","$create","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","speciesConstructor","toJSON","iter","_typeof2","_typeof3","ReferenceError","_setPrototypeOf2","_create2","subClass","superClass","__proto__","setPrototypeOf","check","buggy","pSlice","objectKeys","isArguments","deepEqual","actual","expected","Date","getTime","strict","isUndefinedOrNull","ka","kb","objEquiv","shim","supportsArgumentsClass","supported","unsupported","assign","$assign","aLen","fromCodePoint","$fromCodePoint","createProperty","arrayLike","mapfn","SAFE_CLOSING","riter","skipClosing","Set","__webpack_exports__","fs__WEBPACK_IMPORTED_MODULE_0__","fs__WEBPACK_IMPORTED_MODULE_0___default","unicode_trie__WEBPACK_IMPORTED_MODULE_1__","unicode_trie__WEBPACK_IMPORTED_MODULE_1___default","combiningClasses","scripts","eaw","log2","unicodeProperties","CATEGORY_BITS","COMBINING_BITS","SCRIPT_BITS","EAW_BITS","CATEGORY_SHIFT","COMBINING_SHIFT","SCRIPT_SHIFT","CATEGORY_MASK","COMBINING_MASK","SCRIPT_MASK","EAW_MASK","getEastAsianWidth","getNumericValue","_exp","isAlphabetic","isPunctuation","isLowerCase","isUpperCase","isTitleCase","isWhiteSpace","isBaseForm","buildUnicodeProperties","__dirname","INITIAL_STATE","FAIL_STATE","dfa","startRun","lastAccepting","lastState","EPSILON","circular","depth","filter","allParents","allChildren","useBuffer","_clone","__isArray","__isRegExp","RegExp","__getRegExpFlags","lastIndex","__isDate","allocUnsafe","attrs","__objToStr","re","ignoreCase","multiline","clonePrototype","BrotliDecompressBuffer","BrotliBitReader","BrotliDictionary","Prefix","kDefaultCodeLength","kCodeLengthRepeatCode","kNumLiteralCodes","kNumInsertAndCopyCodes","kNumBlockLengthCodes","kLiteralContextBits","kDistanceContextBits","HUFFMAN_TABLE_BITS","HUFFMAN_TABLE_MASK","HUFFMAN_MAX_TABLE_SIZE","CODE_LENGTH_CODES","kCodeLengthCodeOrder","NUM_DISTANCE_SHORT_CODES","kDistanceShortCodeIndexOffset","kDistanceShortCodeValueOffset","kMaxHuffmanTableSize","DecodeWindowBits","readBits","DecodeVarLenUint8","nbits","MetaBlockLength","meta_block_length","input_end","is_uncompressed","is_metadata","DecodeMetaBlockLength","size_nibbles","size_bytes","next_byte","next_nibble","ReadSymbol","fillBitWindow","val_","bit_pos_","ReadHuffmanCode","alphabet_size","simple_code_or_skip","readMoreInput","max_bits_counter","max_bits","num_symbols","code_length_code_lengths","num_codes","huff","code_len_idx","prev_code_len","repeat_code_len","code_len","old_repeat","repeat_delta","extra_bits","new_len","ReadHuffmanCodeLengths","ReadBlockLength","kBlockLengthPrefixCode","TranslateShortCodes","ringbuffer","MoveToFront","HuffmanTreeGroup","num_htrees","htrees","DecodeContextMap","context_map_size","context_map","max_run_length_prefix","reps","v_len","mtf","InverseMoveToFrontTransform","DecodeBlockType","max_block_type","trees","tree_type","block_types","ringbuffers","indexes","block_type","type_code","CopyUncompressedBlockToOutput","output","ringbuffer_mask","nbytes","rb_size","rb_pos","br_pos","pos_","IBUF_MASK","bit_end_pos_","buf_","input_","JumpToByteBoundary","new_bit_pos","BrotliDecompressedSize","BrotliDecompress","window_bits","max_backward_distance","ringbuffer_size","ringbuffer_end","block_type_trees","block_len_trees","max_distance","dist_rb","dist_rb_idx","prev_byte1","prev_byte2","hgroup","kRingBufferWriteAheadSlack","READ_SIZE","distance_postfix_bits","num_direct_distance_codes","distance_postfix_mask","num_distance_codes","num_literal_htrees","dist_context_map","num_dist_htrees","context_mode","htree_command","meta_block_remaining_len","block_length","num_block_types","block_type_rb","block_type_rb_index","context_modes","context_map_slice","literal_htree_index","dist_context_map_slice","dist_htree_index","context_lookup_offset1","context_lookup_offset2","_out","_o1","_o2","lookupOffsets","cmd_code","range_idx","insert_code","copy_code","insert_length","copy_length","distance_code","distance","copy_dst","postfix","kInsertRangeLut","kCopyRangeLut","kInsertLengthPrefixCode","kCopyLengthPrefixCode","word_id","transform_idx","kNumTransforms","transformDictionaryWord","_x","output_size","output_buffer","BROTLI_IBUF_SIZE","kBitMask","buf_ptr_","eos_","dst","bytes_read","n_bits","PrefixCodeRange","suffix","kTransforms","ToUpperCase","uppercase","skip","start_idx","prefix_pos","suffix_pos","Arr","PLUS","SLASH","NUMBER","LOWER","UPPER","PLUS_URL_SAFE","SLASH_URL_SAFE","elt","b64","placeHolders","fromByteArray","temp","extraBytes","OP","CL","CP","QU","GL","EX","SY","IS","PR","PO","NU","HL","IN","HY","BB","B2","ZW","JL","JV","JT","RI","stream__WEBPACK_IMPORTED_MODULE_0__","stream__WEBPACK_IMPORTED_MODULE_0___default","fs__WEBPACK_IMPORTED_MODULE_1__","fs__WEBPACK_IMPORTED_MODULE_1___default","zlib__WEBPACK_IMPORTED_MODULE_2__","zlib__WEBPACK_IMPORTED_MODULE_2___default","crypto_js__WEBPACK_IMPORTED_MODULE_3__","crypto_js__WEBPACK_IMPORTED_MODULE_3___default","fontkit__WEBPACK_IMPORTED_MODULE_4__","fontkit__WEBPACK_IMPORTED_MODULE_4___default","events__WEBPACK_IMPORTED_MODULE_5__","linebreak__WEBPACK_IMPORTED_MODULE_6__","linebreak__WEBPACK_IMPORTED_MODULE_6___default","png_js__WEBPACK_IMPORTED_MODULE_7__","png_js__WEBPACK_IMPORTED_MODULE_7___default","_defineProperties","_setPrototypeOf","_getPrototypeOf","_assertThisInitialized","_slicedToArray","_arrayWithHoles","_n","_d","_e","_s","_iterableToArrayLimit","_nonIterableRest","_toConsumableArray","arr2","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","PDFAbstractReference","PDFNameTree","sortedKeys","localeCompare","PDFObject","convert","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","return","escapableRe","escapable","\n","\r","\t","\b","\f","\\","(",")","swapBytes","buff","encryptFn","stringBuffer","isUnicode","_string","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","number","PDFReference","_PDFAbstractReference","gen","compress","Filter","Length","_security","getEncryptFn","deflateSync","_write","_refEnd","DEFAULT_MARGINS","SIZES","4A0","2A0","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","PDFPage","margin","margins","dimensions","toUpperCase","content","resources","ProcSet","Parent","_root","Pages","MediaBox","Contents","Resources","Font","XObject","ExtGState","Pattern","Annots","inRange","rangeGroup","startRange","endRange","middleRange","arrayIndex","unassigned_code_points","isUnassignedCodePoint","character","commonly_mapped_to_nothing","non_ASCII_space_characters","non_ASCII_controls_characters","non_character_codepoints","prohibited_characters","isProhibitedCharacter","bidirectional_r_al","isBidirectionalRAL","bidirectional_l","isBidirectionalL","mapping2space","mapping2nothing","getCodePoint","codePointAt","toCodePoints","codepoints","before","PDFSecurity","ownerPassword","userPassword","_setupEncryption","infoStr","CreationDate","wordArrayToBuffer","pdfVersion","encDict","_setupEncryptionV1V2V4","_setupEncryptionV5","permissions","permissionObject","printing","modifying","copying","annotating","getPermissionsR2","getPermissionsR3","userPasswordEntry","encryptionKey","paddedUserPassword","processPasswordR2R3R4","paddedOwnerPassword","ownerPasswordEntry","digest","xorRound","getOwnerPasswordR2R3R4","documentId","lsbFirstWord","getEncryptionKeyR2R3R4","getUserPasswordR3R4","CF","StdCF","AuthEvent","CFM","StmF","StrF","processedUserPassword","processPasswordR5","processedOwnerPassword","getEncryptionKeyR5","generateRandomWordArray","validationSalt","keySalt","getUserPasswordR5","userEncryptionKeyEntry","userKeySalt","getUserEncryptionKeyR5","getOwnerPasswordR5","ownerEncryptionKeyEntry","ownerKeySalt","getOwnerEncryptionKeyR5","permsEntry","getEncryptedPermissionsR5","OE","UE","Perms","fillingForms","contentAccessibility","documentAssembly","PASSWORD_PADDING","mapped_input","normalized_input","normalize","normalized_map","some","allowUnassigned","hasBidiRAL","hasBidiL","isFirstBidiRAL","isLastBidiRAL","saslprep","byteArray","sy","PDFGradient","doc","stops","embedded","opacity","_normalizeColor","_colorSpace","m11","m12","m21","m22","matrix","bounds","stopsLength","FunctionType","Domain","Functions","Bounds","Encode","_gradCount","shader","pattern","PatternType","Shading","Matrix","stop","grad","opacityGradient","embed","pageBBox","page","form","Subtype","FormType","Group","CS","Sh1","gstate","SMask","opacityPattern","PaintType","TilingType","XStep","YStep","Gs1","patterns","_this$doc$_ctm","_ctm","_this$transform","addContent","Gradient","PDFLinearGradient","_PDFGradient","x1","y1","y2","ShadingType","ColorSpace","Coords","Extend","PDFRadialGradient","_PDFGradient2","r1","r2","PDFGradient$1","PDFLinearGradient$1","PDFRadialGradient$1","ColorMixin","initColor","_opacityRegistry","_opacityCount","namedColors","_setColor","stroke","_setColorSpace","fillOpacity","_fillColor","strokeColor","strokeOpacity","_opacity","_doOpacity","_this$_opacityRegistr","ca","CA","ext_gstates","linearGradient","radialGradient","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","parameters","Q","q","Z","runners","solveArc","_coords","rx","ry","rot","large","sweep","ey","segs","arcToSegments","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","bez","segmentToBezier","rotateX","ox","oy","th","PI","sin_th","cos_th","pl","a00","a01","a10","a11","x0","y0","sfactor_sq","sfactor","xc","yc","th0","atan2","th_arc","th2","th3","th1","th_half","x3","y3","SVGPath","cmd","_apply","curArg","foundDecimal","params","includes","number$1","KAPPA","VectorMixin","initVector","_ctmStack","lineWidth","_CAP_STYLES","BUTT","ROUND","SQUARE","lineCap","_JOIN_STYLES","MITER","BEVEL","lineJoin","miterLimit","dash","originalLength","valid","undash","cpx","cpy","rect","roundedRect","ellipse","xe","ye","xm","ym","circle","radius","arc","startAngle","endAngle","anticlockwise","TWO_PI","HALF_PI","deltaAng","numSegs","segAng","handleLen","curAng","deltaCx","deltaCy","ax","ay","segIdx","polygon","_points","_path","_windingRule","fillAndStroke","isFillRule","clip","rad","origin","_options$origin","xFactor","yFactor","_options$origin2","WIN_ANSI_MAP","402","8211","8212","8216","8217","8220","8221","8222","8224","8225","8226","8230","8364","8240","8249","8250","710","8482","338","339","732","353","381","382","AFMFont","contents","attributes","glyphWidths","boundingBoxes","kernPairs","charWidths","char","section","line","characterToGlyph","widthOfGlyph","getKernPair","PDFFont","includeGap","gap","STANDARD_FONTS","Courier","Courier-Bold","Courier-Oblique","Courier-BoldOblique","Helvetica","Helvetica-Bold","Helvetica-Oblique","Helvetica-BoldOblique","Times-Roman","Times-Bold","Times-Italic","Times-BoldItalic","ZapfDingbats","StandardFont","_PDFFont","_this$font","BaseFont","encoded","encodeText","advancesForGlyphs","toHex","EmbeddedFont","subset","fontLayoutCache","layoutCache","layoutRun","cached","onlyWidth","needle","layoutCached","_this$layout","isCFF","fontFile","familyClass","italic","Flags","FontBBox","ItalicAngle","Ascent","Descent","CapHeight","XHeight","StemV","FontFile3","FontFile2","descendantFont","CIDSystemInfo","Registry","Ordering","Supplement","FontDescriptor","DescendantFonts","ToUnicode","toUnicodeCmap","PDFFontFactory","family","isStandardFont","FontsMixin","initFonts","defaultFont","_fontFamilies","_fontCount","_fontSize","_registeredFonts","cacheKey","_this$_registeredFont","fontSize","currentLineHeight","lineHeight","registerFont","LineWrapper","_EventEmitter","indent","characterSpacing","wordSpacing","columns","columnGap","spaceLeft","startX","startY","column","ellipsis","continuedX","once","continued","align","lastLine","paragraphGap","widthOfString","bk","breaker","wordWidths","shouldContinue","wordWidth","lbk","fbk","mightGrow","mustShrink","nextY","nextSection","textWidth","wc","lc","emitLine","wordCount","emit","eachWord","lh","_this$document","addPage","number$2","TextMixin","initText","_line","_lineGap","moveDown","lines","moveUp","_text","lineCallback","_initOptions","_wrapper","_textOptions","_text2","heightOfString","list","_list","listType","unit","midLine","bulletRadius","textIndent","itemIndent","bulletIndent","level","levels","numbers","flatten","letter","times","label","_fragment","lineBreak","spaceWidth","baseline","skew","renderedWidth","link","goTo","destination","addNamedDestination","underline","strike","lineY","oblique","_this$_font$encode2","encodedWord","positionsWord","_this$_font$encode4","hadOffset","addSegment","MARKERS","COLOR_SPACE_MAP","JPEG","marker","channels","BitsPerComponent","Width","Height","PNGImage","Predictor","Colors","Columns","loadIndexedAlphaChannel","splitAlphaChannel","alphaChannel","sMask","Decode","colorCount","pixelCount","skipByteCount","colorIndex","PDFImage","ImagesMixin","initImages","_imageRegistry","_imageCount","bp","bw","ip","left1","openImage","xobjects","wp","hp","fit","_options$fit","cover","_options$cover","valign","AnnotationsMixin","annotate","Rect","_convertRect","Border","Dest","annotations","note","Name","url","pages","Kids","URI","_markup","_this$_convertRect","_this$_convertRect2","QuadPoints","highlight","lineAnnotation","rectAnnotation","ellipseAnnotation","textAnnotation","DA","_this$_ctm","PDFOutline","title","expanded","outlineData","children","Count","First","Last","Prev","Next","endOutline","OutlineMixin","initOutline","outline","Outlines","PageMode","PDFDocument","_stream$Readable","_pageBuffer","_pageBufferStart","_offsets","_waiting","_ended","Names","Dests","Producer","Creator","generateFileID","autoFirstPage","bufferPages","flushPages","_finalize","warn","pipe","createWriteStream","xRefOffset","trailer","Size","Root","Info","Encrypt","mixin"],"mappings":"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KACAC,KAAA,KAAAC,MAAA,QAAAC,KAAA,KAAAC,KAAA,KACAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,MAAA,QACAC,MAAA,QAAAC,MAAA,QAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,KAAAC,MAAA,QAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,QACAC,MAAA,QAAAC,MAAA,QAAAC,KAAA,MAAAC,KAAA,QACAC,MAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,QACAC,MAAA,QAAAC,KAAA,KAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,QAAAC,MAAA,QAAAC,KAAA,QAAAC,MAAA,QACAC,KAAA,MAAAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,QACAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,KAAAC,MAAA,QACAC,MAAA,QAAAC,KAAA,MAAAC,KAAA,KAAAC,KAAA,QACAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,KAAAC,MAAA,QACAC,MAAA,QAAAC,KAAA,QAAAC,KAAA,MAAAC,KAAA,QACAC,KAAA,MAAAC,KAAA,QAAAC,KAAA,KAAAC,MAAA,QACAC,MAAA,QAAAC,KAAA,KAAAC,KAAA,MAAAC,MAAA,QACAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,KAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,KACAC,KAAA,KAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,KACAC,KAAA,UAAAC,KAAA,KAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,KAAAC,MAAA,QACAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,QACAC,KAAA,KAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,QACAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,KAAAC,KAAA,KACAC,KAAA,KAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,MACAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,KAAA,KACAC,KAAA,UAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,MACAC,KAAA,K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ACAC,MAAA,UACAC,MAAA,SACAC,MAAA,UACAC,MAAA,UACAC,MAAA,SACAC,MAAA,OACAvkG,MAAA,OACAwkG,MAAA,IACAC,MAAA,UACAC,MAAA,UACAC,MAAA,SACAC,MAAA,UACAC,MAAA,UACAC,MAAA,SACAjF,MAAA,UACAkF,OAAA,UACAC,OAAA,SACAC,OAAA,UACAC,OAAA,OACAC,OAAA,UACAC,OAAA,EACAC,OAAA,SACAC,MAAA,UACAC,MAAA,SACAC,MAAA,SACAC,MAAA,UACAC,MAAA,UACAC,MAAA,SACAC,MAAA,IACAC,MAAA,UACAC,OAAA,OACAC,OAAA,UACAC,OAAA,EACAC,OAAA,UACAC,OAAA,SACAC,OAAA,OACAC,OAAA,UACAC,OAAA,WAEA,CACA38H,EAAA,UACA48H,IAAA,KACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,KAAA,QACAC,KAAA,QACAC,KAAA,UACApD,KAAA,EACAqD,KAAA,UACAC,KAAA,QACAC,KAAA,EACAC,KAAA,UACAC,KAAA,QACAC,KAAA,KACAC,KAAA,UACAt1H,IAAA,UACAu1H,IAAA,UACAC,IAAA,EACAC,IAAA,QACAtnH,KAAA,QACAunH,KAAA,UACAC,KAAA,UACAC,KAAA,KACAC,KAAA,QACAC,KAAA,KACAC,KAAA,UACAC,KAAA,UACAC,KAAA,EACAC,KAAA,UACAC,KAAA,QACAC,KAAA,UACAvF,KAAA,UACAwF,KAAA,UACAC,KAAA,UACAC,KAAA,KACAC,KAAA,QACAC,KAAA,UACAC,KAAA,UACAC,KAAA,QACA/E,KAAA,QACAgF,KAAA,EACAC,KAAA,EACAC,KAAA,UACAC,KAAA,KACAC,KAAA,UACAC,KAAA,UACAC,KAAA,QACAC,KAAA,EACAC,KAAA,QACAC,KAAA,QACAC,KAAA,UACAC,KAAA,UACAC,KAAA,KACAC,KAAA,UACAC,KAAA,UACAC,KAAA,UACAC,KAAA,UACAC,KAAA,KACAC,KAAA,QACAC,KAAA,QACAC,KAAA,EACAC,KAAA,UACAC,KAAA,WAEA,CACArgI,EAAA,QACAiK,GAAA,SACA3C,GAAA,KACAkD,G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CA,iDACA,oDACA,oDACA,iDACA,mDACA,gDACA,mDACA,mDACA,mDACA,4CACA,mDACA,iDACA,gDACA,iDACA,iDACA,kDACA,gDACA,6CACA,+CACA,iDACA,kDACA,+CACA,iDACA,6CACA,kDACA,8CACA,mDACA,mDACA,kDACA,oDACA,iDACA,iDACA,+CACA,+CACA,mDACA,mDACA,iDACA,gDACA,kDACA,iDACA,mDACA,iDACA,6CACA,mDACA,mDACA,kDACA,+CACA,mDACA,mDACA,kDACA,+CACA,mDACA,+CACA,8CACA,kDACA,iDACA,mDACA,gDACA,iDACA,8CACA,kDACA,gDACA,kDACA,gDACA,gDACA,gDACA,kDACA,kDACA,mDACA,kDACA,+CACA,+CACA,iDACA,iDACA,+CACA,8CACA,kDACA,4CACA,4CACA,+CACA,6CACA,+CACA,iDACA,mDACA,mDACA,6CACA,iDACA,gDACA,iDACA,iDACA,8CACA,gDACA,kDACA,gDACA,kDACA,+CACA,kDACA,gDACA,gDACA,iDACA,gDACA,8CACA,iDACA,gDACA,gDACA,gDACA,yCACA,iDACA,+CACA,8CACA,4CACA,gDACA,+CACA,+CACA,+CACA,iDACA,mDACA,oDACA,gDACA,iDACA,+CACA,+CACA,gDACA,oDACA,gDACA,wCACA,iDACA,0CACA,+CACA,8CACA,6CACA,0CACA,6CACA,+CACA,8CACA,iDACA,8CACA,0CACA,iDACA,2CACA,2CACA,4CACA,mDACA,iDACA,gDACA,mDACA,4CACA,+CACA,0CACA,8CACA,6CACA,4CACA,6CACA,oDACA,iDACA,8CACA,gDACA,mDACA,4CACA,kDACA,kDACA,iDACA,6CACA,8CACA,mDACA,gDACA,8CACA,0CACA,+CACA,iDACA,iDACA,6CACA,8CACA,0CACA,2CACA,iDACA,mDACA,6CACA,0CACA,2CACA,6CACA,gDACA,0CACA,iDACA,4CACA,0CACA,4CACA,wCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,oDACA,iDACA,+CACA,gDACA,mDACA,iDACA,mDACA,iDACA,kDACA,8CACA,iDACA,mDACA,iDACA,kDACA,gDACA,iDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,mDACA,iDACA,iDACA,kDACA,mDACA,mDACA,gDACA,oDACA,iDACA,kDACA,mDACA,oDACA,kDACA,oDACA,kDACA,mDACA,kDACA,gDACA,kDACA,kDACA,kDACA,kDACA,kDACA,oDACA,+CACA,kDACA,kDACA,iDACA,mDACA,kDACA,mDACA,oDACA,mDACA,oDACA,kDACA,oDACA,gDACA,oDACA,kDACA,mDACA,kDACA,mDACA,mDACA,+CACA,oDACA,kDACA,oDACA,kDACA,mDACA,mDACA,kDACA,mDACA,kDACA,iDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,kDACA,gDACA,iDACA,mDACA,kDACA,mDACA,gDACA,mDACA,iDACA,iDACA,iDACA,kDACA,mDACA,kDACA,gDACA,kDACA,iDACA,mDACA,iDACA,oDACA,gDACA,kDACA,kDACA,kDACA,mDACA,gDACA,mDACA,mDACA,kDACA,gDACA,kDACA,kDACA,kDACA,iDACA,mDACA,mDACA,kDACA,iDACA,kDACA,kDACA,kDACA,iDACA,iDACA,iDACA,mDACA,iDACA,iDACA,mDACA,kDACA,gDACA,iDACA,+CACA,+CACA,oDACA,oDACA,mDACA,mDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,mDACA,kDACA,mDACA,kDACA,gDACA,6CACA,gDACA,gDACA,kDACA,iDACA,kDACA,+CACA,kDACA,kDACA,gDACA,8CACA,yCACA,iDACA,gDACA,+CACA,kDACA,+CACA,mDACA,8CACA,iDACA,kDACA,+CACA,iDACA,4CACA,kDACA,iDACA,iDACA,mDACA,iDACA,mDACA,+CACA,6CACA,+CACA,kDACA,iDACA,iDACA,mDACA,gDACA,kDACA,mDACA,kDACA,mDACA,mDACA,kDACA,2CACA,0CACA,iDACA,iDACA,8CACA,gDACA,iDACA,iDACA,4CACA,gDACA,+CACA,kDACA,kDACA,kDACA,iDACA,8CACA,kDACA,iDACA,iDACA,iDACA,8CACA,kDACA,oDACA,gDACA,6CACA,mDACA,6CACA,iDACA,iDACA,gDACA,8CACA,+CACA,+CACA,gDACA,mDACA,kDACA,mDACA,4CACA,gDACA,+CACA,6CACA,+CACA,4CACA,gDACA,kDACA,gDACA,6CACA,+CACA,6CACA,6CACA,oDACA,8CACA,+CACA,+CACA,iDACA,+CACA,2CACA,gDACA,+CACA,+CACA,iDACA,iDACA,4CACA,iDACA,gDACA,oDACA,kDACA,6CACA,mDACA,mDACA,8CACA,mDACA,gDACA,6CACA,6CACA,gDACA,iDACA,kDACA,2CACA,iDACA,2CACA,6CACA,8CACA,+CACA,+CACA,6CACA,kDACA,6CACA,gDACA,iDACA,8CACA,6CACA,8CACA,iDACA,kDACA,8CACA,iDACA,8CACA,4CACA,6CACA,+CACA,8CACA,iDACA,8CACA,gDACA,+CACA,0CACA,iDACA,iDACA,6CACA,yCACA,iDACA,gDACA,8CACA,8CACA,+CACA,4CACA,oDACA,gDACA,gDACA,oDACA,mDACA,oDACA,mDACA,kDACA,mDACA,iDACA,oDACA,kDACA,gDACA,kDACA,kDACA,iDACA,kDACA,kDACA,mDACA,iDACA,oDACA,oDACA,mDACA,kDACA,kDACA,mDACA,kDACA,mDACA,kDACA,+CACA,mDACA,kDACA,gDACA,iDACA,kDACA,oDACA,kDACA,kDACA,iDACA,kDACA,iDACA,mDACA,mDACA,+CACA,mDACA,gDACA,gDACA,iDACA,kDACA,iDACA,iDACA,gDACA,kDACA,kDACA,+CACA,oDACA,gDACA,mDACA,gDACA,kDACA,kDACA,kDACA,gDACA,iDACA,kDACA,mDACA,iDACA,gDACA,kDACA,kDACA,mDACA,iDACA,kDACA,gDACA,6CACA,iDACA,kDACA,gDACA,iDACA,kDACA,oDACA,gDACA,kDACA,gDACA,kDACA,+CACA,+CACA,iDACA,iDACA,+CACA,mDACA,mDACA,gDACA,gDACA,mDACA,iDACA,iDACA,iDACA,gDACA,kDACA,iDACA,mDACA,gDACA,iDACA,mDACA,mDACA,gDACA,mDACA,iDACA,oDACA,iDACA,iDACA,kDACA,mDACA,kDACA,oDACA,kDACA,mDACA,kDACA,iDACA,mDACA,mDACA,mDACA,kDACA,kDACA,oDACA,kDACA,kDACA,kDACA,oDACA,oDACA,mDACA,oDACA,mDACA,kDACA,kDACA,oDACA,mDACA,oDACA,kDACA,mDACA,mDACA,iDACA,iDACA,kDACA,oDACA,kDACA,mDACA,mDACA,kDACA,kDACA,kDACA,kDACA,kDACA,mDACA,kDACA,mDACA,iDACA,iDACA,iDACA,mDACA,kDACA,oDACA,iDACA,iDACA,kDACA,kDACA,oDACA,mDACA,kDACA,mDACA,mDACA,mDACA,iDACA,gDACA,kDACA,iDACA,mDACA,mDACA,mDACA,iDACA,mDACA,oDACA,iDACA,iDACA,mDACA,kDACA,kDACA,iDACA,oDACA,iDACA,iDACA,kDACA,oDACA,mDACA,iDACA,oDACA,oDACA,kDACA,mDACA,kDACA,kDACA,mDACA,kDACA,iDACA,kDACA,kDACA,mDACA,kDACA,kDACA,iDACA,kDACA,iDACA,gDACA,mDACA,mDACA,kDACA,iDACA,gDACA,gDACA,kDACA,gDACA,iDACA,iDACA,mDACA,mDACA,iDACA,oDACA,8CACA,kDACA,mDACA,iDACA,mDACA,kDACA,gDACA,iDACA,gDACA,+CACA,kDACA,4CACA,kDACA,6CACA,kDACA,iDACA,kDACA,kDACA,kDACA,8CACA,kDACA,+CACA,mDACA,iDACA,kDACA,oDACA,+CACA,mDACA,+CACA,iDACA,kDACA,+CACA,+CACA,iDACA,kDACA,+CACA,iDACA,gDACA,6CACA,kDACA,4CACA,iDACA,mDACA,oDACA,kDACA,gDACA,iDACA,mDACA,gDACA,iDACA,gDACA,gDACA,mDACA,gDACA,gDACA,kDACA,iDACA,gDACA,mDACA,kDACA,iDACA,mDACA,gDACA,8CACA,mDACA,mDACA,6CACA,8CACA,mDACA,kDACA,iDACA,iDACA,mDACA,gDACA,iDACA,iDACA,iDACA,gDACA,gDACA,gDACA,gDACA,gDACA,0CACA,mDACA,8CACA,iDACA,iDACA,gDACA,kDACA,iDACA,gDACA,oDACA,kDACA,mDACA,kDACA,iDACA,6CACA,iDACA,kDACA,kDACA,4CACA,gDACA,gDACA,kDACA,kDACA,kDACA,gDACA,gDACA,4CACA,oDACA,iDACA,oDACA,kDACA,4CACA,iDACA,iDACA,6CACA,+CACA,mDACA,kDACA,+CACA,gDACA,kDACA,+CACA,mDACA,iDACA,gDACA,mDACA,oDACA,kDACA,iDACA,gDACA,iDACA,iDACA,4CACA,gDACA,iDACA,+CACA,kDACA,gDACA,kDACA,+CACA,+CACA,iDACA,6CACA,8CACA,kDACA,gDACA,+CACA,+CACA,kDACA,kDACA,0CACA,iDACA,iDACA,iDACA,+CACA,oDACA,kDACA,6CACA,yCACA,2CACA,iDACA,kDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,iDACA,gDACA,mDACA,iDACA,oDACA,kDACA,mDACA,iDACA,iDACA,mDACA,oDACA,mDACA,mDACA,iDACA,iDACA,kDACA,oDACA,iDACA,kDACA,+CACA,kDACA,gDACA,kDACA,iDACA,gDACA,iDACA,iDACA,iDACA,iDACA,oDACA,mDACA,kDACA,kDACA,iDACA,iDACA,iDACA,iDACA,oDACA,iDACA,mDACA,mDACA,kDACA,mDACA,kDACA,oDACA,mDACA,iDACA,kDACA,kDACA,gDACA,kDACA,mDACA,mDACA,mDACA,kDACA,kDACA,kDACA,mDACA,iDACA,kDACA,gDACA,iDACA,mDACA,kDACA,mDACA,kDACA,kDACA,kDACA,+CACA,iDACA,iDACA,mDACA,kDACA,kDACA,kDACA,iDACA,kDACA,kDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,oDACA,kDACA,iDACA,iDACA,+CACA,oDACA,oDACA,mDACA,iDACA,iDACA,oDACA,iDACA,kDACA,gDACA,kDACA,mDACA,mDACA,oDACA,oDACA,oDACA,kDACA,kDACA,mDACA,iDACA,kDACA,iDACA,iDACA,iDACA,mDACA,kDACA,kDACA,iDACA,oDACA,kDACA,kDACA,mDACA,kDACA,kDACA,mDACA,mDACA,kDACA,mDACA,iDACA,kDACA,iDACA,mDACA,+CACA,mDACA,iDACA,gDACA,kDACA,iDACA,kDACA,oDACA,kDACA,mDACA,kDACA,mDACA,mDACA,mDACA,mDACA,oDACA,mDACA,mDACA,kDACA,kDACA,gDACA,iDACA,iDACA,oDACA,mDACA,iDACA,kDACA,mDACA,mDACA,mDACA,gDACA,+CACA,iDACA,kDACA,mDACA,mDACA,kDACA,+CACA,iDACA,kDACA,iDACA,gDACA,gDACA,iDACA,oDACA,iDACA,mDACA,gDACA,iDACA,8CACA,+CACA,iDACA,+CACA,oDACA,kDACA,kDACA,+CACA,kDACA,iDACA,kDACA,kDACA,mDACA,iDACA,iDACA,8CACA,mDACA,iDACA,kDACA,mDACA,gDACA,kDACA,kDACA,iDACA,6CACA,iDACA,mDACA,kDACA,mDACA,gDACA,kDACA,mDACA,+CACA,iDACA,mDACA,oDACA,+CACA,gDACA,+CACA,mDACA,kDACA,kDACA,6CACA,mDACA,iDACA,gDACA,8CACA,iDACA,+CACA,iDACA,8CACA,gDACA,oDACA,+CACA,kDACA,mDACA,gDACA,+CACA,iDACA,+CACA,oDACA,kDACA,iDACA,kDACA,iDACA,kDACA,mDACA,kDACA,iDACA,oDACA,mDACA,oDACA,kDACA,iDACA,mDACA,kDACA,mDACA,gDACA,+CACA,iDACA,iDACA,gDACA,mDACA,gDACA,iDACA,gDACA,mDACA,gDACA,kDACA,mDACA,mDACA,mDACA,mDACA,mDACA,gDACA,kDACA,oDACA,oDACA,mDACA,kDACA,kDACA,gDACA,kDACA,iDACA,gDACA,iDACA,gDACA,gDACA,kDACA,mDACA,gDACA,mDACA,gDACA,iDACA,gDACA,8CACA,+CACA,kDACA,kDACA,mDACA,kDACA,mDACA,kDACA,mDACA,kDACA,iDACA,kDACA,gDACA,iDACA,iDACA,iDACA,mDACA,oDACA,iDACA,gDACA,mDACA,gDACA,kDACA,kDACA,mDACA,kDACA,mDACA,kDACA,+CACA,oDACA,oDACA,mDACA,kDACA,mDACA,kDACA,kDACA,8CACA,iDACA,gDACA,kDACA,oDACA,mDACA,gDACA,kDACA,gDACA,iDACA,+CACA,kDACA,+CACA,6CACA,mDACA,8CACA,2CACA,kDACA,mDACA,mDACA,iDACA,kDACA,mDACA,iDACA,6CACA,iDACA,gDACA,kDACA,mDACA,kDACA,6CACA,oDACA,gDACA,iDACA,gDACA,6CACA,iDACA,gDACA,0CACA,8CACA,kDACA,iDACA,iDACA,kDACA,iDACA,mDACA,gDACA,mDACA,kDACA,kDACA,gDACA,iDACA,gDACA,+CACA,kDACA,iDACA,gDACA,gDACA,kDACA,oDACA,iDACA,gDACA,gDACA,kDACA,gDACA,kDACA,iDACA,gDACA,gDACA,mDACA,kDACA,+CACA,iDACA,gDACA,+CACA,oDACA,iDACA,iDACA,iDACA,6CACA,iDACA,gDACA,gDACA,kDACA,iDACA,iDACA,mDACA,kDACA,iDACA,mDACA,mDACA,kDACA,iDACA,kDACA,mDACA,iDACA,iDACA,iDACA,8CACA,8CACA,gDACA,mDACA,kDACA,kDACA,iDACA,kDACA,mDACA,iDACA,mDACA,iDACA,iDACA,kDACA,mDACA,iDACA,4CACA,mDACA,gDACA,kDACA,iDACA,6CACA,iDACA,oDACA,iDACA,mDACA,+CACA,4CACA,mDACA,gDACA,+CACA,gDACA,kDACA,kDACA,+CACA,gDACA,mDACA,iDACA,iDACA,+CACA,oDACA,gDACA,iDACA,iDACA,+CACA,kDACA,gDACA,gDACA,kDACA,iDACA,gDACA,+CACA,gDACA,kDACA,gDACA,iDACA,kDACA,kDACA,iDACA,gDACA,+CACA,kDACA,iDACA,iDACA,kDACA,iDACA,gDACA,iDACA,iDACA,iDACA,gDACA,yCACA,+CACA,gDACA,kDACA,gDACA,kDACA,6CACA,4CACA,iDACA,gDACA,+CACA,mDACA,+CACA,8CACA,iDACA,kDACA,iDACA,mDACA,iDACA,iDACA,mDACA,kDACA,+CACA,gDACA,kDACA,kDACA,+CACA,6CACA,gDACA,kDACA,iDACA,mDACA,kDACA,mDACA,kDACA,kDACA,6CACA,iDACA,iDACA,mDACA,gDACA,iDACA,gDACA,+CACA,6CACA,+CACA,8CACA,4CACA,iDACA,kDACA,8CACA,0CACA,iDACA,iDACA,iDACA,mDACA,kDACA,mDACA,gDACA,kDACA,iDACA,iDACA,iDACA,kDACA,gDACA,+CACA,+CACA,mDACA,mDACA,gDACA,iDACA,iDACA,kDACA,6CACA,gDACA,kDACA,gDACA,kDACA,gDACA,+CACA,iDACA,mDACA,iDACA,mDACA,kDACA,kDACA,kDACA,kDACA,mDACA,gDACA,+CACA,gDACA,kDACA,iDACA,kDACA,iDACA,kDACA,kDACA,kDACA,iDACA,iDACA,iDACA,6CACA,mDACA,gDACA,iDACA,iDACA,8CACA,kDACA,iDACA,kDACA,gDACA,oDACA,kDACA,6CACA,mDACA,gDACA,oDACA,gDACA,iDACA,iDACA,mDACA,kDACA,kDACA,gDACA,gDACA,iDACA,mDACA,mDACA,8CACA,6CACA,gDACA,gDACA,kDACA,gDACA,gDACA,iDACA,kDACA,iDACA,kDACA,gDACA,kDACA,gDACA,kDACA,kDACA,kDACA,iDACA,0CACA,mDACA,iDACA,kDACA,iDACA,8CACA,iDACA,iDACA,kDACA,4CACA,gDACA,kDACA,8CACA,mDACA,iDACA,iDACA,mDACA,iDACA,oDACA,iDACA,gDACA,+CACA,8CACA,8CACA,8CACA,8CACA,mDACA,gDACA,8CACA,kDACA,kDACA,+CACA,+CACA,mDACA,8CACA,+CACA,gDACA,8CACA,gDACA,kDACA,gDACA,6CACA,gDACA,+CACA,8CACA,8CACA,iDACA,kDACA,kDACA,kDACA,iDACA,iDACA,iDACA,gDACA,kDACA,kDACA,iDACA,gDACA,iDACA,iDACA,kDACA,8CACA,2CACA,iDACA,iDACA,iDACA,iDACA,+CACA,gDACA,gDACA,iDACA,kDACA,gDACA,mDACA,iDACA,iDACA,+CACA,6CACA,gDACA,6CACA,mDACA,mDACA,kDACA,+CACA,mDACA,8CACA,iDACA,iDACA,+CACA,kDACA,mDACA,gDACA,iDACA,kDACA,gDACA,iDACA,gDACA,4CACA,kDACA,iDACA,gDACA,mDACA,+CACA,kDACA,kDACA,+CACA,+CACA,gDACA,+CACA,iDACA,iDACA,6CACA,gDACA,kDACA,+CACA,iDACA,gDACA,kDACA,kDACA,kDACA,gDACA,mDACA,mDACA,mDACA,kDACA,yCACA,kDACA,8CACA,gDACA,gDACA,iDACA,iDACA,iDACA,+CACA,iDACA,mDACA,8CACA,4CACA,iDACA,kDACA,+CACA,gDACA,oDACA,+CACA,+CACA,8CACA,gDACA,kDACA,gDACA,mDACA,kDACA,+CACA,iDACA,gDACA,6CACA,iDACA,gDACA,iDACA,mDACA,6CACA,iDACA,mDACA,+CACA,kDACA,8CACA,+CACA,gDACA,kDACA,iDACA,kDACA,iDACA,4CACA,kDACA,8CACA,iDACA,gDACA,+CACA,kDACA,mDACA,iDACA,kDACA,kDACA,gDACA,iDACA,iDACA,0CACA,gDACA,+CACA,gDACA,gDACA,+CACA,gDACA,iDACA,gDACA,gDACA,iDACA,gDACA,+CACA,6CACA,mDACA,gDACA,mDACA,6CACA,mDACA,iDACA,gDACA,iDACA,kDACA,8CACA,iDACA,iDACA,gDACA,iDACA,gDACA,gDACA,iDACA,gDACA,iDACA,gDACA,+CACA,iDACA,iDACA,mDACA,iDACA,gDACA,kDACA,mDACA,iDACA,+CACA,gDACA,+CACA,mDACA,+CACA,+CACA,kDACA,6CACA,2CACA,iDACA,gDACA,kDACA,8CACA,+CACA,iDACA,iDACA,mDACA,iDACA,iDACA,gDACA,iDACA,iDACA,iDACA,kDACA,6CACA,kDACA,mDACA,mDACA,gDACA,gDACA,+CACA,gDACA,iDACA,gDACA,0CACA,gDACA,8CACA,kDACA,mDACA,mDACA,iDACA,mDACA,mDACA,kDACA,2CACA,iDACA,6CACA,8CACA,gDACA,mDACA,+CACA,8CACA,iDACA,iDACA,kDACA,6CACA,6CACA,+CACA,iDACA,gDACA,kDACA,gDACA,kDACA,6CACA,kDACA,kDACA,+CACA,8CACA,gDACA,8CACA,oDACA,+CACA,kDACA,kDACA,+CACA,iDACA,gDACA,8CACA,iDACA,kDACA,kDACA,iDACA,+CACA,+CACA,+CACA,kDACA,iDACA,kDACA,oDACA,gDACA,iDACA,8CACA,gDACA,iDACA,iDACA,iDACA,gDACA,4CACA,+CACA,iDACA,gDACA,iDACA,iDACA,gDACA,iDACA,iDACA,iDACA,iDACA,mDACA,+CACA,iDACA,iDACA,gDACA,kDACA,gDACA,iDACA,iDACA,kDACA,mDACA,iDACA,+CACA,oDACA,iDACA,kDACA,mDACA,6CACA,mDACA,gDACA,kDACA,6CACA,iDACA,iDACA,kDACA,gDACA,mDACA,kDACA,kDACA,4CACA,iDACA,kDACA,iDACA,gDACA,gDACA,+CACA,gDACA,iDACA,mDACA,iDACA,4CACA,iDACA,kDACA,+CACA,+CACA,iDACA,kDACA,iDACA,mDACA,+CACA,+CACA,+CACA,gDACA,+CACA,iDACA,kDACA,kDACA,kDACA,mDACA,+CACA,6CACA,gDACA,gDACA,gDACA,iDACA,iDACA,iDACA,kDACA,+CACA,iDACA,iDACA,kDACA,kDACA,gDACA,gDACA,gDACA,mDACA,kDACA,8CACA,0CACA,8CACA,+CACA,0CACA,iDACA,kDACA,+CACA,kDACA,+CACA,kDACA,gDACA,mDACA,gDACA,gDACA,6CACA,gDACA,+CACA,8CACA,gDACA,iDACA,8CACA,kDACA,8CACA,+CACA,iDACA,gDACA,+CACA,+CACA,kDACA,iDACA,mDACA,kDACA,iDACA,gDACA,2CACA,2CACA,yCACA,+CACA,4CACA,kDACA,+CACA,gDACA,gDACA,gDACA,+CACA,gDACA,gDACA,kDACA,kDACA,+CACA,8CACA,mDACA,gDACA,6CACA,+CACA,kDACA,+CACA,yCACA,iDACA,gDACA,kDACA,4CACA,4CACA,6CACA,6CACA,8CACA,kDACA,kDACA,mDACA,gDACA,iDACA,kDACA,mDACA,iDACA,iDACA,mDACA,oDACA,gDACA,kDACA,gDACA,kDACA,kDACA,iDACA,kDACA,mDACA,kDACA,kDACA,iDACA,mDACA,mDACA,oDACA,iDACA,mDACA,gDACA,gDACA,mDACA,mDACA,oDACA,mDACA,+CACA,kDACA,iDACA,kDACA,mDACA,mDACA,kDACA,kDACA,kDACA,mDACA,iDACA,oDACA,+CACA,iDACA,+CACA,mDACA,kDACA,iDACA,mDACA,gDACA,iDACA,iDACA,mDACA,mDACA,mDACA,kDACA,kDACA,+CACA,iDACA,mDACA,mDACA,kDACA,iDACA,mDACA,mDACA,kDACA,iDACA,kDACA,kDACA,iDACA,iDACA,oDACA,oDACA,mDACA,kDACA,kDACA,iDACA,mDACA,iDACA,kDACA,kDACA,mDACA,iDACA,kDACA,kDACA,kDACA,mDACA,iDACA,mDACA,oDACA,gDACA,kDACA,mDACA,gDACA,iDACA,iDACA,kDACA,oDACA,mDACA,oDACA,gDACA,iDACA,kDACA,mDACA,iDACA,kDACA,mDACA,kDACA,iDACA,kDACA,+CACA,mDACA,iDACA,kDACA,kDACA,kDACA,8CACA,iDACA,iDACA,oDACA,mDACA,+CACA,8CACA,+CACA,mDACA,iDACA,oDACA,kDACA,oDACA,mDACA,+CACA,iDACA,+CACA,gDACA,kDACA,gDACA,mDACA,kDACA,kDACA,+CACA,mDACA,kDACA,mDACA,gDACA,gDACA,kDACA,8CACA,kDACA,kDACA,gDACA,iDACA,mDACA,kDACA,mDACA,mDACA,mDACA,iDACA,mDACA,kDACA,oDACA,kDACA,kDACA,mDACA,iDACA,iDACA,mDACA,iDACA,iDACA,oDACA,kDACA,kDACA,gDACA,+CACA,iDACA,kDACA,mDACA,gDACA,8CACA,mDACA,oDACA,mDACA,iDACA,iDACA,gDACA,gDACA,gDACA,iDACA,mDACA,+CACA,iDACA,iDACA,mDACA,kDACA,gDACA,iDACA,mDACA,gDACA,iDACA,kDACA,gDACA,kDACA,kDACA,iDACA,iDACA,6CACA,6CACA,oDACA,kDACA,kDACA,kDACA,iDACA,kDACA,6CACA,gDACA,kDACA,oDACA,gDACA,6CACA,8CACA,8CACA,+CACA,kDACA,iDACA,gDACA,+CACA,gDACA,gDACA,mDACA,gDACA,0CACA,mDACA,iDACA,+CACA,kDACA,+CACA,mDACA,+CACA,gDACA,gDACA,kDACA,iDACA,gDACA,kDACA,+CACA,+CACA,8CACA,+CACA,kDACA,gDACA,gDACA,+CACA,8CACA,mDACA,2CACA,gDACA,iDACA,4CACA,iDACA,6CACA,gDACA,kDACA,iDACA,kDACA,iDACA,iDACA,iDACA,+CACA,oDACA,iDACA,kDACA,iDACA,kDACA,gDACA,kDACA,+CACA,kDACA,8CACA,kDACA,iDACA,gDACA,gDACA,iDACA,+CACA,+CACA,kDACA,8CACA,kDACA,gDACA,kDACA,gDACA,mDACA,kDACA,8CACA,mDACA,mDACA,8CACA,+CACA,6CACA,+CACA,kDACA,oDACA,oDACA,8CACA,kDACA,kDACA,oDACA,mDACA,mDACA,8CACA,mDACA,gDACA,kDACA,oDACA,mDACA,gDACA,mDACA,+CACA,iDACA,8CACA,kDACA,+CACA,gDACA,gDACA,iDACA,kDACA,8CACA,+CACA,iDACA,kDACA,kDACA,8CACA,iDACA,gDACA,gDACA,oDACA,kDACA,oDACA,iDACA,iDACA,4CACA,gDACA,iDACA,+CACA,mDACA,+CACA,iDACA,kDACA,kDACA,+CACA,mDACA,kDACA,gDACA,8CACA,mDACA,8CACA,kDACA,iDACA,kDACA,gDACA,iDACA,6CACA,oDACA,gDACA,iDACA,gDACA,8CACA,kDACA,gDACA,8CACA,mDACA,oDACA,+CACA,gDACA,mDACA,kDACA,8CACA,iDACA,6CACA,gDACA,4CACA,+CACA,kDACA,iDACA,+CACA,mDACA,mDACA,gDACA,kDACA,4CACA,6CACA,6CACA,gDACA,gDACA,iDACA,gDACA,gDACA,6CACA,iDACA,iDACA,mDACA,gDACA,+CACA,kDACA,6CACA,8CACA,iDACA,gDACA,iDACA,mDACA,iDACA,iDACA,kDACA,kDACA,gDACA,kDACA,iDACA,oDACA,gDACA,8CACA,gDACA,+CACA,iDACA,8CACA,iDACA,kDACA,+CACA,iDACA,mDACA,gDACA,iDACA,kDACA,mDACA,8CACA,gDACA,iDACA,kDACA,kDACA,+CACA,mDACA,iDACA,8CACA,+CACA,mDACA,mDACA,gDACA,gDACA,iDACA,+CACA,8CACA,+CACA,oDACA,6CACA,mDACA,+CACA,kDACA,gDACA,4CACA,gDACA,+CACA,kDACA,+CACA,4CACA,iDACA,+CACA,kDACA,kDACA,oDACA,kDACA,kDACA,kDACA,iDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,oDACA,kDACA,kDACA,mDACA,oDACA,mDACA,kDACA,kDACA,iDACA,oDACA,oDACA,gDACA,mDACA,kDACA,kDACA,gDACA,mDACA,iDACA,iDACA,+CACA,iDACA,kDACA,mDACA,kDACA,iDACA,mDACA,mDACA,gDACA,8CACA,iDACA,+CACA,kDACA,iDACA,iDACA,kDACA,mDACA,kDACA,iDACA,iDACA,kDACA,iDACA,mDACA,iDACA,gDACA,kDACA,oDACA,gDACA,iDACA,gDACA,mDACA,iDACA,gDACA,iDACA,mDACA,iDACA,iDACA,iDACA,mDACA,iDACA,gDACA,mDACA,kDACA,iDACA,iDACA,8CACA,iDACA,iDACA,iDACA,mDACA,iDACA,oDACA,gDACA,kDACA,+CACA,gDACA,iDACA,mDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,kDACA,gDACA,kDACA,kDACA,oDACA,gDACA,mDACA,kDACA,oDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,wCACA,0BACA,0BACA,0BACA,kCACA,qCACA,uCACA,wCACA,oCACA,8BACA,0BACA,kCACA,0BACA,0BACA,gDACA,oDACA,mDACA,iDACA,kDACA,gDACA,oDACA,mDACA,kDACA,gDACA,gDACA,6CACA,gDACA,6CACA,kDACA,oDACA,mDACA,iDACA,mDACA,mDACA,iDACA,kDACA,kDACA,iDACA,iDACA,kDACA,kDACA,iDACA,mDACA,+CACA,kDACA,kDACA,iDACA,kDACA,iDACA,kDACA,kDACA,mDACA,mDACA,oDACA,8CACA,mDACA,kDACA,iDACA,mDACA,mDACA,mDACA,gDACA,gDACA,+CACA,kDACA,gDACA,mDACA,kDACA,kDACA,oDACA,iDACA,iDACA,iDACA,mDACA,kDACA,kDACA,+CACA,mDACA,iDACA,kDACA,kDACA,kDACA,+CACA,mDACA,iDACA,kDACA,kDACA,iDACA,gDACA,iDACA,iDACA,mDACA,kDACA,gDACA,mDACA,kDACA,mDACA,mDACA,+CACA,iDACA,kDACA,gDACA,iDACA,8CACA,gDACA,gDACA,+CACA,iDACA,iDACA,mDACA,kDACA,iDACA,kDACA,gDACA,gDACA,mDACA,kDACA,kDACA,iDACA,+CACA,mDACA,iDACA,iDACA,gDACA,kDACA,mDACA,kDACA,iDACA,oDACA,iDACA,mDACA,kDACA,mDACA,iDACA,kDACA,iDACA,iDACA,kDACA,oDACA,kDACA,kDACA,gDACA,mDACA,mDACA,mDACA,+CACA,gDACA,kDACA,iDACA,iDACA,oDACA,mDACA,kDACA,gDACA,+CACA,+CACA,iDACA,mDACA,8CACA,iDACA,+CACA,+CACA,kDACA,iDACA,iDACA,mDACA,mDACA,kDACA,mDACA,iDACA,kDACA,iDACA,iDACA,iDACA,kDACA,oDACA,mDACA,kDACA,kDACA,oDACA,mDACA,kDACA,mDACA,+CACA,iDACA,8CACA,kDACA,iDACA,mDACA,kDACA,gDACA,+CACA,gDACA,kDACA,8CACA,kDACA,iDACA,mDACA,8CACA,mDACA,gDACA,kDACA,mDACA,mDACA,kDACA,kDACA,mDACA,+CACA,+CACA,gDACA,kDACA,kDACA,kDACA,kDACA,iDACA,mDACA,0CACA,iDACA,gDACA,gDACA,mDACA,+CACA,mDACA,+CACA,iDACA,kDACA,kDACA,kDACA,iDACA,gDACA,mDACA,iDACA,gDACA,iDACA,mDACA,kDACA,+CACA,+CACA,iDACA,kDACA,iDACA,kDACA,kDACA,mDACA,kDACA,kDACA,mDACA,iDACA,gDACA,kDACA,kDACA,iDACA,kDACA,iDACA,8CACA,mDACA,gDACA,kDACA,kDACA,iDACA,gDACA,mDACA,8CACA,gDACA,mDACA,iDACA,gDACA,gDACA,kDACA,gDACA,gDACA,iDACA,gDACA,iDACA,kDACA,gDACA,kDACA,8CACA,kDACA,mDACA,iDACA,iDACA,iDACA,kDACA,kDACA,mDACA,iDACA,mDACA,kDACA,iDACA,+CACA,gDACA,iDACA,kDACA,gDACA,kDACA,kDACA,iDACA,kDACA,mDACA,kDACA,gDACA,mDACA,iDACA,mDACA,iDACA,kDACA,iDACA,mDACA,iDACA,4CACA,gDACA,kDACA,iDACA,kDACA,+CACA,kDACA,gDACA,mDACA,kDACA,wCACA,0CACA,gDACA,iDACA,6CACA,kDACA,iDACA,kDACA,kDACA,iDACA,mDACA,mDACA,iDACA,kDACA,8CACA,mDACA,gDACA,kDACA,mDACA,6CACA,iDACA,iDACA,kDACA,gDACA,kDACA,kDACA,mDACA,iDACA,mDACA,kDACA,iDACA,iDACA,mDACA,gDACA,kDACA,iDACA,mDACA,kDACA,gDACA,6CACA,gDACA,iDACA,mDACA,gDACA,mDACA,+CACA,gDACA,gDACA,iDACA,iDACA,+CACA,iDACA,kDACA,kDACA,+CACA,gDACA,iDACA,kDACA,iDACA,kDACA,kDACA,gDACA,mDACA,mDACA,kDACA,kDACA,kDACA,kDACA,mDACA,kDACA,gDACA,gDACA,kDACA,mDACA,mDACA,iDACA,kDACA,mDACA,+CACA,gDACA,kDACA,kDACA,iDACA,+CACA,iDACA,8CACA,oDACA,mDACA,gDACA,+CACA,iDACA,gDACA,4CACA,+CACA,gDACA,kDACA,+CACA,gDACA,gDACA,iDACA,kDACA,kDACA,iDACA,kDACA,kDACA,8CACA,iDACA,iDACA,mDACA,iDACA,iDACA,mDACA,iDACA,iDACA,8CACA,+CACA,kDACA,kDACA,gDACA,+CACA,mDACA,+CACA,mDACA,kDACA,4CACA,kDACA,gDACA,kDACA,oDACA,mDACA,gDACA,iDACA,mDACA,iDACA,6CACA,kDACA,kDACA,+CACA,gDACA,gDACA,8CACA,kDACA,gDACA,gDACA,gDACA,kDACA,iDACA,gDACA,kDACA,mDACA,+CACA,iDACA,iDACA,gDACA,+CACA,gDACA,gDACA,kDACA,kDACA,gDACA,gDACA,kDACA,iDACA,gDACA,+CACA,mDACA,+CACA,iDACA,iDACA,kDACA,kDACA,iDACA,+CACA,kDACA,kDACA,oDACA,kDACA,kDACA,8CACA,+CACA,kDACA,iDACA,gDACA,+CACA,2CACA,iDACA,+CACA,kDACA,mDACA,gDACA,+CACA,8CACA,mDACA,8CACA,gDACA,kDACA,gDACA,kDACA,+CACA,kDACA,kDACA,kDACA,kDACA,8CACA,kDACA,iDACA,mDACA,iDACA,gDACA,6CACA,iDACA,gDACA,mDACA,iDACA,gDACA,iDACA,oDACA,kDACA,kDACA,kDACA,+CACA,iDACA,gDACA,kDACA,iDACA,iDACA,+CACA,kDACA,+CACA,+CACA,kDACA,iDACA,+CACA,gDACA,gDACA,mDACA,8CACA,+CACA,kDACA,mDACA,+CACA,6CACA,iDACA,gDACA,kDACA,gDACA,iDACA,6CACA,gDACA,iDACA,iDACA,oDACA,mDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,iDACA,8CACA,iDACA,mDACA,kDACA,kDACA,mDACA,iDACA,kDACA,kDACA,mDACA,oDACA,gDACA,iDACA,mDACA,kDACA,kDACA,kDACA,iDACA,kDACA,gDACA,gDACA,iDACA,mDACA,iDACA,+CACA,iDACA,mDACA,oDACA,iDACA,oDACA,kDACA,iDACA,kDACA,kDACA,+CACA,iDACA,iDACA,kDACA,kDACA,gDACA,kDACA,kDACA,kDACA,iDACA,gDACA,mDACA,iDACA,gDACA,iDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,iDACA,gDACA,+CACA,oDACA,gDACA,gDACA,8CACA,+CACA,6CACA,8CACA,+CACA,mDACA,mDACA,kDACA,iDACA,kDACA,iDACA,kDACA,kDACA,8CACA,+CACA,iDACA,kDACA,iDACA,6CACA,kDACA,mDACA,kDACA,kDACA,8CACA,mDACA,gDACA,kDACA,iDACA,+CACA,gDACA,mDACA,oDACA,oDACA,iDACA,iDACA,kDACA,8CACA,+CACA,mDACA,kDACA,iDACA,iDACA,oDACA,iDACA,iDACA,mDACA,+CACA,gDACA,kDACA,kDACA,kDACA,mDACA,kDACA,mDACA,mDACA,kDACA,+CACA,mDACA,oDACA,iDACA,kDACA,kDACA,6CACA,iDACA,8CACA,8CACA,kDACA,iDACA,oDACA,iDACA,kDACA,mDACA,mDACA,iDACA,gDACA,mDACA,6CACA,gDACA,iDACA,kDACA,iDACA,oDACA,kDACA,mDACA,kDACA,mDACA,8CACA,mDACA,iDACA,kDACA,oDACA,mDACA,oDACA,iDACA,gDACA,gDACA,8CACA,mDACA,mDACA,mDACA,gDACA,mDACA,mDACA,oDACA,gDACA,+CACA,gDACA,gDACA,kDACA,gDACA,mDACA,iDACA,mDACA,kDACA,+CACA,iDACA,iDACA,mDACA,mDACA,mDACA,iDACA,8CACA,6CACA,oDACA,kDACA,gDACA,kDACA,gDACA,8CACA,2CACA,kDACA,6CACA,kDACA,8CACA,mDACA,mDACA,mDACA,kDACA,iDACA,+CACA,+CACA,kDACA,kDACA,oDACA,kDACA,gDACA,4CACA,+CACA,kDACA,kDACA,8CACA,kDACA,oDACA,kDACA,iDACA,oDACA,oDACA,gDACA,iDACA,gDACA,kDACA,iDACA,iDACA,iDACA,kDACA,iDACA,oDACA,iDACA,mDACA,mDACA,8CACA,gDACA,mDACA,kDACA,kDACA,8CACA,iDACA,kDACA,8CACA,kDACA,mDACA,mDACA,+CACA,+CACA,kDACA,iDACA,+CACA,kDACA,6CACA,gDACA,gDACA,kDACA,kDACA,kDACA,gDACA,6CACA,+CACA,kDACA,kDACA,mDACA,kDACA,iDACA,0CACA,iDACA,iDACA,+CACA,8CACA,6CACA,kDACA,mDACA,iDACA,kDACA,kDACA,8CACA,gDACA,mDACA,8CACA,gDACA,kDACA,iDACA,gDACA,2CACA,iDACA,mDACA,iDACA,gDACA,kDACA,+CACA,gDACA,mDACA,kDACA,iDACA,iDACA,iDACA,gDACA,kDACA,iDACA,iDACA,8CACA,+CACA,kDACA,iDACA,mDACA,iDACA,kDACA,kDACA,mDACA,iDACA,kDACA,8CACA,iDACA,mDACA,oDACA,+CACA,gDACA,6CACA,+CACA,kDACA,kDACA,+CACA,gDACA,8CACA,iDACA,8CACA,8CACA,gDACA,oDACA,kDACA,iDACA,iDACA,gDACA,+CACA,mDACA,kDACA,kDACA,mDACA,gDACA,6CACA,iDACA,8CACA,kDACA,kDACA,kDACA,gDACA,gDACA,kDACA,gDACA,mDACA,+CACA,mDACA,kDACA,kDACA,mDACA,iDACA,iDACA,mDACA,+CACA,mDACA,kDACA,iDACA,gDACA,gDACA,gDACA,kDACA,kDACA,kDACA,+CACA,iDACA,iDACA,iDACA,mDACA,kDACA,kDACA,kDACA,mDACA,mDACA,mDACA,gDACA,iDACA,kDACA,kDACA,iDACA,kDACA,6CACA,gDACA,gDACA,iDACA,iDACA,iDACA,+CACA,iDACA,mDACA,6CACA,+CACA,gDACA,kDACA,kDACA,gDACA,kDACA,gDACA,gDACA,iDACA,8CACA,gDACA,+CACA,iDACA,kDACA,mDACA,+CACA,kDACA,kDACA,kDACA,iDACA,kDACA,kDACA,iDACA,gDACA,gDACA,kDACA,gDACA,iDACA,+CACA,iDACA,4CACA,gDACA,+CACA,iDACA,kDACA,mDACA,iDACA,8CACA,iDACA,iDACA,iDACA,kDACA,gDACA,gDACA,iDACA,6CACA,kDACA,iDACA,mDACA,gDACA,kDACA,kDACA,iDACA,gDACA,oDACA,kDACA,mDACA,iDACA,kDACA,8CACA,iDACA,mDACA,iDACA,gDACA,mDACA,iDACA,+CACA,oDACA,6CACA,iDACA,kDACA,iDACA,iDACA,iDACA,kDACA,iDACA,yCACA,kDACA,mDACA,mDACA,kDACA,iDACA,+CACA,mDACA,kDACA,kDACA,8CACA,+CACA,kDACA,mDACA,iDACA,mDACA,oDACA,mDACA,iDACA,gDACA,gDACA,iDACA,gDACA,mDACA,gDACA,oDACA,kDACA,gDACA,kDACA,iDACA,kDACA,iDACA,kDACA,kDACA,iDACA,iDACA,iDACA,gDACA,kDACA,gDACA,mDACA,+CACA,iDACA,iDACA,8CACA,iDACA,+CACA,gDACA,iDACA,kDACA,8CACA,gDACA,mDACA,kDACA,iDACA,kDACA,iDACA,mDACA,gDACA,gDACA,iDACA,iDACA,kDACA,iDACA,gDACA,iDACA,mDACA,iDACA,iDACA,iDACA,iDACA,8CACA,kDACA,mDACA,mDACA,+CACA,kDACA,mDACA,iDACA,mDACA,gDACA,iDACA,gDACA,kDACA,8CACA,iDACA,iDACA,6CACA,kDACA,iDACA,kDACA,8CACA,iDACA,gDACA,kDACA,iDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,8CACA,mDACA,kDACA,kDACA,mDACA,+CACA,gDACA,iDACA,iDACA,mDACA,+CACA,+CACA,kDACA,kDACA,kDACA,gDACA,iDACA,iDACA,iDACA,iDACA,kDACA,mDACA,6CACA,+CACA,kDACA,8CACA,gDACA,+CACA,+CACA,gDACA,mDACA,oDACA,mDACA,kDACA,kDACA,gDACA,+CACA,+CACA,iDACA,iDACA,kDACA,iDACA,mDACA,mDACA,gDACA,iDACA,iDACA,gDACA,kDACA,mDACA,kDACA,gDACA,8CACA,iDACA,oDACA,kDACA,kDACA,mDACA,iDACA,6CACA,gDACA,gDACA,+CACA,+CACA,kDACA,kDACA,+CACA,iDACA,iDACA,2CACA,gDACA,iDACA,+CACA,8CACA,iDACA,6CACA,gDACA,iDACA,6CACA,8CACA,8CACA,kDACA,4CACA,kDACA,kDACA,iDACA,kDACA,kDACA,oDACA,oDACA,mDACA,kDACA,iDACA,mDACA,iDACA,gDACA,iDACA,kDACA,mDACA,kDACA,mDACA,oDACA,iDACA,kDACA,iDACA,mDACA,gDACA,mDACA,kDACA,iDACA,kDACA,iDACA,kDACA,gDACA,kDACA,gDACA,+CACA,iDACA,iDACA,mDACA,kDACA,iDACA,iDACA,iDACA,oDACA,iDACA,iDACA,mDACA,iDACA,mDACA,kDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,6CACA,+CACA,6CACA,iDACA,kDACA,+CACA,+CACA,mDACA,8CACA,oDACA,iDACA,gDACA,iDACA,gDACA,gDACA,mDACA,mDACA,kDACA,mDACA,gDACA,+CACA,mDACA,kDACA,iDACA,+CACA,gDACA,mDACA,kDACA,kDACA,+CACA,gDACA,kDACA,iDACA,gDACA,gDACA,gDACA,+CACA,gDACA,+CACA,gDACA,iDACA,+CACA,kDACA,gDACA,gDACA,8CACA,kDACA,mDACA,mDACA,gDACA,mDACA,iDACA,iDACA,kDACA,oDACA,gDACA,gDACA,iDACA,mDACA,gDACA,iDACA,mDACA,mDACA,4CACA,mDACA,oDACA,mDACA,mDACA,gDACA,+CACA,+CACA,kDACA,kDACA,iDACA,gDACA,8CACA,kDACA,gDACA,gDACA,iDACA,kDACA,8CACA,gDACA,iDACA,gDACA,gDACA,gDACA,gDACA,kDACA,iDACA,kDACA,+CACA,6CACA,mDACA,kDACA,8CACA,gDACA,iDACA,gDACA,kDACA,oDACA,kDACA,kDACA,gDACA,iDACA,gDACA,gDACA,+CACA,kDACA,kDACA,gDACA,kDACA,mDACA,iDACA,kDACA,oDACA,kDACA,6CACA,kDACA,iDACA,gDACA,kDACA,iDACA,+CACA,mDACA,kDACA,oDACA,iDACA,2CACA,+CACA,+CACA,gDACA,mDACA,oDACA,gDACA,kDACA,kDACA,gDACA,iDACA,kDACA,kDACA,iDACA,iDACA,gDACA,iDACA,6CACA,kDACA,6CACA,6CACA,+CACA,iDACA,iDACA,gDACA,8CACA,+CACA,iDACA,mDACA,kDACA,iDACA,kDACA,8CACA,8CACA,8CACA,iDACA,gDACA,gDACA,iDACA,iDACA,+CACA,mDACA,gDACA,mDACA,+CACA,iDACA,+CACA,kDACA,kDACA,+CACA,8CACA,kDACA,gDACA,kDACA,iDACA,kDACA,6CACA,gDACA,kDACA,mDACA,kDACA,gDACA,mDACA,mDACA,mDACA,kDACA,kDACA,gDACA,mDACA,+CACA,iDACA,gDACA,oDACA,iDACA,oDACA,kDACA,iDACA,iDACA,kDACA,gDACA,kDACA,kDACA,kDACA,kDACA,kDACA,kDACA,iDACA,4CACA,gDACA,gDACA,kDACA,iDACA,kDACA,iDACA,gDACA,iDACA,kDACA,+CACA,gDACA,gDACA,mDACA,wCACA,iDACA,gDACA,iDACA,gDACA,+CACA,iDACA,gDACA,kDACA,kDACA,gDACA,iDACA,8CACA,gDACA,+CACA,6CACA,6CACA,kDACA,iDACA,iDACA,kDACA,mDACA,iDACA,iDACA,gDACA,kDACA,mDACA,kDACA,kDACA,mDACA,mDACA,8CACA,kDACA,iDACA,gDACA,iDACA,gDACA,iDACA,iDACA,iDACA,mDACA,kDACA,iDACA,gDACA,mDACA,kDACA,+CACA,gDACA,kDACA,kDACA,iDACA,mDACA,mDACA,mDACA,mDACA,mDACA,iDACA,+CACA,4CACA,kDACA,iDACA,8CACA,+CACA,8CACA,gDACA,6CACA,gDACA,iDACA,gDACA,iDACA,gDACA,kDACA,iDACA,iDACA,gDACA,kDACA,iDACA,iDACA,iDACA,iDACA,kDACA,gDACA,kDACA,0CACA,kDACA,iDACA,iDACA,mDACA,iDACA,kDACA,6CACA,kDACA,iDACA,gDACA,mDACA,gDACA,mDACA,kDACA,+CACA,+CACA,gDACA,mDACA,gDACA,kDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,iDACA,iDACA,mDACA,gDACA,kDACA,kDACA,gDACA,iDACA,gDACA,gDACA,+CACA,gDACA,+CACA,kDACA,oDACA,iDACA,mDACA,iDACA,iDACA,+CACA,gDACA,kDACA,kDACA,+CACA,kDACA,iDACA,gDACA,mDACA,gDACA,kDACA,iDACA,kDACA,mDACA,mDACA,iDACA,kDACA,kDACA,iDACA,gDACA,oDACA,gDACA,0CACA,mDACA,iDACA,gDACA,mDACA,iDACA,mDACA,gDACA,iDACA,+CACA,oDACA,iDACA,+CACA,iDACA,mDACA,kDACA,kDACA,mDACA,kDACA,iDACA,gDACA,gDACA,kDACA,kDACA,+CACA,kDACA,kDACA,gDACA,iDACA,mDACA,kDACA,iDACA,iDACA,gDACA,gDACA,mDACA,iDACA,iDACA,mDACA,kDACA,gDACA,iDACA,kDACA,kDACA,iDACA,kDACA,+CACA,gDACA,gDACA,iDACA,mDACA,kDACA,kDACA,gDACA,8CACA,gDACA,mDACA,iDACA,gDACA,iDACA,iDACA,gDACA,gDACA,gDACA,iDACA,iDACA,iDACA,mDACA,gDACA,kDACA,gDACA,oDACA,kDACA,kDACA,iDACA,gDACA,kDACA,gDACA,4CACA,8CACA,iDACA,gDACA,gDACA,iDACA,gDACA,iDACA,6CACA,gDACA,oDACA,gDACA,gDACA,iDACA,iDACA,iDACA,8CACA,gDACA,kDACA,oDACA,kDACA,gDACA,iDACA,gDACA,+CACA,kDACA,gDACA,kDACA,mDACA,gDACA,iDACA,8CACA,iDACA,8CACA,8CACA,iDACA,6CACA,gDACA,8CACA,6CACA,+CACA,oDACA,iDACA,kDACA,gDACA,+CACA,gDACA,+CACA,kDACA,mDACA,kDACA,iDACA,iDACA,+CACA,iDACA,+CACA,kDACA,iDACA,iDACA,mDACA,+CACA,gDACA,0CACA,8CACA,iDACA,iDACA,gDACA,iDACA,kDACA,gDACA,8CACA,mDACA,iDACA,iDACA,kDACA,iDACA,kDACA,iDACA,gDACA,gDACA,+CACA,gDACA,kDACA,kDACA,kDACA,iDACA,kDACA,gDACA,iDACA,gDACA,kDACA,gDACA,kDACA,kDACA,iDACA,kDACA,mDACA,mDACA,kDACA,iDACA,iDACA,iDACA,+CACA,mDACA,gDACA,6CACA,+CACA,gDACA,iDACA,iDACA,iDACA,iDACA,iDACA,kDACA,kDACA,kDACA,8CACA,kDACA,iDACA,6CACA,iDACA,kDACA,iDACA,kDACA,iDACA,iDACA,mDACA,iDACA,+CACA,gDACA,kDACA,iDACA,kDACA,oDACA,gDACA,iDACA,+CACA,iDACA,kDACA,8CACA,gDACA,gDACA,iDACA,kDACA,+CACA,kDACA,kDACA,iDACA,iDACA,iDACA,8CACA,kDACA,gDACA,6CACA,6CACA,kDACA,kDACA,kDACA,+CACA,mDACA,iDACA,mDACA,+CACA,gDACA,kDACA,gDACA,iDACA,iDACA,kDACA,mDACA,iDACA,8CACA,gDACA,kDACA,kDACA,8CACA,gDACA,iDACA,8CACA,+CACA,+CACA,kDACA,kDACA,mDACA,gDACA,iDACA,gDACA,iDACA,iDACA,+CACA,kDACA,+CACA,iDACA,8CACA,gDACA,iDACA,gDACA,+CACA,mDACA,8CACA,gDACA,+CACA,mDACA,mDACA,iDACA,gDACA,gDACA,+CACA,4CACA,iDACA,gDACA,iDACA,iDACA,gDACA,gDACA,iDACA,gDACA,8CACA,kDACA,mDACA,8CACA,iDACA,+CACA,mDACA,kDACA,mDACA,mDACA,iDACA,kDACA,kDACA,iDACA,iDACA,iDACA,kDACA,iDACA,6CACA,6CACA,kDACA,iDACA,6CACA,kDACA,+CACA,mDACA,kDACA,iDACA,mDACA,iDACA,mDACA,iDACA,iDACA,gDACA,iDACA,mDACA,kDACA,iDACA,kDACA,gDACA,kDACA,gDACA,gDACA,kDACA,iDACA,+CACA,+CACA,kDACA,mDACA,iDACA,kDACA,gDACA,kDACA,kDACA,kDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,gDACA,iDACA,iDACA,iDACA,iDACA,kDACA,iDACA,gDACA,gDACA,kDACA,iDACA,iDACA,gDACA,kDACA,gDACA,iDACA,+CACA,iDACA,kDACA,kDACA,mDACA,8CACA,gDACA,iDACA,iDACA,mDACA,+CACA,kDACA,gDACA,kDACA,iDACA,gDACA,gDACA,gDACA,iDACA,gDACA,kDACA,gDACA,8CACA,+CACA,+CACA,+CACA,kDACA,iDACA,iDACA,+CACA,gDACA,6CACA,gDACA,iDACA,iDACA,gDACA,iDACA,kDACA,gDACA,gDACA,mDACA,iDACA,kDACA,gDACA,iDACA,gDACA,mDACA,iDACA,mDACA,gDACA,iDACA,kDACA,iDACA,+CACA,mDACA,kDACA,kDACA,gDACA,gDACA,iDACA,iDACA,gDACA,iDACA,iDACA,kDACA,mDACA,iDACA,oDACA,6CACA,+CACA,kDACA,iDACA,iDACA,iDACA,oDACA,iDACA,kDACA,iDACA,mDACA,iDACA,iDACA,kDACA,+CACA,gDACA,mDACA,mDACA,iDACA,mDACA,iDACA,kDACA,iDACA,kDACA,iDACA,kDACA,kDACA,kDACA,+CACA,mDACA,iDACA,mDACA,kDACA,gDACA,iDACA,mDACA,iDACA,iDACA,mDACA,mDACA,kDACA,iDACA,iDACA,iDACA,iDACA,mDACA,kDACA,gDACA,2CACA,kDACA,gDACA,6CACA,0CACA,mDACA,gDACA,kDACA,kDACA,gDACA,6CACA,kDACA,8CACA,kDACA,gDACA,iDACA,iDACA,gDACA,mDACA,iDACA,oDACA,kDACA,gDACA,iDACA,gDACA,gDACA,kDACA,iDACA,iDACA,+CACA,kDACA,+CACA,iDACA,kDACA,gDACA,+CACA,gDACA,4CACA,iDACA,iDACA,kDACA,iDACA,6CACA,gDACA,mDACA,kDACA,kDACA,+CACA,iDACA,iDACA,+CACA,8CACA,gDACA,kDACA,mDACA,6CACA,gDACA,mDACA,iDACA,mDACA,mDACA,+CACA,gDACA,kDACA,+CACA,gDACA,gDACA,mDACA,gDACA,iDACA,iDACA,gDACA,+CACA,gDACA,iDACA,+CACA,gDACA,oDACA,kDACA,8CACA,gDACA,kDACA,iDACA,iDACA,6CACA,8CACA,iDACA,iDACA,kDACA,+CACA,gDACA,kDACA,iDACA,iDACA,gDACA,mDACA,gDACA,iDACA,iDACA,8CACA,4CACA,kDACA,kDACA,+CACA,kDACA,iDACA,kDACA,+CACA,mDACA,+CACA,gDACA,gDACA,iDACA,kDACA,+CACA,kDACA,kDACA,6CACA,+CACA,oDACA,iDACA,kDACA,iDACA,iDACA,gDACA,4CACA,iDACA,iDACA,kDACA,kDACA,kDACA,iDACA,+CACA,iDACA,oDACA,gDACA,iDACA,iDACA,gDACA,4CACA,gDACA,kDACA,gDACA,kDACA,6CACA,kDACA,kDACA,gDACA,gDACA,iDACA,4CACA,+CACA,+CACA,kDACA,gDACA,8CACA,iDACA,mDACA,mDACA,+CACA,kDACA,+CACA,kDACA,mDACA,8CACA,8CACA,+CACA,8CACA,iDACA,gDACA,6CACA,gDACA,gDACA,8CACA,8CACA,kDACA,kDACA,kDACA,kDACA,8CACA,iDACA,kDACA,mDACA,mDACA,mDACA,iDACA,+CACA,mDACA,kDACA,gDACA,iDACA,+CACA,iDACA,gDACA,mDACA,+CACA,gDACA,gDACA,gDACA,kDACA,gDACA,kDACA,6CACA,iDACA,kDACA,kDACA,iDACA,kDACA,mDACA,2CACA,gDACA,kDACA,8CACA,iDACA,4CACA,mDACA,+CACA,6CACA,0CACA,6CACA,mDACA,+CACA,gDACA,kDACA,oDACA,gDACA,gDACA,kDACA,kDACA,gDACA,iDACA,gDACA,kDACA,mDACA,iDACA,iDACA,iDACA,gDACA,kDACA,+CACA,8CACA,+CACA,iDACA,mDACA,iDACA,6CACA,iDACA,gDACA,kDACA,+CACA,gDACA,kDACA,iDACA,mDACA,8CACA,8CACA,iDACA,gDACA,iDACA,mDACA,8CACA,gDACA,kDACA,gDACA,iDACA,kDACA,gDACA,iDACA,8CACA,+CACA,+CACA,kDACA,mDACA,6CACA,mDACA,kDACA,iDACA,gDACA,gDACA,gDACA,gDACA,gDACA,kDACA,iDACA,kDACA,8CACA,mDACA,mDACA,8CACA,2CACA,iDACA,kDACA,+CACA,iDACA,kDACA,kDACA,iDACA,+CACA,6CACA,6CACA,8CACA,4CACA,gDACA,kDACA,kDACA,8CACA,6CACA,kDACA,kDACA,iDACA,oDACA,gDACA,kDACA,kDACA,gDACA,mDACA,iDACA,gDACA,kDACA,iDACA,kDACA,iDACA,+CACA,iDACA,gDACA,iDACA,mDACA,kDACA,gDACA,iDACA,kDACA,gDACA,iDACA,gDACA,+CACA,iDACA,gDACA,kDACA,iDACA,iDACA,oDACA,iDACA,kDACA,iDACA,iDACA,kDACA,gDACA,gDACA,kDACA,gDACA,+CACA,+CACA,8CACA,kDACA,mDACA,+CACA,iDACA,iDACA,kDACA,gDACA,iDACA,gDACA,kDACA,mDACA,8CACA,+CACA,+CACA,+CACA,kDACA,kDACA,+CACA,kDACA,gDACA,mDACA,iDACA,iDACA,kDACA,+CACA,kDACA,+CACA,gDACA,+CACA,iDACA,mDACA,gDACA,8CACA,kDACA,kDACA,+CACA,8CACA,kDACA,mDACA,8CACA,gDACA,iDACA,iDACA,+CACA,+CACA,gDACA,mDACA,mDACA,kDACA,mDACA,iDACA,mDACA,+CACA,mDACA,gDACA,gDACA,mDACA,mDACA,kDACA,kDACA,kDACA,gDACA,+CACA,oDACA,iDACA,iDACA,8CACA,8CACA,kDACA,+CACA,iDACA,gDACA,kDACA,kDACA,kDACA,iDACA,iDACA,8CACA,gDACA,iDACA,kDACA,6CACA,kDACA,iDACA,gDACA,mDACA,iDACA,kDACA,mDACA,gDACA,kDACA,gDACA,kDACA,mDACA,gDACA,kDACA,iDACA,8CACA,+CACA,iDACA,gDACA,mDACA,kDACA,+CACA,iDACA,+CACA,mDACA,kDACA,4CACA,8CACA,kDACA,iDACA,iDACA,gDACA,gDACA,kDACA,kDACA,kDACA,kDACA,mDACA,iDACA,gDACA,mDACA,+CACA,gDACA,kDACA,kDACA,gDACA,iDACA,kDACA,8CACA,iDACA,iDACA,iDACA,gDACA,gDACA,gDACA,kDACA,8CACA,gDACA,gDACA,+CACA,gDACA,+CACA,mDACA,iDACA,kDACA,mDACA,kDACA,mDACA,+CACA,gDACA,gDACA,gDACA,gDACA,iDACA,6CACA,gDACA,kDACA,kDACA,gDACA,iDACA,iDACA,iDACA,+CACA,8CACA,+CACA,mDACA,gDACA,kDACA,gDACA,iDACA,kDACA,+CACA,kDACA,4CACA,oDACA,mDACA,iDACA,mDACA,+CACA,gDACA,kDACA,mDACA,+CACA,iDACA,kDACA,mDACA,kDACA,mDACA,kDACA,mDACA,kDACA,iDACA,kDACA,iDACA,kDACA,iDACA,iDACA,kDACA,iDACA,kDACA,iDACA,iDACA,kDACA,iDACA,kDACA,mDACA,kDACA,kDACA,mDACA,iDACA,kDACA,kDACA,kDACA,kDACA,+CACA,kDACA,gDACA,iDACA,gDACA,kDACA,gDACA,+CACA,gDACA,gDACA,+CACA,6CACA,+CACA,gDACA,iDACA,gDACA,+CACA,kDACA,iDACA,+CACA,gDACA,mDACA,iDACA,oDACA,+CACA,+CACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,mDACA,kDACA,iDACA,gDACA,kDACA,gDACA,gDACA,iDACA,iDACA,gDACA,iDACA,kDACA,iDACA,iDACA,gDACA,mDACA,kDACA,kDACA,iDACA,gDACA,gDACA,iDACA,gDACA,iDACA,kDACA,kDACA,oDACA,kDACA,mDACA,iDACA,gDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,mDACA,mDACA,gDACA,+CACA,iDACA,gDACA,8CACA,6CACA,iDACA,+CACA,iDACA,+CACA,iDACA,gDACA,6CACA,gDACA,mDACA,gDACA,8CACA,kDACA,gDACA,+CACA,gDACA,8CACA,gDACA,kDACA,iDACA,iDACA,gDACA,gDACA,gDACA,gDACA,gDACA,iDACA,gDACA,8CACA,iDACA,gDACA,iDACA,gDACA,iDACA,+CACA,8CACA,oDACA,kDACA,kDACA,8CACA,oDACA,gDACA,iDACA,gDACA,gDACA,iDACA,gDACA,mDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,iDACA,mDACA,6CACA,kDACA,gDACA,gDACA,+CACA,gDACA,8CACA,kDACA,gDACA,4CACA,kDACA,iDACA,iDACA,kDACA,iDACA,+CACA,gDACA,gDACA,gDACA,kDACA,+CACA,gDACA,kDACA,iDACA,+CACA,iDACA,kDACA,kDACA,kDACA,gDACA,gDACA,8CACA,6CACA,6CACA,8CACA,iDACA,kDACA,4CACA,6CACA,gDACA,iDACA,iDACA,mDACA,gDACA,6CACA,6CACA,+CACA,6CACA,+CACA,+CACA,kDACA,kDACA,iDACA,iDACA,iDACA,kDACA,mDACA,+CACA,6CACA,+CACA,gDACA,8CACA,iDACA,mDACA,8CACA,kDACA,mDACA,iDACA,gDACA,mDACA,gDACA,+CACA,kDACA,kDACA,gDACA,gDACA,iDACA,kDACA,+CACA,4CACA,iDACA,iDACA,gDACA,iDACA,kDACA,iDACA,kDACA,iDACA,mDACA,+CACA,6CACA,+CACA,mDACA,kDACA,kDACA,iDACA,iDACA,gDACA,mDACA,iDACA,+CACA,+CACA,kDACA,iDACA,kDACA,iDACA,iDACA,mDACA,iDACA,kDACA,gDACA,8CACA,gDACA,iDACA,iDACA,+CACA,gDACA,gDACA,8CACA,gDACA,8CACA,kDACA,+CACA,8CACA,+CACA,mDACA,iDACA,oDACA,gDACA,iDACA,iDACA,iDACA,+CACA,8CACA,+CACA,kDACA,iDACA,mDACA,oDACA,kDACA,2CACA,iDACA,iDACA,6CACA,gDACA,iDACA,kDACA,gDACA,gDACA,iDACA,oDACA,8CACA,kDACA,iDACA,kDACA,kDACA,+CACA,gDACA,kDACA,kDACA,mDACA,kDACA,iDACA,kDACA,kDACA,kDACA,+CACA,gDACA,gDACA,8CACA,+CACA,kDACA,mDACA,gDACA,gDACA,+CACA,gDACA,+CACA,gDACA,8CACA,gDACA,kDACA,mDACA,8CACA,8CACA,kDACA,kDACA,iDACA,+CACA,+CACA,mDACA,kDACA,8CACA,gDACA,kDACA,8CACA,iDACA,+CACA,kDACA,iDACA,iDACA,kDACA,8CACA,mDACA,iDACA,kDACA,+CACA,gDACA,gDACA,iDACA,kDACA,kDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,gDACA,gDACA,gDACA,gDACA,iDACA,kDACA,iDACA,mDACA,iDACA,iDACA,kDACA,mDACA,kDACA,+CACA,iDACA,8CACA,4CACA,mDACA,gDACA,+CACA,kDACA,kDACA,gDACA,iDACA,kDACA,iDACA,mDACA,gDACA,iDACA,+CACA,iDACA,iDACA,iDACA,8CACA,+CACA,gDACA,iDACA,+CACA,iDACA,kDACA,iDACA,gDACA,iDACA,mDACA,gDACA,iDACA,8CACA,gDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,4CACA,gDACA,+CACA,iDACA,iDACA,iDACA,iDACA,kDACA,gDACA,iDACA,gDACA,iDACA,mDACA,iDACA,gDACA,gDACA,iDACA,+CACA,gDACA,+CACA,+CACA,iDACA,iDACA,iDACA,iDACA,8CACA,8CACA,8CACA,+CACA,kDACA,gDACA,gDACA,+CACA,8CACA,iDACA,gDACA,iDACA,iDACA,kDACA,iDACA,gDACA,gDACA,+CACA,gDACA,oDACA,mDACA,kDACA,gDACA,kDACA,kDACA,gDACA,+CACA,8CACA,2CACA,8CACA,gDACA,gDACA,gDACA,6CACA,gDACA,+CACA,kDACA,mDACA,mDACA,iDACA,kDACA,mDACA,kDACA,mDACA,iDACA,kDACA,kDACA,iDACA,kDACA,gDACA,mDACA,iDACA,iDACA,+CACA,kDACA,iDACA,gDACA,6CACA,+CACA,kDACA,gDACA,kDACA,iDACA,gDACA,iDACA,gDACA,mDACA,iDACA,+CACA,mDACA,kDACA,kDACA,gDACA,iDACA,gDACA,kDACA,iDACA,iDACA,kDACA,+CACA,gDACA,iDACA,iDACA,iDACA,mDACA,iDACA,kDACA,+CACA,gDACA,gDACA,iDACA,kDACA,iDACA,+CACA,kDACA,+CACA,iDACA,iDACA,mDACA,iDACA,mDACA,iDACA,iDACA,8CACA,gDACA,mDACA,+CACA,oDACA,gDACA,iDACA,iDACA,kDACA,kDACA,kDACA,gDACA,iDACA,gDACA,iDACA,iDACA,2CACA,6CACA,kDACA,gDACA,+CACA,iDACA,kDACA,iDACA,kDACA,+CACA,mDACA,mDACA,iDACA,iDACA,gDACA,iDACA,kDACA,6CACA,kDACA,6CACA,kDACA,mDACA,gDACA,kDACA,kDACA,6CACA,iDACA,mDACA,oDACA,iDACA,+CACA,gDACA,iDACA,8CACA,+CACA,iDACA,6CACA,mDACA,kDACA,kDACA,iDACA,gDACA,mDACA,6CACA,4CACA,iDACA,mDACA,mDACA,iDACA,+CACA,8CACA,0CACA,iDACA,+CACA,8CACA,4CACA,iDACA,iDACA,+CACA,4CACA,6CACA,iDACA,8CACA,6CACA,8CACA,kDACA,gDACA,gDACA,4CACA,iDACA,+CACA,+CACA,+CACA,+CACA,gDACA,gDACA,gDACA,kDACA,kDACA,8CACA,kDACA,8CACA,kDACA,gDACA,kDACA,gDACA,gDACA,+CACA,8CACA,6CACA,gDACA,6CACA,8CACA,kDACA,kDACA,mDACA,+CACA,iDACA,iDACA,gDACA,mDACA,iDACA,gDACA,8CACA,kDACA,gDACA,+CACA,iDACA,gDACA,gDACA,mDACA,gDACA,8CACA,+CACA,iDACA,2CACA,8CACA,8CACA,iDACA,8CACA,gDACA,gDACA,iDACA,6CACA,6CACA,iDACA,+CACA,iDACA,mDACA,gDACA,gDACA,kDACA,gDACA,iDACA,iDACA,8CACA,gDACA,iDACA,iDACA,8CACA,2CACA,8CACA,8CACA,8CACA,8CACA,+CACA,mDACA,iDACA,iDACA,+CACA,8CACA,iDACA,gDACA,8CACA,gDACA,iDACA,0CACA,kDACA,+CACA,gDACA,8CACA,6CACA,8CACA,+CACA,kDACA,gDACA,+CACA,kDACA,kDACA,+CACA,8CACA,6CACA,4CACA,mDACA,kDACA,+CACA,8CACA,gDACA,gDACA,iDACA,+CACA,4CACA,6CACA,gDACA,gDACA,4CACA,+CACA,+CACA,iDACA,iDACA,gDACA,8CACA,kDACA,kDACA,iDACA,gDACA,6CACA,iDACA,iDACA,0CACA,iDACA,iDACA,kDACA,+CACA,+CACA,iDACA,gDACA,kDACA,iDACA,mDACA,+CACA,iDACA,+CACA,iDACA,+CACA,iDACA,mDACA,8CACA,+CACA,+CACA,iDACA,iDACA,+CACA,gDACA,mDACA,gDACA,+CACA,iDACA,kDACA,gDACA,+CACA,iDACA,kDACA,gDACA,+CACA,kDACA,gDACA,kDACA,8CACA,+CACA,8CACA,+CACA,mDACA,6CACA,iDACA,kDACA,gDACA,kDACA,iDACA,gDACA,kDACA,kDACA,iDACA,gDACA,iDACA,kDACA,gDACA,iDACA,iDACA,gDACA,iDACA,kDACA,+CACA,8CACA,iDACA,gDACA,iDACA,+CACA,mDACA,iDACA,gDACA,mDACA,iDACA,gDACA,8CACA,gDACA,6CACA,+CACA,6CACA,iDACA,+CACA,gDACA,mDACA,kDACA,+CACA,mDACA,iDACA,mDACA,kDACA,iDACA,iDACA,gDACA,gDACA,6CACA,iDACA,+CACA,kDACA,iDACA,kDACA,iDACA,+CACA,iDACA,kDACA,kDACA,iDACA,8CACA,6CACA,8CACA,mDACA,kDACA,kDACA,kDACA,gDACA,+CACA,gDACA,8CACA,kDACA,iDACA,gDACA,kDACA,iDACA,4CACA,kDACA,mDACA,gDACA,gDACA,kDACA,iDACA,iDACA,2CACA,8CACA,mDACA,kDACA,6CACA,gDACA,+CACA,iDACA,kDACA,+CACA,iDACA,iDACA,mDACA,kDACA,gDACA,iDACA,kDACA,iDACA,gDACA,iDACA,iDACA,gDACA,iDACA,gDACA,kDACA,kDACA,gDACA,kDACA,iDACA,kDACA,iDACA,kDACA,6CACA,gDACA,+CACA,gDACA,kDACA,iDACA,kDACA,gDACA,kDACA,kDACA,+CACA,gDACA,+CACA,8CACA,iDACA,iDACA,kDACA,iDACA,mDACA,gDACA,gDACA,+CACA,gDACA,iDACA,gDACA,iDACA,8CACA,8CACA,gDACA,kDACA,8CACA,+CACA,kDACA,gDACA,+CACA,kDACA,iDACA,gDACA,8CACA,iDACA,iDACA,8CACA,8CACA,gDACA,iDACA,kDACA,iDACA,iDACA,mDACA,kDACA,gDACA,gDACA,+CACA,mDACA,kDACA,mDACA,kDACA,4CACA,iDACA,4CACA,kDACA,iDACA,gDACA,kDACA,kDACA,kDACA,kDACA,kDACA,iDACA,8CACA,8CACA,kDACA,gDACA,gDACA,gDACA,6CACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,kDACA,iDACA,kDACA,iDACA,mDACA,kDACA,iDACA,mDACA,0CACA,6CACA,kDACA,+CACA,+CACA,8CACA,+CACA,8CACA,iDACA,gDACA,iDACA,8CACA,iDACA,iDACA,gDACA,gDACA,gDACA,gDACA,kDACA,kDACA,kDACA,mDACA,kDACA,gDACA,6CACA,kDACA,+CACA,iDACA,mDACA,mDACA,iDACA,+CACA,+CACA,2CACA,8CACA,kDACA,iDACA,iDACA,gDACA,+CACA,8CACA,8CACA,iDACA,iDACA,6CACA,iDACA,iDACA,mDACA,kDACA,oDACA,oDACA,kDACA,gDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,mDACA,iDACA,+CACA,+CACA,2CACA,+CACA,kDACA,iDACA,6CACA,4CACA,gDACA,+CACA,gDACA,+CACA,wCACA,6CACA,gDACA,gDACA,6CACA,gDACA,gDACA,iDACA,iDACA,mDACA,8CACA,gDACA,iDACA,gDACA,+CACA,8CACA,8CACA,gDACA,+CACA,+CACA,6CACA,gDACA,8CACA,+CACA,iDACA,iDACA,+CACA,gDACA,8CACA,kDACA,8CACA,iDACA,8CACA,6CACA,iDACA,4CACA,kDACA,+CACA,iDACA,gDACA,+CACA,8CACA,gDACA,8CACA,6CACA,6CACA,kDACA,6CACA,kDACA,kDACA,6CACA,8CACA,+CACA,6CACA,6CACA,4CACA,iDACA,iDACA,gDACA,+CACA,iDACA,+CACA,4CACA,iDACA,+CACA,gDACA,gDACA,gDACA,gDACA,kDACA,8CACA,kDACA,gDACA,8CACA,kDACA,+CACA,kDACA,iDACA,iDACA,8CACA,+CACA,iDACA,6CACA,gDACA,gDACA,iDACA,kDACA,kDACA,iDACA,gDACA,iDACA,gDACA,gDACA,iDACA,gDACA,+CACA,mDACA,kDACA,kDACA,kDACA,mDACA,+CACA,kDACA,mDACA,kDACA,iDACA,+CACA,gDACA,+CACA,8CACA,oDACA,gDACA,kDACA,iDACA,kDACA,iDACA,iDACA,mDACA,gDACA,6CACA,gDACA,kDACA,iDACA,iDACA,kDACA,iDACA,gDACA,kDACA,gDACA,+CACA,iDACA,kDACA,iDACA,gDACA,kDACA,8CACA,mDACA,iDACA,kDACA,kDACA,kDACA,iDACA,6CACA,8CACA,kDACA,iDACA,kDACA,gDACA,gDACA,iDACA,gDACA,iDACA,gDACA,iDACA,8CACA,gDACA,iDACA,8CACA,iDACA,kDACA,gDACA,iDACA,gDACA,8CACA,gDACA,+CACA,8CACA,6CACA,iDACA,kDACA,gDACA,iDACA,iDACA,iDACA,+CACA,kDACA,kDACA,iDACA,kDACA,iDACA,iDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,iDACA,8CACA,kDACA,8CACA,gDACA,8CACA,8CACA,8CACA,4CACA,+CACA,iDACA,8CACA,gDACA,8CACA,4CACA,8CACA,6CACA,8CACA,gDACA,gDACA,gDACA,+CACA,gDACA,8CACA,gDACA,iDACA,gDACA,8CACA,4CACA,+CACA,kDACA,+CACA,+CACA,oDACA,+CACA,6CACA,6CACA,iDACA,gDACA,iDACA,2CACA,kDACA,iDACA,gDACA,gDACA,iDACA,iDACA,4CACA,8CACA,kDACA,kDACA,kDACA,iDACA,+CACA,iDACA,+CACA,+CACA,0CACA,iDACA,2CACA,6CACA,+CACA,+CACA,kDACA,gDACA,gDACA,iDACA,kDACA,iDACA,iDACA,8CACA,iDACA,kDACA,gDACA,+CACA,iDACA,gDACA,kDACA,gDACA,gDACA,gDACA,iDACA,kDACA,8CACA,gDACA,kDACA,8CACA,kDACA,gDACA,4CACA,kDACA,+CACA,+CACA,8CACA,gDACA,8CACA,2CACA,2CACA,6CACA,8CACA,+CACA,0CACA,iDACA,kDACA,8CACA,6CACA,4CACA,8CACA,6CACA,gDACA,gDACA,kDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,mDACA,+CACA,gDACA,gDACA,+CACA,6CACA,oDACA,6CACA,8CACA,kDACA,8CACA,2CACA,2CACA,+CACA,iDACA,6CACA,mDACA,gDACA,+CACA,gDACA,iDACA,iDACA,kDACA,8CACA,gDACA,iDACA,6CACA,gDACA,gDACA,6CACA,4CACA,gDACA,8CACA,8CACA,8CACA,iDACA,+CACA,8CACA,6CACA,8CACA,iDACA,gDACA,8CACA,6CACA,6CACA,6CACA,iDACA,gDACA,4CACA,+CACA,kDACA,iDACA,iDACA,kDACA,6CACA,8CACA,iDACA,gDACA,oDACA,gDACA,gDACA,8CACA,+CACA,+CACA,4CACA,kDACA,iDACA,kDACA,+CACA,8CACA,6CACA,+CACA,iDACA,gDACA,+CACA,iDACA,iDACA,mDACA,iDACA,kDACA,iDACA,8CACA,gDACA,iDACA,iDACA,iDACA,gDACA,kDACA,iDACA,kDACA,gDACA,gDACA,mDACA,+CACA,mDACA,kDACA,6CACA,gDACA,kDACA,8CACA,iDACA,iDACA,gDACA,8CACA,kDACA,gDACA,iDACA,gDACA,+CACA,kDACA,gDACA,kDACA,gDACA,4CACA,kDACA,kDACA,+CACA,8CACA,iDACA,gDACA,kDACA,iDACA,mDACA,gDACA,gDACA,iDACA,iDACA,kDACA,kDACA,kDACA,iDACA,iDACA,kDACA,iDACA,mDACA,gDACA,iDACA,8CACA,mDACA,gDACA,mDACA,gDACA,iDACA,iDACA,+CACA,kDACA,+CACA,+CACA,gDACA,gDACA,6CACA,gDACA,kDACA,iDACA,iDACA,kDACA,kDACA,gDACA,iDACA,iDACA,kDACA,gDACA,kDACA,kDACA,kDACA,gDACA,gDACA,iDACA,iDACA,gDACA,6CACA,kDACA,iDACA,+CACA,+CACA,+CACA,+CACA,gDACA,gDACA,8CACA,+CACA,6CACA,6CACA,6CACA,4CACA,iDACA,iDACA,+CACA,8CACA,iDACA,kDACA,+CACA,4CACA,+CACA,8CACA,kDACA,gDACA,8CACA,kDACA,gDACA,gDACA,4CACA,mDACA,+CACA,gDACA,gDACA,iDACA,4CACA,iDACA,iDACA,kDACA,iDACA,iDACA,+CACA,gDACA,iDACA,8CACA,8CACA,gDACA,+CACA,+CACA,iDACA,yCACA,4CACA,6CACA,+CACA,+CACA,+CACA,kDACA,2CACA,iDACA,iDACA,8CACA,gDACA,8CACA,kDACA,kDACA,8CACA,+CACA,kDACA,+CACA,+CACA,iDACA,gDACA,kDACA,kDACA,iDACA,kDACA,iDACA,iDACA,8CACA,8CACA,kDACA,iDACA,mDACA,gDACA,iDACA,iDACA,iDACA,kDACA,kDACA,gDACA,+CACA,mDACA,gDACA,8CACA,kDACA,+CACA,8CACA,+CACA,+CACA,iDACA,iDACA,8CACA,iDACA,kDACA,6CACA,6CACA,+CACA,iDACA,8CACA,+CACA,kDACA,iDACA,gDACA,gDACA,6CACA,+CACA,8CACA,iDACA,kDACA,mDACA,iDACA,gDACA,8CACA,8CACA,iDACA,iDACA,kDACA,kDACA,gDACA,mDACA,kDACA,kDACA,iDACA,kDACA,kDACA,kDACA,kDACA,gDACA,kDACA,kDACA,mDACA,gDACA,kDACA,kDACA,gDACA,mDACA,iDACA,+CACA,iDACA,gDACA,iDACA,+CACA,gDACA,kDACA,kDACA,kDACA,8CACA,mDACA,kDACA,gDACA,kDACA,iDACA,gDACA,8CACA,iDACA,mDACA,kDACA,kDACA,+CACA,iDACA,iDACA,gDACA,+CACA,8CACA,6CACA,+CACA,kDACA,mDACA,gDACA,iDACA,iDACA,gDACA,0CACA,+CACA,gDACA,kDACA,8CACA,+CACA,gDACA,kDACA,gDACA,mDACA,gDACA,iDACA,iDACA,iDACA,6CACA,gDACA,+CACA,+CACA,gDACA,iDACA,gDACA,8CACA,iDACA,iDACA,8CACA,6CACA,8CACA,8CACA,4CACA,2CACA,iDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,+CACA,4CACA,8CACA,6CACA,+CACA,gDACA,2CACA,gDACA,gDACA,gDACA,+CACA,gDACA,8CACA,iDACA,8CACA,8CACA,+CACA,2CACA,6CACA,6CACA,8CACA,8CACA,8CACA,2CACA,gDACA,+CACA,+CACA,+CACA,gDACA,iDACA,gDACA,gDACA,+CACA,8CACA,gDACA,8CACA,6CACA,8CACA,4CACA,0CACA,iDACA,iDACA,6CACA,+CACA,+CACA,+CACA,6CACA,gDACA,+CACA,gDACA,8CACA,+CACA,gDACA,4CACA,iDACA,iDACA,gDACA,+CACA,mDACA,kDACA,gDACA,+CACA,gDACA,gDACA,8CACA,6CACA,gDACA,iDACA,kDACA,kDACA,kDACA,gDACA,8CACA,+CACA,gDACA,6CACA,8CACA,8CACA,kDACA,6CACA,kDACA,+CACA,gDACA,iDACA,gDACA,iDACA,gDACA,gDACA,kDACA,+CACA,+CACA,iDACA,oDACA,+CACA,6CACA,4CACA,kDACA,+CACA,mDACA,gDACA,8CACA,6CACA,gDACA,8CACA,iDACA,gDACA,iDACA,gDACA,+CACA,4CACA,kDACA,kDACA,iDACA,gDACA,iDACA,kDACA,mDACA,kDACA,+CACA,+CACA,kDACA,mDACA,gDACA,iDACA,kDACA,4CACA,mDACA,iDACA,kDACA,kDACA,gDACA,kDACA,iDACA,iDACA,gDACA,kDACA,kDACA,4CACA,8CACA,8CACA,8CACA,kDACA,iDACA,iDACA,gDACA,iDACA,iDACA,iDACA,mDACA,gDACA,gDACA,kDACA,+CACA,8CACA,mDACA,gDACA,iDACA,gDACA,8CACA,iDACA,8CACA,iDACA,gDACA,mDACA,oDACA,iDACA,iDACA,mDACA,kDACA,4CACA,8CACA,4CACA,iDACA,kDACA,gDACA,+CACA,iDACA,kDACA,iDACA,iDACA,gDACA,gDACA,+CACA,mDACA,+CACA,iDACA,8CACA,4CACA,6CACA,8CACA,+CACA,8CACA,gDACA,gDACA,kDACA,gDACA,iDACA,6CACA,6CACA,gDACA,6CACA,6CACA,+CACA,kDACA,gDACA,8CACA,4CACA,gDACA,8CACA,gDACA,+CACA,4CACA,6CACA,gDACA,6CACA,gDACA,+CACA,4CACA,8CACA,gDACA,2CACA,+CACA,kDACA,+CACA,+CACA,0CACA,8CACA,iDACA,kDACA,6CACA,+CACA,yCACA,+CACA,+CACA,+CACA,gDACA,+CACA,6CACA,2CACA,iDACA,gDACA,6CACA,iDACA,6CACA,6CACA,8CACA,8CACA,gDACA,iDACA,+CACA,+CACA,8CACA,iDACA,+CACA,8CACA,gDACA,kDACA,6CACA,gDACA,6CACA,4CACA,6CACA,4CACA,kDACA,gDACA,iDACA,iDACA,kDACA,gDACA,8CACA,4CACA,iDACA,iDACA,+CACA,+CACA,8CACA,kDACA,gDACA,gDACA,iDACA,kDACA,+CACA,4CACA,kDACA,kDACA,iDACA,iDACA,iDACA,8CACA,+CACA,kDACA,kDACA,kDACA,8CACA,8CACA,kDACA,gDACA,kDACA,kDACA,8CACA,+CACA,+CACA,iDACA,gDACA,6CACA,iDACA,iDACA,iDACA,8CACA,6CACA,6CACA,kDACA,mDACA,kDACA,kDACA,kDACA,gDACA,iDACA,iDACA,iDACA,kDACA,kDACA,gDACA,kDACA,kDACA,gDACA,gDACA,kDACA,iDACA,kDACA,kDACA,gDACA,6CACA,+CACA,8CACA,iDACA,iDACA,+CACA,iDACA,iDACA,oDACA,gDACA,iDACA,gDACA,+CACA,iDACA,mDACA,kDACA,kDACA,kDACA,kDACA,mDACA,kDACA,iDACA,kDACA,gDACA,iDACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDACA,4CACA,gDACA,iDACA,gDACA,gDACA,+CACA,+CACA,+CACA,8CACA,6CACA,gDACA,+CACA,8CACA,iDACA,2CACA,4CACA,4CACA,+CACA,6CACA,+CACA,+CACA,+CACA,8CACA,8CACA,gDACA,gDACA,8CACA,8CACA,iDACA,6CACA,6CACA,8CACA,+CACA,gDACA,iDACA,kDACA,+CACA,4CACA,gDACA,gDACA,6CACA,gDACA,mDACA,+CACA,8CACA,iDACA,iDACA,gDACA,gDACA,6CACA,2CACA,+CACA,+CACA,+CACA,0CACA,+CACA,oDACA,oDACA,oDACA,oDACA,iDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,gDACA,iDACA,gDACA,kDACA,8CACA,0CACA,+CACA,8CACA,4CACA,gDACA,6CACA,mDACA,iDACA,8CACA,gDACA,2CACA,iDACA,+CACA,iDACA,8CACA,+CACA,iDACA,gDACA,kDACA,+CACA,8CACA,8CACA,8CACA,4CACA,4CACA,+CACA,6CACA,4CACA,gDACA,gDACA,+CACA,+CACA,yCACA,yCACA,6CACA,gDACA,gDACA,2CACA,+CACA,gDACA,iDACA,4CACA,gDACA,iDACA,6CACA,6CACA,+CACA,+CACA,gDACA,gDACA,kDACA,8CACA,iDACA,4CACA,4CACA,gDACA,gDACA,8CACA,+CACA,gDACA,+CACA,gDACA,2CACA,+CACA,+CACA,iDACA,6CACA,gDACA,8CACA,+CACA,gDACA,+CACA,+CACA,4CACA,+CACA,gDACA,4CACA,0CACA,6CACA,8CACA,+CACA,8CACA,+CACA,8CACA,gDACA,gDACA,+CACA,8CACA,8CACA,gDACA,8CACA,kDACA,+CACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,0CACA,2CACA,+CACA,gDACA,iDACA,gDACA,4CACA,iDACA,+CACA,wCACA,uCACA,+CACA,iDACA,6CACA,8CACA,gDACA,6CACA,kDACA,iDACA,kDACA,iDACA,+CACA,+CACA,gDACA,gDACA,gDACA,gDACA,+CACA,6CACA,+CACA,+CACA,6CACA,gDACA,gDACA,iDACA,+CACA,+CACA,gDACA,gDACA,8CACA,8CACA,iDACA,kDACA,gDACA,8CACA,8CACA,iDACA,gDACA,gDACA,6CACA,+CACA,4CACA,uCACA,6CACA,8CACA,gDACA,gDACA,gDACA,+CACA,gDACA,gDACA,kDACA,+CACA,gDACA,+CACA,gDACA,gDACA,+CACA,iDACA,8CACA,+CACA,2CACA,uCACA,iDACA,gDACA,8CACA,gDACA,8CACA,gDACA,gDACA,kDACA,8CACA,8CACA,+CACA,4CACA,gDACA,2CACA,+CACA,gDACA,+CACA,mDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,oDACA,kDAIAxC,EAAAwE,KAAA,WACA,OAAAxE,EAAAgpI,2BC3oSAhpI,EAAAk+D,OAAA,IAAA17D,WAAA,CAGA,gCACA,gCACA,+CACA,gDACA,gDACA,gDACA,gDACA,+CAEA,gCACA,gCACA,gCACA,gCAEA,gCACA,gCACA,gCACA,gCAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCAEA,gCACA,gCACA,gCACA,gCACA,gCAEA,gCACA,gCACA,gCAEA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCAEA,gCACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDAEA,sCACA,gDACA,gDACA,gDACA,sCACA,gDACA,gDACA,gDACA,sCACA,gDACA,gDACA,gDACA,sCACA,gDACA,gDACA,gDAEA,gCACA,gCACA,wCACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDAEA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,kCAGAxC,EAAAssK,cAAA,IAAAtrJ,YAAA,CAEA,UAEA,UAEA,MAEA,yBCpOA,SAAAmtJ,EAAA/kK,EAAAi8J,GACA/gK,KAAA8E,SACA9E,KAAA+gK,QAGArlK,EAAAwnK,uBAAA,CACA,IAAA2G,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,MACA,IAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,MACA,IAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,MACA,IAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,OACA,IAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,OACA,IAAAA,EAAA,WAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,SACA,IAAAA,EAAA,aAAAA,EAAA,WAGAnuK,EAAAmtK,wBAAA,CACA,IAAAgB,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,E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","file":"node_modules/pdfkit.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 918);\n","module.exports = require(\"util\");","/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));","module.exports = require(\"fs\");","var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = require(\"stream\");",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","module.exports = require(\"buffer\");","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","module.exports = require(\"events\");","// Generated by CoffeeScript 1.7.1\n(function() {\n  var NumberT, PropertyDescriptor;\n\n  NumberT = require('./Number').Number;\n\n  exports.resolveLength = function(length, stream, parent) {\n    var res;\n    if (typeof length === 'number') {\n      res = length;\n    } else if (typeof length === 'function') {\n      res = length.call(parent, parent);\n    } else if (parent && typeof length === 'string') {\n      res = parent[length];\n    } else if (stream && length instanceof NumberT) {\n      res = length.decode(stream);\n    }\n    if (isNaN(res)) {\n      throw new Error('Not a fixed size');\n    }\n    return res;\n  };\n\n  PropertyDescriptor = (function() {\n    function PropertyDescriptor(opts) {\n      var key, val;\n      if (opts == null) {\n        opts = {};\n      }\n      this.enumerable = true;\n      this.configurable = true;\n      for (key in opts) {\n        val = opts[key];\n        this[key] = val;\n      }\n    }\n\n    return PropertyDescriptor;\n\n  })();\n\n  exports.PropertyDescriptor = PropertyDescriptor;\n\n}).call(this);\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = require(\"zlib\");",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));","// Generated by CoffeeScript 1.7.1\n(function() {\n  var DecodeStream, Fixed, NumberT,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  DecodeStream = require('./DecodeStream');\n\n  NumberT = (function() {\n    function NumberT(type, endian) {\n      this.type = type;\n      this.endian = endian != null ? endian : 'BE';\n      this.fn = this.type;\n      if (this.type[this.type.length - 1] !== '8') {\n        this.fn += this.endian;\n      }\n    }\n\n    NumberT.prototype.size = function() {\n      return DecodeStream.TYPES[this.type];\n    };\n\n    NumberT.prototype.decode = function(stream) {\n      return stream['read' + this.fn]();\n    };\n\n    NumberT.prototype.encode = function(stream, val) {\n      return stream['write' + this.fn](val);\n    };\n\n    return NumberT;\n\n  })();\n\n  exports.Number = NumberT;\n\n  exports.uint8 = new NumberT('UInt8');\n\n  exports.uint16be = exports.uint16 = new NumberT('UInt16', 'BE');\n\n  exports.uint16le = new NumberT('UInt16', 'LE');\n\n  exports.uint24be = exports.uint24 = new NumberT('UInt24', 'BE');\n\n  exports.uint24le = new NumberT('UInt24', 'LE');\n\n  exports.uint32be = exports.uint32 = new NumberT('UInt32', 'BE');\n\n  exports.uint32le = new NumberT('UInt32', 'LE');\n\n  exports.int8 = new NumberT('Int8');\n\n  exports.int16be = exports.int16 = new NumberT('Int16', 'BE');\n\n  exports.int16le = new NumberT('Int16', 'LE');\n\n  exports.int24be = exports.int24 = new NumberT('Int24', 'BE');\n\n  exports.int24le = new NumberT('Int24', 'LE');\n\n  exports.int32be = exports.int32 = new NumberT('Int32', 'BE');\n\n  exports.int32le = new NumberT('Int32', 'LE');\n\n  exports.floatbe = exports.float = new NumberT('Float', 'BE');\n\n  exports.floatle = new NumberT('Float', 'LE');\n\n  exports.doublebe = exports.double = new NumberT('Double', 'BE');\n\n  exports.doublele = new NumberT('Double', 'LE');\n\n  Fixed = (function(_super) {\n    __extends(Fixed, _super);\n\n    function Fixed(size, endian, fracBits) {\n      if (fracBits == null) {\n        fracBits = size >> 1;\n      }\n      Fixed.__super__.constructor.call(this, \"Int\" + size, endian);\n      this._point = 1 << fracBits;\n    }\n\n    Fixed.prototype.decode = function(stream) {\n      return Fixed.__super__.decode.call(this, stream) / this._point;\n    };\n\n    Fixed.prototype.encode = function(stream, val) {\n      return Fixed.__super__.encode.call(this, stream, val * this._point | 0);\n    };\n\n    return Fixed;\n\n  })(NumberT);\n\n  exports.Fixed = Fixed;\n\n  exports.fixed16be = exports.fixed16 = new Fixed(16, 'BE');\n\n  exports.fixed16le = new Fixed(16, 'LE');\n\n  exports.fixed32be = exports.fixed32 = new Fixed(32, 'BE');\n\n  exports.fixed32le = new Fixed(32, 'LE');\n\n}).call(this);\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","module.exports = {};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n","module.exports = require(\"string_decoder\");",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));","exports.f = {}.propertyIsEnumerable;\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","module.exports = true;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));","// Generated by CoffeeScript 1.7.1\n(function() {\n  var DecodeStream, iconv;\n\n  try {\n    iconv = require('iconv-lite');\n  } catch (_error) {}\n\n  DecodeStream = (function() {\n    var key;\n\n    function DecodeStream(buffer) {\n      this.buffer = buffer;\n      this.pos = 0;\n      this.length = this.buffer.length;\n    }\n\n    DecodeStream.TYPES = {\n      UInt8: 1,\n      UInt16: 2,\n      UInt24: 3,\n      UInt32: 4,\n      Int8: 1,\n      Int16: 2,\n      Int24: 3,\n      Int32: 4,\n      Float: 4,\n      Double: 8\n    };\n\n    for (key in Buffer.prototype) {\n      if (key.slice(0, 4) === 'read') {\n        (function(key) {\n          var bytes;\n          bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, '')];\n          return DecodeStream.prototype[key] = function() {\n            var ret;\n            ret = this.buffer[key](this.pos);\n            this.pos += bytes;\n            return ret;\n          };\n        })(key);\n      }\n    }\n\n    DecodeStream.prototype.readString = function(length, encoding) {\n      var buf, byte, i, _i, _ref;\n      if (encoding == null) {\n        encoding = 'ascii';\n      }\n      switch (encoding) {\n        case 'utf16le':\n        case 'ucs2':\n        case 'utf8':\n        case 'ascii':\n          return this.buffer.toString(encoding, this.pos, this.pos += length);\n        case 'utf16be':\n          buf = new Buffer(this.readBuffer(length));\n          for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {\n            byte = buf[i];\n            buf[i] = buf[i + 1];\n            buf[i + 1] = byte;\n          }\n          return buf.toString('utf16le');\n        default:\n          buf = this.readBuffer(length);\n          if (iconv) {\n            try {\n              return iconv.decode(buf, encoding);\n            } catch (_error) {}\n          }\n          return buf;\n      }\n    };\n\n    DecodeStream.prototype.readBuffer = function(length) {\n      return this.buffer.slice(this.pos, this.pos += length);\n    };\n\n    DecodeStream.prototype.readUInt24BE = function() {\n      return (this.readUInt16BE() << 8) + this.readUInt8();\n    };\n\n    DecodeStream.prototype.readUInt24LE = function() {\n      return this.readUInt16LE() + (this.readUInt8() << 16);\n    };\n\n    DecodeStream.prototype.readInt24BE = function() {\n      return (this.readInt16BE() << 8) + this.readUInt8();\n    };\n\n    DecodeStream.prototype.readInt24LE = function() {\n      return this.readUInt16LE() + (this.readInt8() << 16);\n    };\n\n    return DecodeStream;\n\n  })();\n\n  module.exports = DecodeStream;\n\n}).call(this);\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = Object.getOwnPropertySymbols;\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","// Generated by CoffeeScript 1.7.1\nvar UnicodeTrie, inflate;\n\ninflate = require('tiny-inflate');\n\nUnicodeTrie = (function() {\n  var DATA_BLOCK_LENGTH, DATA_GRANULARITY, DATA_MASK, INDEX_1_OFFSET, INDEX_2_BLOCK_LENGTH, INDEX_2_BMP_LENGTH, INDEX_2_MASK, INDEX_SHIFT, LSCP_INDEX_2_LENGTH, LSCP_INDEX_2_OFFSET, OMITTED_BMP_INDEX_1_LENGTH, SHIFT_1, SHIFT_1_2, SHIFT_2, UTF8_2B_INDEX_2_LENGTH, UTF8_2B_INDEX_2_OFFSET;\n\n  SHIFT_1 = 6 + 5;\n\n  SHIFT_2 = 5;\n\n  SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n  OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n  INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n  INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n  INDEX_SHIFT = 2;\n\n  DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n  DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n  LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\n\n  LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n  INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n  UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n\n  UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\n\n  INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n  DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\n  function UnicodeTrie(data) {\n    var isBuffer, uncompressedLength, view;\n    isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n    if (isBuffer || data instanceof Uint8Array) {\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      this.data = data.data, this.highStart = data.highStart, this.errorValue = data.errorValue;\n    }\n  }\n\n  UnicodeTrie.prototype.get = function(codePoint) {\n    var index;\n    if (codePoint < 0 || codePoint > 0x10ffff) {\n      return this.errorValue;\n    }\n    if (codePoint < 0xd800 || (codePoint > 0xdbff && codePoint <= 0xffff)) {\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint <= 0xffff) {\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    if (codePoint < this.highStart) {\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n    return this.data[this.data.length - DATA_GRANULARITY];\n  };\n\n  return UnicodeTrie;\n\n})();\n\nmodule.exports = UnicodeTrie;\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar r = _interopDefault(require('restructure'));\nvar _Object$getOwnPropertyDescriptor = _interopDefault(require('babel-runtime/core-js/object/get-own-property-descriptor'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _Object$freeze = _interopDefault(require('babel-runtime/core-js/object/freeze'));\nvar _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));\nvar _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));\nvar _Object$defineProperty = _interopDefault(require('babel-runtime/core-js/object/define-property'));\nvar _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));\nvar _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));\nvar _Map = _interopDefault(require('babel-runtime/core-js/map'));\nvar _possibleConstructorReturn = _interopDefault(require('babel-runtime/helpers/possibleConstructorReturn'));\nvar _inherits = _interopDefault(require('babel-runtime/helpers/inherits'));\nvar restructure_src_utils = require('restructure/src/utils');\nvar _Object$defineProperties = _interopDefault(require('babel-runtime/core-js/object/define-properties'));\nvar isEqual = _interopDefault(require('deep-equal'));\nvar _Object$assign = _interopDefault(require('babel-runtime/core-js/object/assign'));\nvar _String$fromCodePoint = _interopDefault(require('babel-runtime/core-js/string/from-code-point'));\nvar _Array$from = _interopDefault(require('babel-runtime/core-js/array/from'));\nvar _Set = _interopDefault(require('babel-runtime/core-js/set'));\nvar unicode = _interopDefault(require('unicode-properties'));\nvar UnicodeTrie = _interopDefault(require('unicode-trie'));\nvar StateMachine = _interopDefault(require('dfa'));\nvar _Number$EPSILON = _interopDefault(require('babel-runtime/core-js/number/epsilon'));\nvar cloneDeep = _interopDefault(require('clone'));\nvar inflate = _interopDefault(require('tiny-inflate'));\nvar brotli = _interopDefault(require('brotli/decompress'));\n\n\n\nvar fontkit = {};\nfontkit.logErrors = false;\n\nvar formats = [];\nfontkit.registerFormat = function (format) {\n  formats.push(format);\n};\n\nfontkit.openSync = function (filename, postscriptName) {\n  var buffer = fs.readFileSync(filename);\n  return fontkit.create(buffer, postscriptName);\n};\n\nfontkit.open = function (filename, postscriptName, callback) {\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n\n  fs.readFile(filename, function (err, buffer) {\n    if (err) {\n      return callback(err);\n    }\n\n    try {\n      var font = fontkit.create(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n\n    return callback(null, font);\n  });\n\n  return;\n};\n\nfontkit.create = function (buffer, postscriptName) {\n  for (var i = 0; i < formats.length; i++) {\n    var format = formats[i];\n    if (format.probe(buffer)) {\n      var font = new format(new r.DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\nfontkit.defaultLanguage = 'en';\nfontkit.setDefaultLanguage = function () {\n  var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n\n  fontkit.defaultLanguage = lang;\n};\n\n/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nfunction cache(target, key, descriptor) {\n  if (descriptor.get) {\n    var get = descriptor.get;\n    descriptor.get = function () {\n      var value = get.call(this);\n      _Object$defineProperty(this, key, { value: value });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    var fn = descriptor.value;\n\n    return {\n      get: function get() {\n        var cache = new _Map();\n        function memoized() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          var result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        };\n\n        _Object$defineProperty(this, key, { value: memoized });\n        return memoized;\n      }\n    };\n  }\n}\n\nvar SubHeader = new r.Struct({\n  firstCode: r.uint16,\n  entryCount: r.uint16,\n  idDelta: r.int16,\n  idRangeOffset: r.uint16\n});\n\nvar CmapGroup = new r.Struct({\n  startCharCode: r.uint32,\n  endCharCode: r.uint32,\n  glyphID: r.uint32\n});\n\nvar UnicodeValueRange = new r.Struct({\n  startUnicodeValue: r.uint24,\n  additionalCount: r.uint8\n});\n\nvar UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID: r.uint16\n});\n\nvar DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nvar NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\n\nvar VarSelectorRecord = new r.Struct({\n  varSelector: r.uint24,\n  defaultUVS: new r.Pointer(r.uint32, DefaultUVS, { type: 'parent' }),\n  nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, { type: 'parent' })\n});\n\nvar CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: { // Byte encoding\n    length: r.uint16, // Total table length in bytes (set to 262 for format 0)\n    language: r.uint16, // Language code for this encoding subtable, or zero if language-independent\n    codeMap: new r.LazyArray(r.uint8, 256)\n  },\n\n  2: { // High-byte mapping (CJK)\n    length: r.uint16,\n    language: r.uint16,\n    subHeaderKeys: new r.Array(r.uint16, 256),\n    subHeaderCount: function subHeaderCount(t) {\n      return Math.max.apply(Math, t.subHeaderKeys);\n    },\n    subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n\n  4: { // Segment mapping to delta values\n    length: r.uint16, // Total table length in bytes\n    language: r.uint16, // Language code\n    segCountX2: r.uint16,\n    segCount: function segCount(t) {\n      return t.segCountX2 >> 1;\n    },\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    endCode: new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad: new r.Reserved(r.uint16), // This value should be zero\n    startCode: new r.LazyArray(r.uint16, 'segCount'),\n    idDelta: new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray: new r.LazyArray(r.uint16, function (t) {\n      return (t.length - t._currentOffset) / 2;\n    })\n  },\n\n  6: { // Trimmed table\n    length: r.uint16,\n    language: r.uint16,\n    firstCode: r.uint16,\n    entryCount: r.uint16,\n    glyphIndices: new r.LazyArray(r.uint16, 'entryCount')\n  },\n\n  8: { // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint16,\n    is32: new r.LazyArray(r.uint8, 8192),\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  10: { // Trimmed Array\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    firstCode: r.uint32,\n    entryCount: r.uint32,\n    glyphIndices: new r.LazyArray(r.uint16, 'numChars')\n  },\n\n  12: { // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length: r.uint32,\n    language: r.uint32,\n    nGroups: r.uint32,\n    groups: new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  14: { // Unicode Variation Sequences\n    length: r.uint32,\n    numRecords: r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\n\nvar CmapEntry = new r.Struct({\n  platformID: r.uint16, // Platform identifier\n  encodingID: r.uint16, // Platform-specific encoding identifier\n  table: new r.Pointer(r.uint32, CmapSubtable, { type: 'parent', lazy: true })\n});\n\n// character to glyph mapping\nvar cmap = new r.Struct({\n  version: r.uint16,\n  numSubtables: r.uint16,\n  tables: new r.Array(CmapEntry, 'numSubtables')\n});\n\n// font header\nvar head = new r.Struct({\n  version: r.int32, // 0x00010000 (version 1.0)\n  revision: r.int32, // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber: r.uint32, // set to 0x5F0F3CF5\n  flags: r.uint16,\n  unitsPerEm: r.uint16, // range from 64 to 16384\n  created: new r.Array(r.int32, 2),\n  modified: new r.Array(r.int32, 2),\n  xMin: r.int16, // for all glyph bounding boxes\n  yMin: r.int16, // for all glyph bounding boxes\n  xMax: r.int16, // for all glyph bounding boxes\n  yMax: r.int16, // for all glyph bounding boxes\n  macStyle: new r.Bitfield(r.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: r.uint16, // smallest readable size in pixels\n  fontDirectionHint: r.int16,\n  indexToLocFormat: r.int16, // 0 for short offsets, 1 for long\n  glyphDataFormat: r.int16 // 0 for current format\n});\n\n// horizontal header\nvar hhea = new r.Struct({\n  version: r.int32,\n  ascent: r.int16, // Distance from baseline of highest ascender\n  descent: r.int16, // Distance from baseline of lowest descender\n  lineGap: r.int16, // Typographic line gap\n  advanceWidthMax: r.uint16, // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing: r.int16, // Maximum advance width value in 'hmtx' table\n  minRightSideBearing: r.int16, // Minimum right sidebearing value\n  xMaxExtent: r.int16,\n  caretSlopeRise: r.int16, // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun: r.int16, // 0 for vertical\n  caretOffset: r.int16, // Set to 0 for non-slanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16, // 0 for current format\n  numberOfMetrics: r.uint16 // Number of advance widths in 'hmtx' table\n});\n\nvar HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\n\nvar hmtx = new r.Struct({\n  metrics: new r.LazyArray(HmtxEntry, function (t) {\n    return t.parent.hhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics;\n  })\n});\n\n// maxiumum profile\nvar maxp = new r.Struct({\n  version: r.int32,\n  numGlyphs: r.uint16, // The number of glyphs in the font\n  maxPoints: r.uint16, // Maximum points in a non-composite glyph\n  maxContours: r.uint16, // Maximum contours in a non-composite glyph\n  maxComponentPoints: r.uint16, // Maximum points in a composite glyph\n  maxComponentContours: r.uint16, // Maximum contours in a composite glyph\n  maxZones: r.uint16, // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints: r.uint16, // Maximum points used in Z0\n  maxStorage: r.uint16, // Number of Storage Area locations\n  maxFunctionDefs: r.uint16, // Number of FDEFs\n  maxInstructionDefs: r.uint16, // Number of IDEFs\n  maxStackElements: r.uint16, // Maximum stack depth\n  maxSizeOfInstructions: r.uint16, // Maximum byte count for glyph instructions\n  maxComponentElements: r.uint16, // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth: r.uint16 // Maximum levels of recursion; 1 for simple components\n});\n\n/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nfunction getEncoding(platformID, encodingID) {\n  var languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n\n  return ENCODINGS[platformID][encodingID];\n}\n\n// Map of platform ids to encoding ids.\nvar ENCODINGS = [\n// unicode\n['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n\n// macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],\n\n// ISO (deprecated)\n['ascii'],\n\n// windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nvar MAC_LANGUAGE_ENCODINGS = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit', // Unsupported by iconv-lite\n  146: 'macgaelic' // Unsupported by iconv-lite\n};\n\n// Map of platform ids to BCP-47 language codes.\nvar LANGUAGES = [\n// unicode\n[], { // macintosh\n  0: 'en', 30: 'fo', 60: 'ks', 90: 'rw',\n  1: 'fr', 31: 'fa', 61: 'ku', 91: 'rn',\n  2: 'de', 32: 'ru', 62: 'sd', 92: 'ny',\n  3: 'it', 33: 'zh', 63: 'bo', 93: 'mg',\n  4: 'nl', 34: 'nl-BE', 64: 'ne', 94: 'eo',\n  5: 'sv', 35: 'ga', 65: 'sa', 128: 'cy',\n  6: 'es', 36: 'sq', 66: 'mr', 129: 'eu',\n  7: 'da', 37: 'ro', 67: 'bn', 130: 'ca',\n  8: 'pt', 38: 'cz', 68: 'as', 131: 'la',\n  9: 'no', 39: 'sk', 69: 'gu', 132: 'qu',\n  10: 'he', 40: 'si', 70: 'pa', 133: 'gn',\n  11: 'ja', 41: 'yi', 71: 'or', 134: 'ay',\n  12: 'ar', 42: 'sr', 72: 'ml', 135: 'tt',\n  13: 'fi', 43: 'mk', 73: 'kn', 136: 'ug',\n  14: 'el', 44: 'bg', 74: 'ta', 137: 'dz',\n  15: 'is', 45: 'uk', 75: 'te', 138: 'jv',\n  16: 'mt', 46: 'be', 76: 'si', 139: 'su',\n  17: 'tr', 47: 'uz', 77: 'my', 140: 'gl',\n  18: 'hr', 48: 'kk', 78: 'km', 141: 'af',\n  19: 'zh-Hant', 49: 'az-Cyrl', 79: 'lo', 142: 'br',\n  20: 'ur', 50: 'az-Arab', 80: 'vi', 143: 'iu',\n  21: 'hi', 51: 'hy', 81: 'id', 144: 'gd',\n  22: 'th', 52: 'ka', 82: 'tl', 145: 'gv',\n  23: 'ko', 53: 'mo', 83: 'ms', 146: 'ga',\n  24: 'lt', 54: 'ky', 84: 'ms-Arab', 147: 'to',\n  25: 'pl', 55: 'tg', 85: 'am', 148: 'el-polyton',\n  26: 'hu', 56: 'tk', 86: 'ti', 149: 'kl',\n  27: 'es', 57: 'mn-CN', 87: 'om', 150: 'az',\n  28: 'lv', 58: 'mn', 88: 'so', 151: 'nn',\n  29: 'se', 59: 'ps', 89: 'sw'\n},\n\n// ISO (deprecated)\n[], { // windows                                        \n  0x0436: 'af', 0x4009: 'en-IN', 0x0487: 'rw', 0x0432: 'tn',\n  0x041C: 'sq', 0x1809: 'en-IE', 0x0441: 'sw', 0x045B: 'si',\n  0x0484: 'gsw', 0x2009: 'en-JM', 0x0457: 'kok', 0x041B: 'sk',\n  0x045E: 'am', 0x4409: 'en-MY', 0x0412: 'ko', 0x0424: 'sl',\n  0x1401: 'ar-DZ', 0x1409: 'en-NZ', 0x0440: 'ky', 0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH', 0x3409: 'en-PH', 0x0454: 'lo', 0x400A: 'es-BO',\n  0x0C01: 'ar', 0x4809: 'en-SG', 0x0426: 'lv', 0x340A: 'es-CL',\n  0x0801: 'ar-IQ', 0x1C09: 'en-ZA', 0x0427: 'lt', 0x240A: 'es-CO',\n  0x2C01: 'ar-JO', 0x2C09: 'en-TT', 0x082E: 'dsb', 0x140A: 'es-CR',\n  0x3401: 'ar-KW', 0x0809: 'en-GB', 0x046E: 'lb', 0x1C0A: 'es-DO',\n  0x3001: 'ar-LB', 0x0409: 'en', 0x042F: 'mk', 0x300A: 'es-EC',\n  0x1001: 'ar-LY', 0x3009: 'en-ZW', 0x083E: 'ms-BN', 0x440A: 'es-SV',\n  0x1801: 'ary', 0x0425: 'et', 0x043E: 'ms', 0x100A: 'es-GT',\n  0x2001: 'ar-OM', 0x0438: 'fo', 0x044C: 'ml', 0x480A: 'es-HN',\n  0x4001: 'ar-QA', 0x0464: 'fil', 0x043A: 'mt', 0x080A: 'es-MX',\n  0x0401: 'ar-SA', 0x040B: 'fi', 0x0481: 'mi', 0x4C0A: 'es-NI',\n  0x2801: 'ar-SY', 0x080C: 'fr-BE', 0x047A: 'arn', 0x180A: 'es-PA',\n  0x1C01: 'aeb', 0x0C0C: 'fr-CA', 0x044E: 'mr', 0x3C0A: 'es-PY',\n  0x3801: 'ar-AE', 0x040C: 'fr', 0x047C: 'moh', 0x280A: 'es-PE',\n  0x2401: 'ar-YE', 0x140C: 'fr-LU', 0x0450: 'mn', 0x500A: 'es-PR',\n  0x042B: 'hy', 0x180C: 'fr-MC', 0x0850: 'mn-CN', 0x0C0A: 'es',\n  0x044D: 'as', 0x100C: 'fr-CH', 0x0461: 'ne', 0x040A: 'es',\n  0x082C: 'az-Cyrl', 0x0462: 'fy', 0x0414: 'nb', 0x540A: 'es-US',\n  0x042C: 'az', 0x0456: 'gl', 0x0814: 'nn', 0x380A: 'es-UY',\n  0x046D: 'ba', 0x0437: 'ka', 0x0482: 'oc', 0x200A: 'es-VE',\n  0x042D: 'eu', 0x0C07: 'de-AT', 0x0448: 'or', 0x081D: 'sv-FI',\n  0x0423: 'be', 0x0407: 'de', 0x0463: 'ps', 0x041D: 'sv',\n  0x0845: 'bn', 0x1407: 'de-LI', 0x0415: 'pl', 0x045A: 'syr',\n  0x0445: 'bn-IN', 0x1007: 'de-LU', 0x0416: 'pt', 0x0428: 'tg',\n  0x201A: 'bs-Cyrl', 0x0807: 'de-CH', 0x0816: 'pt-PT', 0x085F: 'tzm',\n  0x141A: 'bs', 0x0408: 'el', 0x0446: 'pa', 0x0449: 'ta',\n  0x047E: 'br', 0x046F: 'kl', 0x046B: 'qu-BO', 0x0444: 'tt',\n  0x0402: 'bg', 0x0447: 'gu', 0x086B: 'qu-EC', 0x044A: 'te',\n  0x0403: 'ca', 0x0468: 'ha', 0x0C6B: 'qu', 0x041E: 'th',\n  0x0C04: 'zh-HK', 0x040D: 'he', 0x0418: 'ro', 0x0451: 'bo',\n  0x1404: 'zh-MO', 0x0439: 'hi', 0x0417: 'rm', 0x041F: 'tr',\n  0x0804: 'zh', 0x040E: 'hu', 0x0419: 'ru', 0x0442: 'tk',\n  0x1004: 'zh-SG', 0x040F: 'is', 0x243B: 'smn', 0x0480: 'ug',\n  0x0404: 'zh-TW', 0x0470: 'ig', 0x103B: 'smj-NO', 0x0422: 'uk',\n  0x0483: 'co', 0x0421: 'id', 0x143B: 'smj', 0x042E: 'hsb',\n  0x041A: 'hr', 0x045D: 'iu', 0x0C3B: 'se-FI', 0x0420: 'ur',\n  0x101A: 'hr-BA', 0x085D: 'iu-Latn', 0x043B: 'se', 0x0843: 'uz-Cyrl',\n  0x0405: 'cs', 0x083C: 'ga', 0x083B: 'se-SE', 0x0443: 'uz',\n  0x0406: 'da', 0x0434: 'xh', 0x203B: 'sms', 0x042A: 'vi',\n  0x048C: 'prs', 0x0435: 'zu', 0x183B: 'sma-NO', 0x0452: 'cy',\n  0x0465: 'dv', 0x0410: 'it', 0x1C3B: 'sms', 0x0488: 'wo',\n  0x0813: 'nl-BE', 0x0810: 'it-CH', 0x044F: 'sa', 0x0485: 'sah',\n  0x0413: 'nl', 0x0411: 'ja', 0x1C1A: 'sr-Cyrl-BA', 0x0478: 'ii',\n  0x0C09: 'en-AU', 0x044B: 'kn', 0x0C1A: 'sr', 0x046A: 'yo',\n  0x2809: 'en-BZ', 0x043F: 'kk', 0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA', 0x0453: 'km', 0x081A: 'sr-Latn',\n  0x2409: 'en-029', 0x0486: 'quc', 0x046C: 'nso'\n}];\n\nvar NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID: r.uint16,\n  length: r.uint16,\n  string: new r.Pointer(r.uint16, new r.String('length', function (t) {\n    return getEncoding(t.platformID, t.encodingID, t.languageID);\n  }), { type: 'parent', relativeTo: 'parent.stringOffset', allowNull: false })\n});\n\nvar LangTagRecord = new r.Struct({\n  length: r.uint16,\n  tag: new r.Pointer(r.uint16, new r.String('length', 'utf16be'), { type: 'parent', relativeTo: 'stringOffset' })\n});\n\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count: r.uint16,\n    stringOffset: r.uint16,\n    records: new r.Array(NameRecord, 'count'),\n    langTagCount: r.uint16,\n    langTags: new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\n\nvar NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, // reserved\n'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\n\nNameTable.process = function (stream) {\n  var records = {};\n  for (var _iterator = this.records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var record = _ref;\n\n    // find out what language this is for\n    var language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    var key = record.nameID >= 256 ? 'fontFeatures' : NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    var obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n\n  var records = [];\n  for (var key in this.records) {\n    var val = this.records[key];\n    if (key === 'fontFeatures') continue;\n\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth: r.int16, // average weighted advance width of lower case letters and space\n    usWeightClass: r.uint16, // visual weight of stroke in glyphs\n    usWidthClass: r.uint16, // relative change from the normal aspect ratio (width to height ratio)\n    fsType: new r.Bitfield(r.uint16, [// Indicates font embedding licensing rights\n    null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: r.int16, // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize: r.int16, // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset: r.int16, // recommended horizontal offset for subscripts\n    ySubscriptYOffset: r.int16, // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize: r.int16, // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize: r.int16, // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset: r.int16, // recommended horizontal offset for superscripts\n    ySuperscriptYOffset: r.int16, // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize: r.int16, // width of the strikeout stroke\n    yStrikeoutPosition: r.int16, // position of the strikeout stroke relative to the baseline\n    sFamilyClass: r.int16, // classification of font-family design\n    panose: new r.Array(r.uint8, 10), // describe the visual characteristics of a given typeface\n    ulCharRange: new r.Array(r.uint32, 4),\n    vendorID: new r.String(4), // four character identifier for the font vendor\n    fsSelection: new r.Bitfield(r.uint16, [// bit field containing information about the font\n    'italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: r.uint16, // The minimum Unicode index in this font\n    usLastCharIndex: r.uint16 // The maximum Unicode index in this font\n  },\n\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n\n  1: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2)\n  },\n\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16\n  },\n\n  5: {\n    typoAscender: r.int16,\n    typoDescender: r.int16,\n    typoLineGap: r.int16,\n    winAscent: r.uint16,\n    winDescent: r.uint16,\n    codePageRange: new r.Array(r.uint32, 2),\n\n    xHeight: r.int16,\n    capHeight: r.int16,\n    defaultChar: r.uint16,\n    breakChar: r.uint16,\n    maxContent: r.uint16,\n\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\n\nvar versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\n// PostScript information\nvar post = new r.VersionedStruct(r.fixed32, {\n  header: { // these fields exist at the top of all versions\n    italicAngle: r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition: r.int16, // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16, // Suggested values for the underline thickness\n    isFixedPitch: r.uint32, // Whether the font is monospaced\n    minMemType42: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42: r.uint32, // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1: r.uint32, // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1: r.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n\n  1: {}, // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names: new r.Array(new r.String(r.uint8))\n  },\n\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets: new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n\n  3: {}, // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, function (t) {\n      return t.parent.maxp.numGlyphs;\n    })\n  }\n});\n\n// An array of predefined values accessible by instructions\nvar cvt = new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nvar fpgm = new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n\nvar loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n  }\n};\n\nloca.preEncode = function () {\n  if (this.version === 0) {\n    for (var i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n  }\n};\n\n// Set of instructions executed whenever the point size or font transformation change\nvar prep = new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n\n// only used for encoding\nvar glyf = new r.Array(new r.Buffer());\n\nvar CFFIndex = function () {\n  function CFFIndex(type) {\n    _classCallCheck(this, CFFIndex);\n\n    this.type = type;\n  }\n\n  CFFIndex.prototype.getCFFVersion = function getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  };\n\n  CFFIndex.prototype.decode = function decode(stream, parent) {\n    var version = this.getCFFVersion(parent);\n    var count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    var offSize = stream.readUInt8();\n    var offsetType = void 0;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset size in CFFIndex: \" + offSize + \" \" + stream.pos);\n    }\n\n    var ret = [];\n    var startPos = stream.pos + (count + 1) * offSize - 1;\n\n    var start = offsetType.decode(stream);\n    for (var i = 0; i < count; i++) {\n      var end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        var pos = stream.pos;\n        stream.pos = startPos + start;\n\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  };\n\n  CFFIndex.prototype.size = function size(arr, parent) {\n    var size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var offset = 1;\n    for (var i = 0; i < arr.length; i++) {\n      var item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n\n    return size;\n  };\n\n  CFFIndex.prototype.encode = function encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n\n    var type = this.type || new r.Buffer();\n\n    // find maximum offset to detminine offset type\n    var sizes = [];\n    var offset = 1;\n    for (var _iterator = arr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var item = _ref;\n\n      var s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    var offsetType = void 0;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (var _iterator2 = sizes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var size = _ref2;\n\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var _item = _ref3;\n\n      type.encode(stream, _item, parent);\n    }\n\n    return;\n  };\n\n  return CFFIndex;\n}();\n\nvar FLOAT_EOF = 0xf;\nvar FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n\nvar FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nvar CFFOperand = function () {\n  function CFFOperand() {\n    _classCallCheck(this, CFFOperand);\n  }\n\n  CFFOperand.decode = function decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      var str = '';\n      while (true) {\n        var b = stream.readUInt8();\n\n        var n1 = b >> 4;\n        if (n1 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n1];\n\n        var n2 = b & 15;\n        if (n2 === FLOAT_EOF) {\n          break;\n        }\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  };\n\n  CFFOperand.size = function size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) {\n      // floating point\n      var str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n    } else {\n      return 5;\n    }\n  };\n\n  CFFOperand.encode = function encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    var val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      // floating point\n      stream.writeUInt8(30);\n\n      var str = '' + val;\n      for (var i = 0; i < str.length; i += 2) {\n        var c1 = str[i];\n        var n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          var c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8(FLOAT_EOF << 4);\n      }\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  };\n\n  return CFFOperand;\n}();\n\nvar CFFDict = function () {\n  function CFFDict() {\n    var ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, CFFDict);\n\n    this.ops = ops;\n    this.fields = {};\n    for (var _iterator = ops, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var field = _ref;\n\n      var key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  CFFDict.prototype.decodeOperands = function decodeOperands(type, stream, ret, operands) {\n    var _this = this;\n\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this.decodeOperands(type[i], stream, ret, [op]);\n      });\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  };\n\n  CFFDict.prototype.encodeOperands = function encodeOperands(type, stream, ctx, operands) {\n    var _this2 = this;\n\n    if (Array.isArray(type)) {\n      return operands.map(function (op, i) {\n        return _this2.encodeOperands(type[i], stream, ctx, op)[0];\n      });\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  };\n\n  CFFDict.prototype.decode = function decode(stream, parent) {\n    var end = stream.pos + parent.length;\n    var ret = {};\n    var operands = [];\n\n    // define hidden properties\n    _Object$defineProperties(ret, {\n      parent: { value: parent },\n      _startOffset: { value: stream.pos }\n    });\n\n    // fill in defaults\n    for (var key in this.fields) {\n      var field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      var b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = b << 8 | stream.readUInt8();\n        }\n\n        var _field = this.fields[b];\n        if (!_field) {\n          throw new Error('Unknown operator ' + b);\n        }\n\n        var val = this.decodeOperands(_field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof restructure_src_utils.PropertyDescriptor) {\n            _Object$defineProperty(ret, _field[1], val);\n          } else {\n            ret[_field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  };\n\n  CFFDict.prototype.size = function size(dict, parent) {\n    var includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n\n    var len = 0;\n\n    for (var k in this.fields) {\n      var field = this.fields[k];\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], null, ctx, val);\n      for (var _iterator2 = operands, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var op = _ref2;\n\n        len += CFFOperand.size(op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  };\n\n  CFFDict.prototype.encode = function encode(stream, dict, parent) {\n    var ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (var _iterator3 = this.ops, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var field = _ref3;\n\n      var val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      var operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (var _iterator4 = operands, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n        var _ref4;\n\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref4 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref4 = _i4.value;\n        }\n\n        var op = _ref4;\n\n        CFFOperand.encode(stream, op);\n      }\n\n      var key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (var _iterator5 = key, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var _op = _ref5;\n\n        stream.writeUInt8(_op);\n      }\n    }\n\n    var i = 0;\n    while (i < ctx.pointers.length) {\n      var ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  };\n\n  return CFFDict;\n}();\n\nvar CFFPointer = function (_r$Pointer) {\n  _inherits(CFFPointer, _r$Pointer);\n\n  function CFFPointer(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CFFPointer);\n\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    return _possibleConstructorReturn(this, _r$Pointer.call(this, null, type, options));\n  }\n\n  CFFPointer.prototype.decode = function decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: function decode() {\n        return operands[0];\n      }\n    };\n\n    return _r$Pointer.prototype.decode.call(this, stream, parent, operands);\n  };\n\n  CFFPointer.prototype.encode = function encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: function size() {\n          return 0;\n        }\n      };\n\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    var ptr = null;\n    this.offsetType = {\n      encode: function encode(stream, val) {\n        return ptr = val;\n      }\n    };\n\n    _r$Pointer.prototype.encode.call(this, stream, value, ctx);\n    return [new Ptr(ptr)];\n  };\n\n  return CFFPointer;\n}(r.Pointer);\n\nvar Ptr = function () {\n  function Ptr(val) {\n    _classCallCheck(this, Ptr);\n\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  Ptr.prototype.valueOf = function valueOf() {\n    return this.val;\n  };\n\n  return Ptr;\n}();\n\nvar CFFBlendOp = function () {\n  function CFFBlendOp() {\n    _classCallCheck(this, CFFBlendOp);\n  }\n\n  CFFBlendOp.decode = function decode(stream, parent, operands) {\n    var numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  };\n\n  return CFFBlendOp;\n}();\n\nvar CFFPrivateDict = new CFFDict([\n// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', CFFBlendOp, null], [19, 'Subrs', new CFFPointer(new CFFIndex(), { type: 'local' }), null]]);\n\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nvar standardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\n\nvar StandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\n\nvar ExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar ISOAdobeCharset = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\n\nvar ExpertCharset = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar ExpertSubsetCharset = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];\n\n//########################\n// Scripts and Languages #\n//########################\n\nvar LangSysTable = new r.Struct({\n  reserved: new r.Reserved(r.uint16),\n  reqFeatureIndex: r.uint16,\n  featureCount: r.uint16,\n  featureIndexes: new r.Array(r.uint16, 'featureCount')\n});\n\nvar LangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  langSys: new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })\n});\n\nvar Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count: r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\n\nvar ScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, Script, { type: 'parent' })\n});\n\nvar ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nvar Feature = new r.Struct({\n  featureParams: r.uint16, // pointer\n  lookupCount: r.uint16,\n  lookupListIndexes: new r.Array(r.uint16, 'lookupCount')\n});\n\nvar FeatureRecord = new r.Struct({\n  tag: new r.String(4),\n  feature: new r.Pointer(r.uint16, Feature, { type: 'parent' })\n});\n\nvar FeatureList = new r.Array(FeatureRecord, r.uint16);\n\nvar LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\n\nfunction LookupList(SubTable) {\n  var Lookup = new r.Struct({\n    lookupType: r.uint16,\n    flags: LookupFlags,\n    subTableCount: r.uint16,\n    subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new r.Optional(r.uint16, function (t) {\n      return t.flags.flags.useMarkFilteringSet;\n    })\n  });\n\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nvar RangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  startCoverageIndex: r.uint16\n});\n\nvar Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount: r.uint16,\n    glyphs: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nvar ClassRangeRecord = new r.Struct({\n  start: r.uint16,\n  end: r.uint16,\n  class: r.uint16\n});\n\nvar ClassDef = new r.VersionedStruct(r.uint16, {\n  1: { // Class array\n    startGlyph: r.uint16,\n    glyphCount: r.uint16,\n    classValueArray: new r.Array(r.uint16, 'glyphCount')\n  },\n  2: { // Class ranges\n    classRangeCount: r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nvar Device = new r.Struct({\n  a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16, // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nvar LookupRecord = new r.Struct({\n  sequenceIndex: r.uint16,\n  lookupListIndex: r.uint16\n});\n\nvar Rule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\n\nvar ClassRule = new r.Struct({\n  glyphCount: r.uint16,\n  lookupCount: r.uint16,\n  classes: new r.Array(r.uint16, function (t) {\n    return t.glyphCount - 1;\n  }),\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\n\nvar Context = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    ruleSetCount: r.uint16,\n    ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: { // Class-based context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    classDef: new r.Pointer(r.uint16, ClassDef),\n    classSetCnt: r.uint16,\n    classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: r.uint16,\n    lookupCount: r.uint16,\n    coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nvar ChainRule = new r.Struct({\n  backtrackGlyphCount: r.uint16,\n  backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: r.uint16,\n  input: new r.Array(r.uint16, function (t) {\n    return t.inputGlyphCount - 1;\n  }),\n  lookaheadGlyphCount: r.uint16,\n  lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount: r.uint16,\n  lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n});\n\nvar ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\n\nvar ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context glyph substitution\n    coverage: new r.Pointer(r.uint16, Coverage),\n    chainCount: r.uint16,\n    chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  2: { // Class-based chaining context\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef: new r.Pointer(r.uint16, ClassDef),\n    inputClassDef: new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),\n    chainCount: r.uint16,\n    chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  3: { // Coverage-based chaining context\n    backtrackGlyphCount: r.uint16,\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount: r.uint16,\n    inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount: r.uint16,\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\nvar _;\n\n/*******************\n * Variation Store *\n *******************/\n\nvar F2DOT14 = new r.Fixed(16, 'BE', 14);\nvar RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\n\nvar VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\n\nvar DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, function (t) {\n    return t.parent.shortDeltaCount;\n  }),\n  regionDeltas: new r.Array(r.int8, function (t) {\n    return t.parent.regionIndexCount - t.parent.shortDeltaCount;\n  }),\n  deltas: function deltas(t) {\n    return t.shortDeltas.concat(t.regionDeltas);\n  }\n});\n\nvar ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\n\nvar ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nvar ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: (_ = {\n    axisIndex: r.uint16\n  }, _['axisIndex'] = r.uint16, _.filterRangeMinValue = F2DOT14, _.filterRangeMaxValue = F2DOT14, _)\n});\n\nvar ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\n\nvar FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, { type: 'parent' })\n});\n\nvar FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\n\nvar FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, { type: 'parent' }),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, { type: 'parent' })\n});\n\nvar FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\n\nvar PredefinedOp = function () {\n  function PredefinedOp(predefinedOps, type) {\n    _classCallCheck(this, PredefinedOp);\n\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  PredefinedOp.prototype.decode = function decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  };\n\n  PredefinedOp.prototype.size = function size(value, ctx) {\n    return this.type.size(value, ctx);\n  };\n\n  PredefinedOp.prototype.encode = function encode(stream, value, ctx) {\n    var index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  };\n\n  return PredefinedOp;\n}();\n\nvar CFFEncodingVersion = function (_r$Number) {\n  _inherits(CFFEncodingVersion, _r$Number);\n\n  function CFFEncodingVersion() {\n    _classCallCheck(this, CFFEncodingVersion);\n\n    return _possibleConstructorReturn(this, _r$Number.call(this, 'UInt8'));\n  }\n\n  CFFEncodingVersion.prototype.decode = function decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  };\n\n  return CFFEncodingVersion;\n}(r.Number);\n\nvar Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\n\nvar Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\n\nvar CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n\n    // TODO: supplement?\n  } });\n\nvar CFFEncoding = new PredefinedOp([StandardEncoding, ExpertEncoding], new CFFPointer(CFFCustomEncoding, { lazy: true }));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\n\nvar RangeArray = function (_r$Array) {\n  _inherits(RangeArray, _r$Array);\n\n  function RangeArray() {\n    _classCallCheck(this, RangeArray);\n\n    return _possibleConstructorReturn(this, _r$Array.apply(this, arguments));\n  }\n\n  RangeArray.prototype.decode = function decode(stream, parent) {\n    var length = restructure_src_utils.resolveLength(this.length, stream, parent);\n    var count = 0;\n    var res = [];\n    while (count < length) {\n      var range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  };\n\n  return RangeArray;\n}(r.Array);\n\nvar CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n\n  1: {\n    ranges: new RangeArray(Range1, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  },\n\n  2: {\n    ranges: new RangeArray(Range2, function (t) {\n      return t.parent.CharStrings.length - 1;\n    })\n  }\n});\n\nvar CFFCharset = new PredefinedOp([ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset], new CFFPointer(CFFCustomCharset, { lazy: true }));\n\nvar FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\n\nvar FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\n\nvar FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, function (t) {\n      return t.parent.CharStrings.length;\n    })\n  },\n\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\n\nvar ptr = new CFFPointer(CFFPrivateDict);\n\nvar CFFPrivateOp = function () {\n  function CFFPrivateOp() {\n    _classCallCheck(this, CFFPrivateOp);\n  }\n\n  CFFPrivateOp.prototype.decode = function decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  };\n\n  CFFPrivateOp.prototype.size = function size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  };\n\n  CFFPrivateOp.prototype.encode = function encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  };\n\n  return CFFPrivateOp;\n}();\n\nvar FontDict = new CFFDict([\n// key       name                   type(s)                                 default\n[18, 'Private', new CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null]]);\n\nvar CFFTopDict = new CFFDict([\n// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', CFFCharset, ISOAdobeCharset], [16, 'Encoding', CFFEncoding, StandardEncoding], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [18, 'Private', new CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],\n\n// CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\n\nvar VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n});\n\nvar CFF2TopDict = new CFFDict([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new CFFPointer(new CFFIndex()), null], [[12, 37], 'FDSelect', new CFFPointer(FDSelect), null], [[12, 36], 'FDArray', new CFFPointer(new CFFIndex(FontDict)), null], [24, 'vstore', new CFFPointer(VariationStore), null], [25, 'maxstack', 'number', 193]]);\n\nvar CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize: r.uint8,\n    offSize: r.uint8,\n    nameIndex: new CFFIndex(new r.String('length')),\n    topDictIndex: new CFFIndex(CFFTopDict),\n    stringIndex: new CFFIndex(new r.String('length')),\n    globalSubrIndex: new CFFIndex()\n  },\n\n  2: {\n    hdrSize: r.uint8,\n    length: r.uint16,\n    topDict: CFF2TopDict,\n    globalSubrIndex: new CFFIndex()\n  }\n});\n\nvar CFFFont = function () {\n  function CFFFont(stream) {\n    _classCallCheck(this, CFFFont);\n\n    this.stream = stream;\n    this.decode();\n  }\n\n  CFFFont.decode = function decode(stream) {\n    return new CFFFont(stream);\n  };\n\n  CFFFont.prototype.decode = function decode() {\n    var start = this.stream.pos;\n    var top = CFFTop.decode(this.stream);\n    for (var key in top) {\n      var val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  };\n\n  CFFFont.prototype.string = function string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  };\n\n  CFFFont.prototype.getCharString = function getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  };\n\n  CFFFont.prototype.getGlyphName = function getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    var charset = this.topDict.charset;\n\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (var i = 0; i < charset.ranges.length; i++) {\n          var range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n\n    return null;\n  };\n\n  CFFFont.prototype.fdForGlyph = function fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        var ranges = this.topDict.FDSelect.ranges;\n\n        var low = 0;\n        var high = ranges.length - 1;\n\n        while (low <= high) {\n          var mid = low + high >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid > ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error('Unknown FDSelect version: ' + this.topDict.FDSelect.version);\n    }\n  };\n\n  CFFFont.prototype.privateDictForGlyph = function privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      var fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  };\n\n  _createClass(CFFFont, [{\n    key: 'postscriptName',\n    get: function get() {\n      if (this.version < 2) {\n        return this.nameIndex[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'fullName',\n    get: function get() {\n      return this.string(this.topDict.FullName);\n    }\n  }, {\n    key: 'familyName',\n    get: function get() {\n      return this.string(this.topDict.FamilyName);\n    }\n  }]);\n\n  return CFFFont;\n}();\n\nvar VerticalOrigin = new r.Struct({\n  glyphIndex: r.uint16,\n  vertOriginY: r.int16\n});\n\nvar VORG = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  defaultVertOriginY: r.int16,\n  numVertOriginYMetrics: r.uint16,\n  metrics: new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n\nvar BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\n\nvar SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\n\nvar EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nvar ByteAligned = function ByteAligned() {\n  _classCallCheck(this, ByteAligned);\n};\n\nvar BitAligned = function BitAligned() {\n  _classCallCheck(this, BitAligned);\n};\n\nvar glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\nvar SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\n\nvar CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\n\nvar IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n\n  1: {\n    offsetArray: new r.Array(r.uint32, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n\n  3: {\n    offsetArray: new r.Array(r.uint16, function (t) {\n      return t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1;\n    })\n  },\n\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, function (t) {\n      return t.numGlyphs + 1;\n    })\n  },\n\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\n\nvar IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\n\nvar BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\n\nvar EBLC = new r.Struct({\n  version: r.uint32, // 0x00020000\n  numSizes: r.uint32,\n  sizes: new r.Array(BitmapSizeTable, 'numSizes')\n});\n\nvar ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), function (t) {\n    return t.parent.parent.maxp.numGlyphs + 1;\n  })\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nvar sbix = new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n\nvar LayerRecord = new r.Struct({\n  gid: r.uint16, // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\n\nvar BaseGlyphRecord = new r.Struct({\n  gid: r.uint16, // Glyph ID of reference glyph. This glyph is for reference only\n  // and is not rendered for color.\n  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\n\nvar COLR = new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),\n  numLayerRecords: r.uint16\n});\n\nvar ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\n\nvar CPAL = new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n\nvar BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16 // X or Y value, in design units\n  },\n\n  2: { // Design units plus contour point\n    coordinate: r.int16, // X or Y value, in design units\n    referenceGlyph: r.uint16, // GlyphID of control glyph\n    baseCoordPoint: r.uint16 // Index of contour point on the referenceGlyph\n  },\n\n  3: { // Design units plus Device table\n    coordinate: r.int16, // X or Y value, in design units\n    deviceTable: new r.Pointer(r.uint16, Device) // Device table for X or Y value\n  }\n});\n\nvar BaseValues = new r.Struct({\n  defaultIndex: r.uint16, // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords: new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\n\nvar FeatMinMaxRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }), // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord, { type: 'parent' }) // May be NULL\n});\n\nvar MinMax = new r.Struct({\n  minCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL\n  maxCoord: new r.Pointer(r.uint16, BaseCoord), // May be NULL\n  featMinMaxCount: r.uint16, // May be 0\n  featMinMaxRecords: new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\n\nvar BaseLangSysRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, { type: 'parent' })\n});\n\nvar BaseScript = new r.Struct({\n  baseValues: new r.Pointer(r.uint16, BaseValues), // May be NULL\n  defaultMinMax: new r.Pointer(r.uint16, MinMax), // May be NULL\n  baseLangSysCount: r.uint16, // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\n\nvar BaseScriptRecord = new r.Struct({\n  tag: new r.String(4), // 4-byte script identification tag\n  script: new r.Pointer(r.uint16, BaseScript, { type: 'parent' })\n});\n\nvar BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nvar BaseTagList = new r.Array(new r.String(4), r.uint16);\n\nvar Axis = new r.Struct({\n  baseTagList: new r.Pointer(r.uint16, BaseTagList), // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\n\nvar BASE = new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis: new r.Pointer(r.uint16, Axis), // May be NULL\n    vertAxis: new r.Pointer(r.uint16, Axis) // May be NULL\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar AttachPoint = new r.Array(r.uint16, r.uint16);\nvar AttachList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  glyphCount: r.uint16,\n  attachPoints: new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\n\nvar CaretValue = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16\n  },\n\n  2: { // Contour point\n    caretValuePoint: r.uint16\n  },\n\n  3: { // Design units plus Device table\n    coordinate: r.int16,\n    deviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\n\nvar LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\n\nvar LigCaretList = new r.Struct({\n  coverage: new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount: r.uint16,\n  ligGlyphs: new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\n\nvar MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount: r.uint16,\n  coverage: new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\n\nvar GDEF = new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef: new r.Pointer(r.uint16, ClassDef),\n    attachList: new r.Pointer(r.uint16, AttachList),\n    ligCaretList: new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n\nvar ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\n\nvar types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance: r.int16,\n  yAdvance: r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: 'rel' })\n};\n\nvar ValueRecord = function () {\n  function ValueRecord() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';\n\n    _classCallCheck(this, ValueRecord);\n\n    this.key = key;\n  }\n\n  ValueRecord.prototype.buildStruct = function buildStruct(parent) {\n    var struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n\n    var fields = {};\n    fields.rel = function () {\n      return struct._startOffset;\n    };\n\n    var format = struct[this.key];\n    for (var key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  };\n\n  ValueRecord.prototype.size = function size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  };\n\n  ValueRecord.prototype.decode = function decode(stream, parent) {\n    var res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  };\n\n  return ValueRecord;\n}();\n\nvar PairValueRecord = new r.Struct({\n  secondGlyph: r.uint16,\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nvar PairSet = new r.Array(PairValueRecord, r.uint16);\n\nvar Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nvar Anchor = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    xCoordinate: r.int16,\n    yCoordinate: r.int16\n  },\n\n  2: { // Design units plus contour point\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    anchorPoint: r.uint16\n  },\n\n  3: { // Design units plus Device tables\n    xCoordinate: r.int16,\n    yCoordinate: r.int16,\n    xDeviceTable: new r.Pointer(r.uint16, Device),\n    yDeviceTable: new r.Pointer(r.uint16, Device)\n  }\n});\n\nvar EntryExitRecord = new r.Struct({\n  entryAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' }),\n  exitAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })\n});\n\nvar MarkRecord = new r.Struct({\n  class: r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, { type: 'parent' })\n});\n\nvar MarkArray = new r.Array(MarkRecord, r.uint16);\n\nvar BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.classCount;\n});\nvar BaseArray = new r.Array(BaseRecord, r.uint16);\n\nvar ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function (t) {\n  return t.parent.parent.classCount;\n});\nvar LigatureAttach = new r.Array(ComponentRecord, r.uint16);\nvar LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\n\nvar GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Adjustment\n    1: { // Single positioning value\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      value: new ValueRecord()\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat: ValueFormat,\n      valueCount: r.uint16,\n      values: new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n\n  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning\n    1: { // Adjustments for glyph pairs\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      pairSetCount: r.uint16,\n      pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n\n    2: { // Class pair adjustment\n      coverage: new r.Pointer(r.uint16, Coverage),\n      valueFormat1: ValueFormat,\n      valueFormat2: ValueFormat,\n      classDef1: new r.Pointer(r.uint16, ClassDef),\n      classDef2: new r.Pointer(r.uint16, ClassDef),\n      class1Count: r.uint16,\n      class2Count: r.uint16,\n      classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n\n  3: { // Cursive Attachment Positioning\n    format: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    entryExitCount: r.uint16,\n    entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n\n  4: { // MarkToBase Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    baseCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    baseArray: new r.Pointer(r.uint16, BaseArray)\n  },\n\n  5: { // MarkToLigature Attachment Positioning\n    format: r.uint16,\n    markCoverage: new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    markArray: new r.Pointer(r.uint16, MarkArray),\n    ligatureArray: new r.Pointer(r.uint16, LigatureArray)\n  },\n\n  6: { // MarkToMark Attachment Positioning\n    format: r.uint16,\n    mark1Coverage: new r.Pointer(r.uint16, Coverage),\n    mark2Coverage: new r.Pointer(r.uint16, Coverage),\n    classCount: r.uint16,\n    mark1Array: new r.Pointer(r.uint16, MarkArray),\n    mark2Array: new r.Pointer(r.uint16, BaseArray)\n  },\n\n  7: Context, // Contextual positioning\n  8: ChainingContext, // Chaining contextual positioning\n\n  9: { // Extension Positioning\n    posFormat: r.uint16,\n    lookupType: r.uint16, // cannot also be 9\n    extension: new r.Pointer(r.uint32, GPOSLookup)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\n\nvar GPOS = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\nvar Sequence = new r.Array(r.uint16, r.uint16);\nvar AlternateSet = Sequence;\n\nvar Ligature = new r.Struct({\n  glyph: r.uint16,\n  compCount: r.uint16,\n  components: new r.Array(r.uint16, function (t) {\n    return t.compCount - 1;\n  })\n});\n\nvar LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\n\nvar GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Substitution\n    1: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID: r.int16\n    },\n    2: {\n      coverage: new r.Pointer(r.uint16, Coverage),\n      glyphCount: r.uint16,\n      substitute: new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n\n  2: { // Multiple Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n\n  3: { // Alternate Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n\n  4: { // Ligature Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    count: r.uint16,\n    ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n\n  5: Context, // Contextual Substitution\n  6: ChainingContext, // Chaining Contextual Substitution\n\n  7: { // Extension Substitution\n    substFormat: r.uint16,\n    lookupType: r.uint16, // cannot also be 7\n    extension: new r.Pointer(r.uint32, GSUBLookup)\n  },\n\n  8: { // Reverse Chaining Contextual Single Substitution\n    substFormat: r.uint16,\n    coverage: new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: r.uint16,\n    lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount: r.uint16,\n    substitutes: new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\n\nvar GSUB = new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList: new r.Pointer(r.uint16, ScriptList),\n    featureList: new r.Pointer(r.uint16, FeatureList),\n    lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\nvar JstfGSUBModList = new r.Array(r.uint16, r.uint16);\n\nvar JstfPriority = new r.Struct({\n  shrinkageEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS: new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax: new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\n\nvar JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\n\nvar JstfLangSysRecord = new r.Struct({\n  tag: new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\n\nvar JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount: r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\n\nvar JstfScriptRecord = new r.Struct({\n  tag: new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, { type: 'parent' })\n});\n\nvar JSTF = new r.Struct({\n  version: r.uint32, // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList: new r.Array(JstfScriptRecord, 'scriptCount')\n});\n\n// TODO: add this to restructure\n\nvar VariableSizeNumber = function () {\n  function VariableSizeNumber(size) {\n    _classCallCheck(this, VariableSizeNumber);\n\n    this._size = size;\n  }\n\n  VariableSizeNumber.prototype.decode = function decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n      case 2:\n        return stream.readUInt16BE();\n      case 3:\n        return stream.readUInt24BE();\n      case 4:\n        return stream.readUInt32BE();\n    }\n  };\n\n  VariableSizeNumber.prototype.size = function size(val, parent) {\n    return restructure_src_utils.resolveLength(this._size, null, parent);\n  };\n\n  return VariableSizeNumber;\n}();\n\nvar MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(function (t) {\n    return ((t.parent.entryFormat & 0x0030) >> 4) + 1;\n  }),\n  outerIndex: function outerIndex(t) {\n    return t.entry >> (t.parent.entryFormat & 0x000F) + 1;\n  },\n  innerIndex: function innerIndex(t) {\n    return t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1;\n  }\n});\n\nvar DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\n\nvar HVAR = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n\nvar Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\n\nvar SignatureBlock = new r.Struct({\n  reserved: new r.Reserved(r.uint16, 2),\n  cbSignature: r.uint32, // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature: new r.Buffer('cbSignature')\n});\n\nvar DSIG = new r.Struct({\n  ulVersion: r.uint32, // Version number of the DSIG table (0x00000001)\n  usNumSigs: r.uint16, // Number of signatures in the table\n  usFlag: r.uint16, // Permission flags\n  signatures: new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n\nvar GaspRange = new r.Struct({\n  rangeMaxPPEM: r.uint16, // Upper limit of range, in ppem\n  rangeGaspBehavior: new r.Bitfield(r.uint16, [// Flags describing desired rasterizer behavior\n  'grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\n\nvar gasp = new r.Struct({\n  version: r.uint16, // set to 0\n  numRanges: r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\n\nvar DeviceRecord = new r.Struct({\n  pixelSize: r.uint8,\n  maximumWidth: r.uint8,\n  widths: new r.Array(r.uint8, function (t) {\n    return t.parent.parent.maxp.numGlyphs;\n  })\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nvar hdmx = new r.Struct({\n  version: r.uint16,\n  numRecords: r.int16,\n  sizeDeviceRecord: r.int32,\n  records: new r.Array(DeviceRecord, 'numRecords')\n});\n\nvar KernPair = new r.Struct({\n  left: r.uint16,\n  right: r.uint16,\n  value: r.int16\n});\n\nvar ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: function max(t) {\n    return t.offsets.length && Math.max.apply(Math, t.offsets);\n  }\n});\n\nvar Kern2Array = new r.Struct({\n  off: function off(t) {\n    return t._startOffset - t.parent.parent._startOffset;\n  },\n  len: function len(t) {\n    return ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2);\n  },\n  values: new r.LazyArray(r.int16, 'len')\n});\n\nvar KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16,\n    pairs: new r.Array(KernPair, 'nPairs')\n  },\n\n  2: {\n    rowWidth: r.uint16,\n    leftTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n    rightTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n    array: new r.Pointer(r.uint16, Kern2Array, { type: 'parent' })\n  },\n\n  3: {\n    glyphCount: r.uint16,\n    kernValueCount: r.uint8,\n    leftClassCount: r.uint8,\n    rightClassCount: r.uint8,\n    flags: r.uint8,\n    kernValue: new r.Array(r.int16, 'kernValueCount'),\n    leftClass: new r.Array(r.uint8, 'glyphCount'),\n    rightClass: new r.Array(r.uint8, 'glyphCount'),\n    kernIndex: new r.Array(r.uint8, function (t) {\n      return t.leftClassCount * t.rightClassCount;\n    })\n  }\n});\n\nvar KernTable = new r.VersionedStruct('version', {\n  0: { // Microsoft uses this format\n    subVersion: r.uint16, // Microsoft has an extra sub-table version number\n    length: r.uint16, // Length of the subtable, in bytes\n    format: r.uint8, // Format of subtable\n    coverage: new r.Bitfield(r.uint8, ['horizontal', // 1 if table has horizontal data, 0 if vertical\n    'minimum', // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n    'crossStream', // If set to 1, kerning is perpendicular to the flow of the text\n    'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  },\n  1: { // Apple uses this format\n    length: r.uint32,\n    coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', // Set if table has variation kerning values\n    'crossStream', // Set if table has cross-stream kerning values\n    'vertical' // Set if table has vertical kerning values\n    ]),\n    format: r.uint8,\n    tupleIndex: r.uint16,\n    subtable: KernSubtable,\n    padding: new r.Reserved(r.uint8, function (t) {\n      return t.length - t._currentOffset;\n    })\n  }\n});\n\nvar kern = new r.VersionedStruct(r.uint16, {\n  0: { // Microsoft Version\n    nTables: r.uint16,\n    tables: new r.Array(KernTable, 'nTables')\n  },\n\n  1: { // Apple Version\n    reserved: new r.Reserved(r.uint16), // the other half of the version number\n    nTables: r.uint32,\n    tables: new r.Array(KernTable, 'nTables')\n  }\n});\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nvar LTSH = new r.Struct({\n  version: r.uint16,\n  numGlyphs: r.uint16,\n  yPels: new r.Array(r.uint8, 'numGlyphs')\n});\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nvar PCLT = new r.Struct({\n  version: r.uint16,\n  fontNumber: r.uint32,\n  pitch: r.uint16,\n  xHeight: r.uint16,\n  style: r.uint16,\n  typeFamily: r.uint16,\n  capHeight: r.uint16,\n  symbolSet: r.uint16,\n  typeface: new r.String(16),\n  characterComplement: new r.String(8),\n  fileName: new r.String(6),\n  strokeWeight: new r.String(1),\n  widthType: new r.String(1),\n  serifStyle: r.uint8,\n  reserved: new r.Reserved(r.uint8)\n});\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nvar Ratio = new r.Struct({\n  bCharSet: r.uint8, // Character set\n  xRatio: r.uint8, // Value to use for x-Ratio\n  yStartRatio: r.uint8, // Starting y-Ratio value\n  yEndRatio: r.uint8 // Ending y-Ratio value\n});\n\nvar vTable = new r.Struct({\n  yPelHeight: r.uint16, // yPelHeight to which values apply\n  yMax: r.int16, // Maximum value (in pels) for this yPelHeight\n  yMin: r.int16 // Minimum value (in pels) for this yPelHeight\n});\n\nvar VdmxGroup = new r.Struct({\n  recs: r.uint16, // Number of height records in this group\n  startsz: r.uint8, // Starting yPelHeight\n  endsz: r.uint8, // Ending yPelHeight\n  entries: new r.Array(vTable, 'recs') // The VDMX records\n});\n\nvar VDMX = new r.Struct({\n  version: r.uint16, // Version number (0 or 1)\n  numRecs: r.uint16, // Number of VDMX groups present\n  numRatios: r.uint16, // Number of aspect ratio groupings\n  ratioRanges: new r.Array(Ratio, 'numRatios'), // Ratio ranges\n  offsets: new r.Array(r.uint16, 'numRatios'), // Offset to the VDMX group for this ratio range\n  groups: new r.Array(VdmxGroup, 'numRecs') // The actual VDMX groupings\n});\n\n// Vertical Header Table\nvar vhea = new r.Struct({\n  version: r.uint16, // Version number of the Vertical Header Table\n  ascent: r.int16, // The vertical typographic ascender for this font\n  descent: r.int16, // The vertical typographic descender for this font\n  lineGap: r.int16, // The vertical typographic line gap for this font\n  advanceHeightMax: r.int16, // The maximum advance height measurement found in the font\n  minTopSideBearing: r.int16, // The minimum top side bearing measurement found in the font\n  minBottomSideBearing: r.int16, // The minimum bottom side bearing measurement found in the font\n  yMaxExtent: r.int16,\n  caretSlopeRise: r.int16, // Caret slope (rise/run)\n  caretSlopeRun: r.int16,\n  caretOffset: r.int16, // Set value equal to 0 for nonslanted fonts\n  reserved: new r.Reserved(r.int16, 4),\n  metricDataFormat: r.int16, // Set to 0\n  numberOfMetrics: r.uint16 // Number of advance heights in the Vertical Metrics table\n});\n\nvar VmtxEntry = new r.Struct({\n  advance: r.uint16, // The advance height of the glyph\n  bearing: r.int16 // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nvar vmtx = new r.Struct({\n  metrics: new r.LazyArray(VmtxEntry, function (t) {\n    return t.parent.vhea.numberOfMetrics;\n  }),\n  bearings: new r.LazyArray(r.int16, function (t) {\n    return t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics;\n  })\n});\n\nvar shortFrac = new r.Fixed(16, 'BE', 14);\n\nvar Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\n\nvar Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\n\nvar avar = new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n\nvar UnboundedArrayAccessor = function () {\n  function UnboundedArrayAccessor(type, stream, parent) {\n    _classCallCheck(this, UnboundedArrayAccessor);\n\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  UnboundedArrayAccessor.prototype.getItem = function getItem(index) {\n    if (this._items[index] == null) {\n      var pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  };\n\n  UnboundedArrayAccessor.prototype.inspect = function inspect() {\n    return '[UnboundedArray ' + this.type.constructor.name + ']';\n  };\n\n  return UnboundedArrayAccessor;\n}();\n\nvar UnboundedArray = function (_r$Array) {\n  _inherits(UnboundedArray, _r$Array);\n\n  function UnboundedArray(type) {\n    _classCallCheck(this, UnboundedArray);\n\n    return _possibleConstructorReturn(this, _r$Array.call(this, type, 0));\n  }\n\n  UnboundedArray.prototype.decode = function decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  };\n\n  return UnboundedArray;\n}(r.Array);\n\nvar LookupTable = function LookupTable() {\n  var ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : r.uint16;\n\n  // Helper class that makes internal structures invisible to pointers\n  var Shadow = function () {\n    function Shadow(type) {\n      _classCallCheck(this, Shadow);\n\n      this.type = type;\n    }\n\n    Shadow.prototype.decode = function decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    };\n\n    Shadow.prototype.size = function size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    };\n\n    Shadow.prototype.encode = function encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    };\n\n    return Shadow;\n  }();\n\n  ValueType = new Shadow(ValueType);\n\n  var BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n\n  var LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n\n  var LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, function (t) {\n      return t.lastGlyph - t.firstGlyph + 1;\n    }), { type: 'parent' })\n  });\n\n  var LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, function (t) {\n        return t.binarySearchHeader.nUnits;\n      })\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\n\nfunction StateTable() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n\n  var entry = _Object$assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint16, function (t) {\n    return t.nClasses;\n  }));\n\n  var StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nfunction StateTable1() {\n  var entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r.uint16;\n\n  var ClassLookupTable = new r.Struct({\n    version: function version() {\n      return 8;\n    },\n    // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n\n  var entry = _Object$assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: function newState(t) {\n      return (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses;\n    },\n    flags: r.uint16\n  }, entryData);\n\n  var Entry = new r.Struct(entry);\n  var StateArray = new UnboundedArray(new r.Array(r.uint8, function (t) {\n    return t.nClasses;\n  }));\n\n  var StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n\n  return StateHeader1;\n}\n\nvar BslnSubtable = new r.VersionedStruct('format', {\n  0: { // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n\n  1: { // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n\n  2: { // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n\n  3: { // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\n\nvar bsln = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n\nvar Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\n\nvar FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),\n  featureFlags: new r.Bitfield(r.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameIndex];\n  }\n});\n\nvar feat = new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n\nvar Axis$1 = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  }\n});\n\nvar Instance = new r.Struct({\n  nameID: r.uint16,\n  name: function name(t) {\n    return t.parent.parent.name.records.fontFeatures[t.nameID];\n  },\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, function (t) {\n    return t.parent.axisCount;\n  }),\n  postscriptNameID: new r.Optional(r.uint16, function (t) {\n    return t.parent.instanceSize - t._currentOffset > 0;\n  })\n});\n\nvar fvar = new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis$1, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n\nvar shortFrac$1 = new r.Fixed(16, 'BE', 14);\n\nvar Offset = function () {\n  function Offset() {\n    _classCallCheck(this, Offset);\n  }\n\n  Offset.decode = function decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  };\n\n  return Offset;\n}();\n\nvar gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac$1, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: 'offsetToData', allowNull: false }), function (t) {\n    return t.glyphCount + 1;\n  })\n});\n\nvar ClassTable$1 = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1()\n});\n\nvar WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\n\nvar WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\n\nvar ActionData = new r.VersionedStruct('actionType', {\n  0: { // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n\n  1: { // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n\n  2: { // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n\n  3: {}, // Stretch glyph action (no data, not supported by CoreText)\n\n  4: { // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n\n  5: { // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\n\nvar Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.actionLength - t._currentOffset;\n  })\n});\n\nvar PostcompensationAction = new r.Array(Action, r.uint32);\nvar PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\n\nvar JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable$1, { type: 'parent' }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: 'wdcOffset' }))\n});\n\nvar just = new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n\nvar LigatureData = {\n  action: r.uint16\n};\n\nvar ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\n\nvar InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\n\nvar SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable()))\n});\n\nvar SubtableData = new r.VersionedStruct('type', {\n  0: { // Indic Rearrangement Subtable\n    stateTable: new StateTable()\n  },\n\n  1: { // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n\n  2: { // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n\n  4: { // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable()\n  },\n\n  5: { // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\n\nvar Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, function (t) {\n    return t.length - t._currentOffset;\n  })\n});\n\nvar FeatureEntry = new r.Struct({\n  featureType: r.uint16,\n  featureSetting: r.uint16,\n  enableFlags: r.uint32,\n  disableFlags: r.uint32\n});\n\nvar MorxChain = new r.Struct({\n  defaultFlags: r.uint32,\n  chainLength: r.uint32,\n  nFeatureEntries: r.uint32,\n  nSubtables: r.uint32,\n  features: new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables: new r.Array(Subtable, 'nSubtables')\n});\n\nvar morx = new r.Struct({\n  version: r.uint16,\n  unused: new r.Reserved(r.uint16),\n  nChains: r.uint32,\n  chains: new r.Array(MorxChain, 'nChains')\n});\n\nvar OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\n\nvar opbd = new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n\nvar tables = {};\n// Required Tables\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = NameTable;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n// TrueType Outlines\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n// PostScript Outlines\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n// Bitmap Glyphs\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n// Advanced OpenType Tables\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n// Apple Advanced Typography Tables\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n\nvar TableEntry = new r.Struct({\n  tag: new r.String(4),\n  checkSum: r.uint32,\n  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  length: r.uint32\n});\n\nvar Directory = new r.Struct({\n  tag: new r.String(4),\n  numTables: r.uint16,\n  searchRange: r.uint16,\n  entrySelector: r.uint16,\n  rangeShift: r.uint16,\n  tables: new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function () {\n  var tables = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var table = _ref;\n\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nDirectory.preEncode = function (stream) {\n  var tables$$ = [];\n  for (var tag in this.tables) {\n    var table = this.tables[tag];\n    if (table) {\n      tables$$.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new r.VoidPointer(tables[tag], table),\n        length: tables[tag].size(table)\n      });\n    }\n  }\n\n  this.tag = 'true';\n  this.numTables = tables$$.length;\n  this.tables = tables$$;\n\n  var maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n  var maxPowerOf2 = Math.pow(2, maxExponentFor2);\n\n  this.searchRange = maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nfunction binarySearch(arr, cmp) {\n  var min = 0;\n  var max = arr.length - 1;\n  while (min <= max) {\n    var mid = min + max >> 1;\n    var res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\n\nfunction range(index, end) {\n  var range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\n\nvar _class$1;\nfunction _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n// iconv-lite is an optional dependency.\ntry {\n  var iconv = require('iconv-lite');\n} catch (err) {}\n\nvar CmapProcessor = (_class$1 = function () {\n  function CmapProcessor(cmapTable) {\n    _classCallCheck(this, CmapProcessor);\n\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n    // 32-bit subtables\n    [3, 10], [0, 6], [0, 4],\n\n    // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);\n\n    // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n    if (!this.cmap && iconv) {\n      for (var _iterator = cmapTable.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var cmap = _ref;\n\n        var encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        if (iconv.encodingExists(encoding)) {\n          this.cmap = cmap.table;\n          this.encoding = encoding;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  CmapProcessor.prototype.findSubtable = function findSubtable(cmapTable, pairs) {\n    for (var _iterator2 = pairs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var _ref3 = _ref2,\n          platformID = _ref3[0],\n          encodingID = _ref3[1];\n\n      for (var _iterator3 = cmapTable.tables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref4;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref4 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref4 = _i3.value;\n        }\n\n        var cmap = _ref4;\n\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  CmapProcessor.prototype.lookup = function lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      var buf = iconv.encode(_String$fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n      for (var i = 0; i < buf.length; i++) {\n        codepoint = codepoint << 8 | buf[i];\n      }\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      var gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4:\n        {\n          var min = 0;\n          var max = cmap.segCount - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n\n            if (codepoint < cmap.startCode.get(mid)) {\n              max = mid - 1;\n            } else if (codepoint > cmap.endCode.get(mid)) {\n              min = mid + 1;\n            } else {\n              var rangeOffset = cmap.idRangeOffset.get(mid);\n              var _gid = void 0;\n\n              if (rangeOffset === 0) {\n                _gid = codepoint + cmap.idDelta.get(mid);\n              } else {\n                var index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                _gid = cmap.glyphIndexArray.get(index) || 0;\n                if (_gid !== 0) {\n                  _gid += cmap.idDelta.get(mid);\n                }\n              }\n\n              return _gid & 0xffff;\n            }\n          }\n\n          return 0;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13:\n        {\n          var _min = 0;\n          var _max = cmap.nGroups - 1;\n          while (_min <= _max) {\n            var _mid = _min + _max >> 1;\n            var group = cmap.groups.get(_mid);\n\n            if (codepoint < group.startCharCode) {\n              _max = _mid - 1;\n            } else if (codepoint > group.endCharCode) {\n              _min = _mid + 1;\n            } else {\n              if (cmap.version === 12) {\n                return group.glyphID + (codepoint - group.startCharCode);\n              } else {\n                return group.glyphID;\n              }\n            }\n          }\n\n          return 0;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  CmapProcessor.prototype.getVariationSelector = function getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    var selectors = this.uvs.varSelectors.toArray();\n    var i = binarySearch(selectors, function (x) {\n      return variationSelector - x.varSelector;\n    });\n    var sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, function (x) {\n        return codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0;\n      });\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, function (x) {\n        return codepoint - x.unicodeValue;\n      });\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  };\n\n  CmapProcessor.prototype.getCharacterSet = function getCharacterSet() {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4:\n        {\n          var res = [];\n          var endCodes = cmap.endCode.toArray();\n          for (var i = 0; i < endCodes.length; i++) {\n            var tail = endCodes[i] + 1;\n            var start = cmap.startCode.get(i);\n            res.push.apply(res, range(start, tail));\n          }\n\n          return res;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13:\n        {\n          var _res = [];\n          for (var _iterator4 = cmap.groups.toArray(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n            var _ref5;\n\n            if (_isArray4) {\n              if (_i4 >= _iterator4.length) break;\n              _ref5 = _iterator4[_i4++];\n            } else {\n              _i4 = _iterator4.next();\n              if (_i4.done) break;\n              _ref5 = _i4.value;\n            }\n\n            var group = _ref5;\n\n            _res.push.apply(_res, range(group.startCharCode, group.endCharCode + 1));\n          }\n\n          return _res;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  CmapProcessor.prototype.codePointsForGlyph = function codePointsForGlyph(gid) {\n    var cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        {\n          var res = [];\n          for (var i = 0; i < 256; i++) {\n            if (cmap.codeMap.get(i) === gid) {\n              res.push(i);\n            }\n          }\n\n          return res;\n        }\n\n      case 4:\n        {\n          var _res2 = [];\n          for (var _i5 = 0; _i5 < cmap.segCount; _i5++) {\n            var end = cmap.endCode.get(_i5);\n            var start = cmap.startCode.get(_i5);\n            var rangeOffset = cmap.idRangeOffset.get(_i5);\n            var delta = cmap.idDelta.get(_i5);\n\n            for (var c = start; c <= end; c++) {\n              var g = 0;\n              if (rangeOffset === 0) {\n                g = c + delta;\n              } else {\n                var index = rangeOffset / 2 + (c - start) - (cmap.segCount - _i5);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) {\n                  g += delta;\n                }\n              }\n\n              if (g === gid) {\n                _res2.push(c);\n              }\n            }\n          }\n\n          return _res2;\n        }\n\n      case 12:\n        {\n          var _res3 = [];\n          for (var _iterator5 = cmap.groups.toArray(), _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {\n            var _ref6;\n\n            if (_isArray5) {\n              if (_i6 >= _iterator5.length) break;\n              _ref6 = _iterator5[_i6++];\n            } else {\n              _i6 = _iterator5.next();\n              if (_i6.done) break;\n              _ref6 = _i6.value;\n            }\n\n            var group = _ref6;\n\n            if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n              _res3.push(group.startCharCode + (gid - group.glyphID));\n            }\n          }\n\n          return _res3;\n        }\n\n      case 13:\n        {\n          var _res4 = [];\n          for (var _iterator6 = cmap.groups.toArray(), _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {\n            var _ref7;\n\n            if (_isArray6) {\n              if (_i7 >= _iterator6.length) break;\n              _ref7 = _iterator6[_i7++];\n            } else {\n              _i7 = _iterator6.next();\n              if (_i7.done) break;\n              _ref7 = _i7.value;\n            }\n\n            var _group = _ref7;\n\n            if (gid === _group.glyphID) {\n              _res4.push.apply(_res4, range(_group.startCharCode, _group.endCharCode + 1));\n            }\n          }\n\n          return _res4;\n        }\n\n      default:\n        throw new Error('Unknown cmap format ' + cmap.version);\n    }\n  };\n\n  return CmapProcessor;\n}(), (_applyDecoratedDescriptor$1(_class$1.prototype, 'getCharacterSet', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'getCharacterSet'), _class$1.prototype), _applyDecoratedDescriptor$1(_class$1.prototype, 'codePointsForGlyph', [cache], _Object$getOwnPropertyDescriptor(_class$1.prototype, 'codePointsForGlyph'), _class$1.prototype)), _class$1);\n\nvar KernProcessor = function () {\n  function KernProcessor(font) {\n    _classCallCheck(this, KernProcessor);\n\n    this.kern = font.kern;\n  }\n\n  KernProcessor.prototype.process = function process(glyphs, positions) {\n    for (var glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      var left = glyphs[glyphIndex].id;\n      var right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  };\n\n  KernProcessor.prototype.getKerning = function getKerning(left, right) {\n    var res = 0;\n\n    for (var _iterator = this.kern.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var table = _ref;\n\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n        default:\n          throw new Error('Unsupported kerning table version ' + table.version);\n      }\n\n      var val = 0;\n      var s = table.subtable;\n      switch (table.format) {\n        case 0:\n          var pairIdx = binarySearch(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          var leftOffset = 0,\n              rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          var index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error('Unsupported kerning sub-table format ' + table.format);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  };\n\n  return KernProcessor;\n}();\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\n\nvar UnicodeLayoutEngine = function () {\n  function UnicodeLayoutEngine(font) {\n    _classCallCheck(this, UnicodeLayoutEngine);\n\n    this.font = font;\n  }\n\n  UnicodeLayoutEngine.prototype.positionGlyphs = function positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    var clusterStart = 0;\n    var clusterEnd = 0;\n    for (var index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.isMark) {\n        // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  };\n\n  UnicodeLayoutEngine.prototype.positionCluster = function positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    var base = glyphs[clusterStart];\n    var baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    }\n\n    var xOffset = -positions[clusterStart].xAdvance;\n    var yOffset = 0;\n    var yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (var index = clusterStart + 1; index <= clusterEnd; index++) {\n      var mark = glyphs[index];\n      var markBox = mark.cbox;\n      var position = positions[index];\n\n      var combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default:\n            // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  };\n\n  UnicodeLayoutEngine.prototype.getCombiningClass = function getCombiningClass(codePoint) {\n    var combiningClass = unicode.getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) {\n        // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22':\n        // meteg\n        return 'Below';\n\n      case 'CCC23':\n        // rafe\n        return 'Attached_Above';\n\n      case 'CCC24':\n        // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n      case 'CCC19':\n        // holam\n        return 'Above_Left';\n\n      case 'CCC26':\n        // point varika\n        return 'Above';\n\n      case 'CCC21':\n        // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36':\n        // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n      case 'CCC32':\n        // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103':\n        // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107':\n        // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118':\n        // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122':\n        // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132':\n        // sign u\n        return 'Below';\n\n      case 'CCC130':\n        // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  };\n\n  return UnicodeLayoutEngine;\n}();\n\n/**\n * Represents a glyph bounding box\n */\nvar BBox = function () {\n  function BBox() {\n    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;\n    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;\n\n    _classCallCheck(this, BBox);\n\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n\n\n  BBox.prototype.addPoint = function addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  };\n\n  BBox.prototype.copy = function copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  };\n\n  _createClass(BBox, [{\n    key: \"width\",\n    get: function get() {\n      return this.maxX - this.minX;\n    }\n\n    /**\n     * The height of the bounding box\n     * @type {number}\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.maxY - this.minY;\n    }\n  }]);\n\n  return BBox;\n}();\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nvar UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\n\nvar OPENTYPE_SCRIPTS = {};\nfor (var script in UNICODE_SCRIPTS) {\n  var tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (var _iterator = tag, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var t = _ref;\n\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\n\nfunction fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\n\nfunction forString(string) {\n  var len = string.length;\n  var idx = 0;\n  while (idx < len) {\n    var code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      var next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    var _script = unicode.getScript(code);\n    if (_script !== 'Common' && _script !== 'Inherited' && _script !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\nfunction forCodePoints(codePoints) {\n  for (var i = 0; i < codePoints.length; i++) {\n    var codePoint = codePoints[i];\n    var _script2 = unicode.getScript(codePoint);\n    if (_script2 !== 'Common' && _script2 !== 'Inherited' && _script2 !== 'Unknown') {\n      return UNICODE_SCRIPTS[_script2];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n// The scripts in this map are written from right to left\nvar RTL = {\n  arab: true, // Arabic\n  hebr: true, // Hebrew\n  syrc: true, // Syriac\n  thaa: true, // Thaana\n  cprt: true, // Cypriot Syllabary\n  khar: true, // Kharosthi\n  phnx: true, // Phoenician\n  'nko ': true, // N'Ko\n  lydi: true, // Lydian\n  avst: true, // Avestan\n  armi: true, // Imperial Aramaic\n  phli: true, // Inscriptional Pahlavi\n  prti: true, // Inscriptional Parthian\n  sarb: true, // Old South Arabian\n  orkh: true, // Old Turkic, Orkhon Runic\n  samr: true, // Samaritan\n  mand: true, // Mandaic, Mandaean\n  merc: true, // Meroitic Cursive\n  mero: true, // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true, // Manichaean\n  mend: true, // Mende Kikakui\n  nbat: true, // Nabataean\n  narb: true, // Old North Arabian\n  palm: true, // Palmyrene\n  phlp: true // Psalter Pahlavi\n};\n\nfunction direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\n\nvar GlyphRun = function () {\n  function GlyphRun(glyphs, features, script, language, direction$$) {\n    _classCallCheck(this, GlyphRun);\n\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction$$ || direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var tag = _ref;\n\n        this.features[tag] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n\n\n  _createClass(GlyphRun, [{\n    key: 'advanceWidth',\n    get: function get() {\n      var width = 0;\n      for (var _iterator2 = this.positions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var position = _ref2;\n\n        width += position.xAdvance;\n      }\n\n      return width;\n    }\n\n    /**\n     * The total advance height of the run.\n     * @type {number}\n     */\n\n  }, {\n    key: 'advanceHeight',\n    get: function get() {\n      var height = 0;\n      for (var _iterator3 = this.positions, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var position = _ref3;\n\n        height += position.yAdvance;\n      }\n\n      return height;\n    }\n\n    /**\n     * The bounding box containing all glyphs in the run.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get() {\n      var bbox = new BBox();\n\n      var x = 0;\n      var y = 0;\n      for (var index = 0; index < this.glyphs.length; index++) {\n        var glyph = this.glyphs[index];\n        var p = this.positions[index];\n        var b = glyph.bbox;\n\n        bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n        bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n\n        x += p.xAdvance;\n        y += p.yAdvance;\n      }\n\n      return bbox;\n    }\n  }]);\n\n  return GlyphRun;\n}();\n\n/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nvar GlyphPosition = function GlyphPosition() {\n  var xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  _classCallCheck(this, GlyphPosition);\n\n  /**\n   * The amount to move the virtual pen in the X direction after rendering this glyph.\n   * @type {number}\n   */\n  this.xAdvance = xAdvance;\n\n  /**\n   * The amount to move the virtual pen in the Y direction after rendering this glyph.\n   * @type {number}\n   */\n  this.yAdvance = yAdvance;\n\n  /**\n   * The offset from the pen position in the X direction at which to render this glyph.\n   * @type {number}\n   */\n  this.xOffset = xOffset;\n\n  /**\n   * The offset from the pen position in the Y direction at which to render this glyph.\n   * @type {number}\n   */\n  this.yOffset = yOffset;\n};\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nvar features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: { // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nvar feature = function feature(name, selector) {\n  return [features[name].code, features[name][selector]];\n};\n\nvar OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'), // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'), // ??\n  numr: feature('fractions', 'diagonalFractions'), // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'), // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n\n  init: feature('smartSwash', 'wordInitialSwashes'), // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'), // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'), // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'), // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'), //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (var i = 1; i <= 99; i++) {\n  OTMapping['cv' + ('00' + i).slice(-2)] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nvar AATMapping = {};\nfor (var ot in OTMapping) {\n  var aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nfunction mapOTToAAT(features) {\n  var res = {};\n  for (var k in features) {\n    var r = void 0;\n    if (r = OTMapping[k]) {\n      if (res[r[0]] == null) {\n        res[r[0]] = {};\n      }\n\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  var type = f[0],\n      setting = f[1];\n\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nfunction mapAATToOT(features) {\n  var res = {};\n  if (Array.isArray(features)) {\n    for (var k = 0; k < features.length; k++) {\n      var r = void 0;\n      var f = mapFeatureStrings(features[k]);\n      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r] = true;\n      }\n    }\n  } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n    for (var type in features) {\n      var _feature = features[type];\n      for (var setting in _feature) {\n        var _r = void 0;\n        var _f = mapFeatureStrings([type, setting]);\n        if (_feature[setting] && (_r = AATMapping[_f[0]] && AATMapping[_f[0]][_f[1]])) {\n          res[_r] = true;\n        }\n      }\n    }\n  }\n\n  return _Object$keys(res);\n}\n\nvar _class$3;\nfunction _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar AATLookupTable = (_class$3 = function () {\n  function AATLookupTable(table) {\n    _classCallCheck(this, AATLookupTable);\n\n    this.table = table;\n  }\n\n  AATLookupTable.prototype.lookup = function lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n      case 4:\n        {\n          var min = 0;\n          var max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.firstGlyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.firstGlyph) {\n              max = mid - 1;\n            } else if (glyph > seg.lastGlyph) {\n              min = mid + 1;\n            } else {\n              if (this.table.version === 2) {\n                return seg.value;\n              } else {\n                return seg.values[glyph - seg.firstGlyph];\n              }\n            }\n          }\n\n          return null;\n        }\n\n      case 6:\n        {\n          // lookup single\n          var _min = 0;\n          var _max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (_min <= _max) {\n            var mid = _min + _max >> 1;\n            var seg = this.table.segments[mid];\n\n            // special end of search value\n            if (seg.glyph === 0xffff) {\n              return null;\n            }\n\n            if (glyph < seg.glyph) {\n              _max = mid - 1;\n            } else if (glyph > seg.glyph) {\n              _min = mid + 1;\n            } else {\n              return seg.value;\n            }\n          }\n\n          return null;\n        }\n\n      case 8:\n        // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n  };\n\n  AATLookupTable.prototype.glyphsForValue = function glyphsForValue(classValue) {\n    var res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4:\n        {\n          for (var _iterator = this.table.segments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var segment = _ref;\n\n            if (this.table.version === 2 && segment.value === classValue) {\n              res.push.apply(res, range(segment.firstGlyph, segment.lastGlyph + 1));\n            } else {\n              for (var index = 0; index < segment.values.length; index++) {\n                if (segment.values[index] === classValue) {\n                  res.push(segment.firstGlyph + index);\n                }\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 6:\n        {\n          // lookup single\n          for (var _iterator2 = this.table.segments, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n            var _ref2;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref2 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref2 = _i2.value;\n            }\n\n            var _segment = _ref2;\n\n            if (_segment.value === classValue) {\n              res.push(_segment.glyph);\n            }\n          }\n\n          break;\n        }\n\n      case 8:\n        {\n          // lookup trimmed\n          for (var i = 0; i < this.table.values.length; i++) {\n            if (this.table.values[i] === classValue) {\n              res.push(this.table.firstGlyph + i);\n            }\n          }\n\n          break;\n        }\n\n      default:\n        throw new Error('Unknown lookup table format: ' + this.table.version);\n    }\n\n    return res;\n  };\n\n  return AATLookupTable;\n}(), (_applyDecoratedDescriptor$3(_class$3.prototype, 'glyphsForValue', [cache], _Object$getOwnPropertyDescriptor(_class$3.prototype, 'glyphsForValue'), _class$3.prototype)), _class$3);\n\nvar START_OF_TEXT_STATE = 0;\nvar END_OF_TEXT_CLASS = 0;\nvar OUT_OF_BOUNDS_CLASS = 1;\nvar DELETED_GLYPH_CLASS = 2;\nvar DONT_ADVANCE = 0x4000;\n\nvar AATStateMachine = function () {\n  function AATStateMachine(stateTable) {\n    _classCallCheck(this, AATStateMachine);\n\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  AATStateMachine.prototype.process = function process(glyphs, reverse, processEntry) {\n    var currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    var index = reverse ? glyphs.length - 1 : 0;\n    var dir = reverse ? -1 : 1;\n\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      var glyph = null;\n      var classCode = OUT_OF_BOUNDS_CLASS;\n      var shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) {\n          // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      var row = this.stateTable.stateArray.getItem(currentState);\n      var entryIndex = row[classCode];\n      var entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !== DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  };\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n\n\n  AATStateMachine.prototype.traverse = function traverse(opts) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _Set();\n\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n\n    var _stateTable = this.stateTable,\n        nClasses = _stateTable.nClasses,\n        stateArray = _stateTable.stateArray,\n        entryTable = _stateTable.entryTable;\n\n    var row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (var classCode = 4; classCode < nClasses; classCode++) {\n      var entryIndex = row[classCode];\n      var entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (var _iterator = this.lookupTable.glyphsForValue(classCode), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var glyph = _ref;\n\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  };\n\n  return AATStateMachine;\n}();\n\nvar _class$2;\nfunction _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n// indic replacement flags\nvar MARK_FIRST = 0x8000;\nvar MARK_LAST = 0x2000;\nvar VERB = 0x000F;\n\n// contextual substitution and glyph insertion flag\nvar SET_MARK = 0x8000;\n\n// ligature entry flags\nvar SET_COMPONENT = 0x8000;\nvar PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nvar LAST_MASK = 0x80000000;\nvar STORE_MASK = 0x40000000;\nvar OFFSET_MASK = 0x3FFFFFFF;\n\nvar REVERSE_DIRECTION = 0x400000;\nvar CURRENT_INSERT_BEFORE = 0x0800;\nvar MARKED_INSERT_BEFORE = 0x0400;\nvar CURRENT_INSERT_COUNT = 0x03E0;\nvar MARKED_INSERT_COUNT = 0x001F;\n\nvar AATMorxProcessor = (_class$2 = function () {\n  function AATMorxProcessor(font) {\n    _classCallCheck(this, AATMorxProcessor);\n\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:true}}\n\n\n  AATMorxProcessor.prototype.process = function process(glyphs) {\n    var features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var _iterator = this.morx.chains, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var chain = _ref;\n\n      var flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (var _iterator2 = chain.features, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var feature = _ref2;\n\n        var f = void 0;\n        if ((f = features[feature.featureType]) && f[feature.featureSetting]) {\n          flags &= feature.disableFlags;\n          flags |= feature.enableFlags;\n        }\n      }\n\n      for (var _iterator3 = chain.subtables, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var subtable = _ref3;\n\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    var index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  };\n\n  AATMorxProcessor.prototype.processSubtable = function processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n\n    var reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  };\n\n  AATMorxProcessor.prototype.getStateMachine = function getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  };\n\n  AATMorxProcessor.prototype.getProcessor = function getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error('Invalid morx subtable type: ' + this.subtable.type);\n    }\n  };\n\n  AATMorxProcessor.prototype.processIndicRearragement = function processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  };\n\n  AATMorxProcessor.prototype.processContextualSubstitution = function processContextualSubstitution(glyph, entry, index) {\n    var subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      var lookup = subsitutions.getItem(entry.markIndex);\n      var lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      var _lookup = subsitutions.getItem(entry.currentIndex);\n      var _lookupTable = new AATLookupTable(_lookup);\n      glyph = this.glyphs[index];\n      var gid = _lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  };\n\n  AATMorxProcessor.prototype.processLigature = function processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      var _ligatureStack;\n\n      var actions = this.subtable.table.ligatureActions;\n      var components = this.subtable.table.components;\n      var ligatureList = this.subtable.table.ligatureList;\n\n      var actionIndex = entry.action;\n      var last = false;\n      var ligatureIndex = 0;\n      var codePoints = [];\n      var ligatureGlyphs = [];\n\n      while (!last) {\n        var _codePoints;\n\n        var componentGlyph = this.ligatureStack.pop();\n        (_codePoints = codePoints).unshift.apply(_codePoints, this.glyphs[componentGlyph].codePoints);\n\n        var action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        var store = !!(action & STORE_MASK);\n        var offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n\n        var component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          var ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      (_ligatureStack = this.ligatureStack).push.apply(_ligatureStack, ligatureGlyphs);\n    }\n  };\n\n  AATMorxProcessor.prototype.processNoncontextualSubstitutions = function processNoncontextualSubstitutions(subtable, glyphs, index) {\n    var lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      var glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        var gid = lookupTable.lookup(glyph.id);\n        if (gid) {\n          // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  };\n\n  AATMorxProcessor.prototype._insertGlyphs = function _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    var _glyphs;\n\n    var insertions = [];\n    while (count--) {\n      var gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    (_glyphs = this.glyphs).splice.apply(_glyphs, [glyphIndex, 0].concat(insertions));\n  };\n\n  AATMorxProcessor.prototype.processGlyphInsertion = function processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      var count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      var isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      var _count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      var _isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, _count, _isBefore);\n    }\n  };\n\n  AATMorxProcessor.prototype.getSupportedFeatures = function getSupportedFeatures() {\n    var features = [];\n    for (var _iterator4 = this.morx.chains, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var chain = _ref4;\n\n      for (var _iterator5 = chain.features, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var feature = _ref5;\n\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  };\n\n  AATMorxProcessor.prototype.generateInputs = function generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  };\n\n  AATMorxProcessor.prototype.generateInputCache = function generateInputCache() {\n    this.inputCache = {};\n\n    for (var _iterator6 = this.morx.chains, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {\n      var _ref6;\n\n      if (_isArray6) {\n        if (_i6 >= _iterator6.length) break;\n        _ref6 = _iterator6[_i6++];\n      } else {\n        _i6 = _iterator6.next();\n        if (_i6.done) break;\n        _ref6 = _i6.value;\n      }\n\n      var chain = _ref6;\n\n      var flags = chain.defaultFlags;\n\n      for (var _iterator7 = chain.subtables, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {\n        var _ref7;\n\n        if (_isArray7) {\n          if (_i7 >= _iterator7.length) break;\n          _ref7 = _iterator7[_i7++];\n        } else {\n          _i7 = _iterator7.next();\n          if (_i7.done) break;\n          _ref7 = _i7.value;\n        }\n\n        var subtable = _ref7;\n\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  };\n\n  AATMorxProcessor.prototype.generateInputsForSubtable = function generateInputsForSubtable(subtable) {\n    var _this = this;\n\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    var reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n\n    var stateMachine = this.getStateMachine(subtable);\n    var process = this.getProcessor();\n\n    var input = [];\n    var stack = [];\n    this.glyphs = [];\n\n    stateMachine.traverse({\n      enter: function enter(glyph, entry) {\n        var glyphs = _this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: _this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        var g = _this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        var count = 0;\n        var found = 0;\n        for (var i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          var result = input.map(function (g) {\n            return g.id;\n          });\n          var _cache = _this.inputCache[found];\n          if (_cache) {\n            _cache.push(result);\n          } else {\n            _this.inputCache[found] = [result];\n          }\n        }\n      },\n\n      exit: function exit() {\n        var _stack$pop = stack.pop();\n\n        _this.glyphs = _stack$pop.glyphs;\n        _this.ligatureStack = _stack$pop.ligatureStack;\n\n        input.pop();\n      }\n    });\n  };\n\n  return AATMorxProcessor;\n}(), (_applyDecoratedDescriptor$2(_class$2.prototype, 'getStateMachine', [cache], _Object$getOwnPropertyDescriptor(_class$2.prototype, 'getStateMachine'), _class$2.prototype)), _class$2);\n\nfunction swap(glyphs, rangeA, rangeB) {\n  var reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n\n  var start = glyphs.splice.apply(glyphs, [rangeA[0], rangeA[1]].concat(end));\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice.apply(glyphs, [rangeB[0] - (rangeA[1] - 1), 0].concat(start));\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  var length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0:\n      // no change\n      return glyphs;\n\n    case 1:\n      // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2:\n      // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3:\n      // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4:\n      // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5:\n      // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6:\n      // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7:\n      // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8:\n      // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9:\n      // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10:\n      // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11:\n      // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12:\n      // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13:\n      // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14:\n      // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15:\n      // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error('Unknown verb: ' + verb);\n  }\n}\n\nvar AATLayoutEngine = function () {\n  function AATLayoutEngine(font) {\n    _classCallCheck(this, AATLayoutEngine);\n\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  AATLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, mapOTToAAT(glyphRun.features));\n  };\n\n  AATLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  };\n\n  AATLayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var glyphStrings = this.morxProcessor.generateInputs(gid);\n    var result = new _Set();\n\n    for (var _iterator = glyphStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var glyphs = _ref;\n\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  };\n\n  AATLayoutEngine.prototype._addStrings = function _addStrings(glyphs, index, strings, string) {\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var codePoint = _ref2;\n\n      var s = string + _String$fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  };\n\n  return AATLayoutEngine;\n}();\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\n\nvar ShapingPlan = function () {\n  function ShapingPlan(font, script, direction) {\n    _classCallCheck(this, ShapingPlan);\n\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n\n\n  ShapingPlan.prototype._addFeatures = function _addFeatures(features, global) {\n    var stageIndex = this.stages.length - 1;\n    var stage = this.stages[stageIndex];\n    for (var _iterator = features, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var feature = _ref;\n\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Add features to the last stage\n   */\n\n\n  ShapingPlan.prototype.add = function add(arg) {\n    var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  };\n\n  /**\n   * Add a new stage\n   */\n\n\n  ShapingPlan.prototype.addStage = function addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  };\n\n  ShapingPlan.prototype.setFeatureOverrides = function setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      for (var tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          var stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  };\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n\n\n  ShapingPlan.prototype.assignGlobalFeatures = function assignGlobalFeatures(glyphs) {\n    for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var glyph = _ref2;\n\n      for (var feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n\n\n  ShapingPlan.prototype.process = function process(processor, glyphs, positions) {\n    for (var _iterator3 = this.stages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var stage = _ref3;\n\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  };\n\n  return ShapingPlan;\n}();\n\nvar _class$4;\nvar _temp;\nvar VARIATION_FEATURES = ['rvrn'];\nvar COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nvar FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nvar HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nvar DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nvar DefaultShaper = (_temp = _class$4 = function () {\n  function DefaultShaper() {\n    _classCallCheck(this, DefaultShaper);\n  }\n\n  DefaultShaper.plan = function plan(_plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(_plan);\n    this.planFeatures(_plan);\n    this.planPostprocessing(_plan, features);\n\n    // Assign the global features to all the glyphs\n    _plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(_plan, glyphs);\n  };\n\n  DefaultShaper.planPreprocessing = function planPreprocessing(plan) {\n    plan.add({\n      global: [].concat(VARIATION_FEATURES, DIRECTIONAL_FEATURES[plan.direction]),\n      local: FRACTIONAL_FEATURES\n    });\n  };\n\n  DefaultShaper.planFeatures = function planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  };\n\n  DefaultShaper.planPostprocessing = function planPostprocessing(plan, userFeatures) {\n    plan.add([].concat(COMMON_FEATURES, HORIZONTAL_FEATURES));\n    plan.setFeatureOverrides(userFeatures);\n  };\n\n  DefaultShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (var i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) {\n        // fraction slash\n        var start = i;\n        var end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  };\n\n  return DefaultShaper;\n}(), _class$4.zeroMarkWidths = 'AFTER_GPOS', _temp);\n\nvar trie = new UnicodeTrie(Buffer(\"AAEQAAAAAAAAADGgAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=\",\"base64\"));\nvar FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\n\nvar ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\n\nvar ISOL = 'isol';\nvar FINA = 'fina';\nvar FIN2 = 'fin2';\nvar FIN3 = 'fin3';\nvar MEDI = 'medi';\nvar MED2 = 'med2';\nvar INIT = 'init';\nvar NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nvar STATE_TABLE = [\n//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 6]],\n\n// State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN2, 5], [NONE, ISOL, 6]],\n\n// State 2: prev was D/L in ISOL form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [INIT, FINA, 1], [INIT, FINA, 3], [INIT, FINA, 4], [INIT, FINA, 6]],\n\n// State 3: prev was D in FINA form,  willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MEDI, FINA, 1], [MEDI, FINA, 3], [MEDI, FINA, 4], [MEDI, FINA, 6]],\n\n// State 4: prev was FINA ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [MED2, ISOL, 1], [MED2, ISOL, 2], [MED2, FIN2, 5], [MED2, ISOL, 6]],\n\n// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [ISOL, ISOL, 1], [ISOL, ISOL, 2], [ISOL, FIN2, 5], [ISOL, ISOL, 6]],\n\n// State 6: prev was DALATH/RISH,  not willing to join.\n[[NONE, NONE, 0], [NONE, ISOL, 2], [NONE, ISOL, 1], [NONE, ISOL, 2], [NONE, FIN3, 5], [NONE, ISOL, 6]]];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\n\nvar ArabicShaper = function (_DefaultShaper) {\n  _inherits(ArabicShaper, _DefaultShaper);\n\n  function ArabicShaper() {\n    _classCallCheck(this, ArabicShaper);\n\n    return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  ArabicShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (var i = 0; i < FEATURES.length; i++) {\n      var feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  };\n\n  ArabicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    _DefaultShaper.assignFeatures.call(this, plan, glyphs);\n\n    var prev = -1;\n    var state = 0;\n    var actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (var i = 0; i < glyphs.length; i++) {\n      var curAction = void 0,\n          prevAction = void 0;\n      var glyph = glyphs[i];\n      var type = getShapingClass(glyph.codePoints[0]);\n      if (type === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      var _STATE_TABLE$state$ty = STATE_TABLE[state][type];\n      prevAction = _STATE_TABLE$state$ty[0];\n      curAction = _STATE_TABLE$state$ty[1];\n      state = _STATE_TABLE$state$ty[2];\n\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (var index = 0; index < glyphs.length; index++) {\n      var feature = void 0;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  };\n\n  return ArabicShaper;\n}(DefaultShaper);\n\nfunction getShapingClass(codePoint) {\n  var res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n\n  var category = unicode.getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n\nvar GlyphIterator = function () {\n  function GlyphIterator(glyphs, options) {\n    _classCallCheck(this, GlyphIterator);\n\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  GlyphIterator.prototype.reset = function reset() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  };\n\n  GlyphIterator.prototype.shouldIgnore = function shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  };\n\n  GlyphIterator.prototype.move = function move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  };\n\n  GlyphIterator.prototype.next = function next() {\n    return this.move(+1);\n  };\n\n  GlyphIterator.prototype.prev = function prev() {\n    return this.move(-1);\n  };\n\n  GlyphIterator.prototype.peek = function peek() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var idx = this.index;\n    var res = this.increment(count);\n    this.index = idx;\n    return res;\n  };\n\n  GlyphIterator.prototype.peekIndex = function peekIndex() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var idx = this.index;\n    this.increment(count);\n    var res = this.index;\n    this.index = idx;\n    return res;\n  };\n\n  GlyphIterator.prototype.increment = function increment() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    var dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  };\n\n  _createClass(GlyphIterator, [{\n    key: \"cur\",\n    get: function get() {\n      return this.glyphs[this.index] || null;\n    }\n  }]);\n\n  return GlyphIterator;\n}();\n\nvar DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nvar OTProcessor = function () {\n  function OTProcessor(font, table) {\n    _classCallCheck(this, OTProcessor);\n\n    this.font = font;\n    this.table = table;\n\n    this.script = null;\n    this.scriptTag = null;\n\n    this.language = null;\n    this.languageTag = null;\n\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  OTProcessor.prototype.findScript = function findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var s = _ref;\n\n      for (var _iterator2 = this.table.scriptList, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var entry = _ref2;\n\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  OTProcessor.prototype.selectScript = function selectScript(script, language, direction$$) {\n    var changed = false;\n    var entry = void 0;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction$$ || direction$$ !== this.direction) {\n      this.direction = direction$$ || direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (var _iterator3 = this.script.langSysRecords, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var lang = _ref3;\n\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (var _iterator4 = this.language.featureIndexes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n          var _ref4;\n\n          if (_isArray4) {\n            if (_i4 >= _iterator4.length) break;\n            _ref4 = _iterator4[_i4++];\n          } else {\n            _i4 = _iterator4.next();\n            if (_i4.done) break;\n            _ref4 = _i4.value;\n          }\n\n          var featureIndex = _ref4;\n\n          var record = this.table.featureList[featureIndex];\n          var substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  };\n\n  OTProcessor.prototype.lookupsForFeatures = function lookupsForFeatures() {\n    var userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var exclude = arguments[1];\n\n    var lookups = [];\n    for (var _iterator5 = userFeatures, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var tag = _ref5;\n\n      var feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n\n      for (var _iterator6 = feature.lookupListIndexes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {\n        var _ref6;\n\n        if (_isArray6) {\n          if (_i6 >= _iterator6.length) break;\n          _ref6 = _iterator6[_i6++];\n        } else {\n          _i6 = _iterator6.next();\n          if (_i6.done) break;\n          _ref6 = _i6.value;\n        }\n\n        var lookupIndex = _ref6;\n\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort(function (a, b) {\n      return a.index - b.index;\n    });\n    return lookups;\n  };\n\n  OTProcessor.prototype.substituteFeatureForVariations = function substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    var record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    var substitutions = record.featureTableSubstitution.substitutions;\n    for (var _iterator7 = substitutions, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {\n      var _ref7;\n\n      if (_isArray7) {\n        if (_i7 >= _iterator7.length) break;\n        _ref7 = _iterator7[_i7++];\n      } else {\n        _i7 = _iterator7.next();\n        if (_i7.done) break;\n        _ref7 = _i7.value;\n      }\n\n      var substitution = _ref7;\n\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  };\n\n  OTProcessor.prototype.findVariationsIndex = function findVariationsIndex(coords) {\n    var variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n\n    var records = variations.featureVariationRecords;\n    for (var i = 0; i < records.length; i++) {\n      var conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  OTProcessor.prototype.variationConditionsMatch = function variationConditionsMatch(conditions, coords) {\n    return conditions.every(function (condition) {\n      var coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  };\n\n  OTProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    var lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  };\n\n  OTProcessor.prototype.applyLookups = function applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (var _iterator8 = lookups, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {\n      var _ref8;\n\n      if (_isArray8) {\n        if (_i8 >= _iterator8.length) break;\n        _ref8 = _iterator8[_i8++];\n      } else {\n        _i8 = _iterator8.next();\n        if (_i8.done) break;\n        _ref8 = _i8.value;\n      }\n\n      var _ref9 = _ref8,\n          feature = _ref9.feature,\n          lookup = _ref9.lookup;\n\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (var _iterator9 = lookup.subTables, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {\n          var _ref10;\n\n          if (_isArray9) {\n            if (_i9 >= _iterator9.length) break;\n            _ref10 = _iterator9[_i9++];\n          } else {\n            _i9 = _iterator9.next();\n            if (_i9.done) break;\n            _ref10 = _i9.value;\n          }\n\n          var table = _ref10;\n\n          var res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  };\n\n  OTProcessor.prototype.applyLookup = function applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  };\n\n  OTProcessor.prototype.applyLookupList = function applyLookupList(lookupRecords) {\n    var options = this.glyphIterator.options;\n    var glyphIndex = this.glyphIterator.index;\n\n    for (var _iterator10 = lookupRecords, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {\n      var _ref11;\n\n      if (_isArray10) {\n        if (_i10 >= _iterator10.length) break;\n        _ref11 = _iterator10[_i10++];\n      } else {\n        _i10 = _iterator10.next();\n        if (_i10.done) break;\n        _ref11 = _i10.value;\n      }\n\n      var lookupRecord = _ref11;\n\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      var lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (var _iterator11 = lookup.subTables, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {\n        var _ref12;\n\n        if (_isArray11) {\n          if (_i11 >= _iterator11.length) break;\n          _ref12 = _iterator11[_i11++];\n        } else {\n          _i11 = _iterator11.next();\n          if (_i11.done) break;\n          _ref12 = _i11.value;\n        }\n\n        var table = _ref12;\n\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  };\n\n  OTProcessor.prototype.coverageIndex = function coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (var _iterator12 = coverage.rangeRecords, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {\n          var _ref13;\n\n          if (_isArray12) {\n            if (_i12 >= _iterator12.length) break;\n            _ref13 = _iterator12[_i12++];\n          } else {\n            _i12 = _iterator12.next();\n            if (_i12.done) break;\n            _ref13 = _i12.value;\n          }\n\n          var range = _ref13;\n\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  };\n\n  OTProcessor.prototype.match = function match(sequenceIndex, sequence, fn, matched) {\n    var pos = this.glyphIterator.index;\n    var glyph = this.glyphIterator.increment(sequenceIndex);\n    var idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  };\n\n  OTProcessor.prototype.sequenceMatches = function sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      return component === glyph.id;\n    });\n  };\n\n  OTProcessor.prototype.sequenceMatchIndices = function sequenceMatchIndices(sequenceIndex, sequence) {\n    var _this = this;\n\n    return this.match(sequenceIndex, sequence, function (component, glyph) {\n      // If the current feature doesn't apply to this glyph,\n      if (!(_this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  };\n\n  OTProcessor.prototype.coverageSequenceMatches = function coverageSequenceMatches(sequenceIndex, sequence) {\n    var _this2 = this;\n\n    return this.match(sequenceIndex, sequence, function (coverage, glyph) {\n      return _this2.coverageIndex(coverage, glyph.id) >= 0;\n    });\n  };\n\n  OTProcessor.prototype.getClassID = function getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        // Class array\n        var i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (var _iterator13 = classDef.classRangeRecord, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {\n          var _ref14;\n\n          if (_isArray13) {\n            if (_i13 >= _iterator13.length) break;\n            _ref14 = _iterator13[_i13++];\n          } else {\n            _i13 = _iterator13.next();\n            if (_i13.done) break;\n            _ref14 = _i13.value;\n          }\n\n          var range = _ref14;\n\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  };\n\n  OTProcessor.prototype.classSequenceMatches = function classSequenceMatches(sequenceIndex, sequence, classDef) {\n    var _this3 = this;\n\n    return this.match(sequenceIndex, sequence, function (classID, glyph) {\n      return classID === _this3.getClassID(glyph.id, classDef);\n    });\n  };\n\n  OTProcessor.prototype.applyContext = function applyContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        var set = table.ruleSets[index];\n        for (var _iterator14 = set, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {\n          var _ref15;\n\n          if (_isArray14) {\n            if (_i14 >= _iterator14.length) break;\n            _ref15 = _iterator14[_i14++];\n          } else {\n            _i14 = _iterator14.next();\n            if (_i14.done) break;\n            _ref15 = _i14.value;\n          }\n\n          var rule = _ref15;\n\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.classSet[index];\n        for (var _iterator15 = set, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {\n          var _ref16;\n\n          if (_isArray15) {\n            if (_i15 >= _iterator15.length) break;\n            _ref16 = _iterator15[_i15++];\n          } else {\n            _i15 = _iterator15.next();\n            if (_i15.done) break;\n            _ref16 = _i15.value;\n          }\n\n          var _rule = _ref16;\n\n          if (this.classSequenceMatches(1, _rule.classes, table.classDef)) {\n            return this.applyLookupList(_rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  };\n\n  OTProcessor.prototype.applyChainingContext = function applyChainingContext(table) {\n    switch (table.version) {\n      case 1:\n        var index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        var set = table.chainRuleSets[index];\n        for (var _iterator16 = set, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {\n          var _ref17;\n\n          if (_isArray16) {\n            if (_i16 >= _iterator16.length) break;\n            _ref17 = _iterator16[_i16++];\n          } else {\n            _i16 = _iterator16.next();\n            if (_i16.done) break;\n            _ref17 = _i16.value;\n          }\n\n          var rule = _ref17;\n\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        var rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n\n        for (var _iterator17 = rules, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {\n          var _ref18;\n\n          if (_isArray17) {\n            if (_i17 >= _iterator17.length) break;\n            _ref18 = _iterator17[_i17++];\n          } else {\n            _i17 = _iterator17.next();\n            if (_i17.done) break;\n            _ref18 = _i17.value;\n          }\n\n          var _rule2 = _ref18;\n\n          if (this.classSequenceMatches(-_rule2.backtrack.length, _rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, _rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + _rule2.input.length, _rule2.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(_rule2.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  };\n\n  return OTProcessor;\n}();\n\nvar GlyphInfo = function () {\n  function GlyphInfo(font, id) {\n    var codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var features = arguments[3];\n\n    _classCallCheck(this, GlyphInfo);\n\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (var i = 0; i < features.length; i++) {\n        var feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if ((typeof features === 'undefined' ? 'undefined' : _typeof(features)) === 'object') {\n      _Object$assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  GlyphInfo.prototype.copy = function copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);\n  };\n\n  _createClass(GlyphInfo, [{\n    key: 'id',\n    get: function get() {\n      return this._id;\n    },\n    set: function set(id) {\n      this._id = id;\n      this.substituted = true;\n\n      var GDEF = this._font.GDEF;\n      if (GDEF && GDEF.glyphClassDef) {\n        // TODO: clean this up\n        var classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n        this.isBase = classID === 1;\n        this.isLigature = classID === 2;\n        this.isMark = classID === 3;\n        this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n      } else {\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n        this.isBase = !this.isMark;\n        this.isLigature = this.codePoints.length > 1;\n        this.markAttachmentType = 0;\n      }\n    }\n  }]);\n\n  return GlyphInfo;\n}();\n\nvar _class$5;\nvar _temp$1;\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nvar HangulShaper = (_temp$1 = _class$5 = function (_DefaultShaper) {\n  _inherits(HangulShaper, _DefaultShaper);\n\n  function HangulShaper() {\n    _classCallCheck(this, HangulShaper);\n\n    return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  HangulShaper.planFeatures = function planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  };\n\n  HangulShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var state = 0;\n    var i = 0;\n    while (i < glyphs.length) {\n      var action = void 0;\n      var glyph = glyphs[i];\n      var code = glyph.codePoints[0];\n      var type = getType(code);\n\n      var _STATE_TABLE$state$ty = STATE_TABLE$1[state][type];\n      action = _STATE_TABLE$state$ty[0];\n      state = _STATE_TABLE$state$ty[1];\n\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  };\n\n  return HangulShaper;\n}(DefaultShaper), _class$5.zeroMarkWidths = 'NONE', _temp$1);\nvar HANGUL_BASE = 0xac00;\nvar HANGUL_END = 0xd7a4;\nvar HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nvar L_BASE = 0x1100; // lead\nvar V_BASE = 0x1161; // vowel\nvar T_BASE = 0x11a7; // trail\nvar L_COUNT = 19;\nvar V_COUNT = 21;\nvar T_COUNT = 28;\nvar L_END = L_BASE + L_COUNT - 1;\nvar V_END = V_BASE + V_COUNT - 1;\nvar T_END = T_BASE + T_COUNT - 1;\nvar DOTTED_CIRCLE = 0x25cc;\n\nvar isL = function isL(code) {\n  return 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\n};\nvar isV = function isV(code) {\n  return 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\n};\nvar isT = function isT(code) {\n  return 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\n};\nvar isTone = function isTone(code) {\n  return 0x302e <= code && code <= 0x302f;\n};\nvar isLVT = function isLVT(code) {\n  return HANGUL_BASE <= code && code <= HANGUL_END;\n};\nvar isLV = function isLV(code) {\n  return code - HANGUL_BASE < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\n};\nvar isCombiningL = function isCombiningL(code) {\n  return L_BASE <= code && code <= L_END;\n};\nvar isCombiningV = function isCombiningV(code) {\n  return V_BASE <= code && code <= V_END;\n};\nvar isCombiningT = function isCombiningT(code) {\n  return T_BASE + 1 && 1 <= code && code <= T_END;\n};\n\n// Character categories\nvar X = 0; // Other character\nvar L = 1; // Leading consonant\nvar V = 2; // Medial vowel\nvar T = 3; // Trailing consonant\nvar LV = 4; // Composed <LV> syllable\nvar LVT = 5; // Composed <LVT> syllable\nvar M = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code)) {\n    return L;\n  }\n  if (isV(code)) {\n    return V;\n  }\n  if (isT(code)) {\n    return T;\n  }\n  if (isLV(code)) {\n    return LV;\n  }\n  if (isLVT(code)) {\n    return LVT;\n  }\n  if (isTone(code)) {\n    return M;\n  }\n  return X;\n}\n\n// State machine actions\nvar NO_ACTION = 0;\nvar DECOMPOSE = 1;\nvar COMPOSE = 2;\nvar TONE_MARK = 4;\nvar INVALID = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nvar STATE_TABLE$1 = [\n//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n\n// State 1: <L>\n[[NO_ACTION, 0], [NO_ACTION, 1], [COMPOSE, 2], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [INVALID, 0]],\n\n// State 2: <L,V> or <LV>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [COMPOSE, 3], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]],\n\n// State 3: <L,V,T> or <LVT>\n[[NO_ACTION, 0], [NO_ACTION, 1], [NO_ACTION, 0], [NO_ACTION, 0], [DECOMPOSE, 2], [DECOMPOSE, 3], [TONE_MARK, 0]]];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyph.codePoints[0];\n\n  var s = code - HANGUL_BASE;\n  var t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  var l = L_BASE + s / V_COUNT | 0;\n  var v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== T_BASE && !font.hasGlyphForCodePoint(t)) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  var ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n\n  var vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n\n  var insert = [ljmo, vjmo];\n\n  if (t > T_BASE) {\n    var tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice.apply(glyphs, [i, 1].concat(insert));\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n  var type = getType(code);\n\n  var prev = glyphs[i - 1].codePoints[0];\n  var prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  var lv = void 0,\n      ljmo = void 0,\n      vjmo = void 0,\n      tjmo = void 0;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    var l = ljmo.codePoints[0];\n    var v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  var t = tjmo && tjmo.codePoints[0] || T_BASE;\n  if (lv != null && (t === T_BASE || isCombiningT(t))) {\n    var s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      var del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) {\n    ljmo.features.ljmo = true;\n  }\n  if (vjmo) {\n    vjmo.features.vjmo = true;\n  }\n  if (tjmo) {\n    tjmo.features.tjmo = true;\n  }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) {\n    return;\n  }\n\n  var prev = glyphs[i - 1].codePoints[0];\n  var len = getLength(prev);\n\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  var glyph = glyphs[i];\n  var code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    var dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    var idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n\nvar stateTable = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 14, 15, 16, 17], [0, 0, 0, 18, 19, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 28, 29, 30, 31, 32, 33, 0, 34, 0, 0, 35, 36, 0, 0, 37, 0], [0, 0, 0, 38, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 39, 0, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 12, 43, 0, 0, 0, 0], [0, 0, 0, 0, 43, 44, 44, 8, 9, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0], [0, 0, 0, 45, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 51, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 55, 56, 57, 58, 0, 59, 0, 0, 60, 61, 0, 0, 62, 0], [0, 0, 0, 4, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 63, 64, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 63, 0, 0], [0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 11, 12, 13, 0, 2, 16, 0], [0, 0, 0, 18, 65, 20, 21, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 0, 0], [0, 0, 0, 69, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 73, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 75, 0, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 25, 79, 0, 0, 0, 0], [0, 0, 0, 18, 19, 20, 74, 22, 23, 0, 24, 0, 0, 25, 26, 0, 0, 27, 0], [0, 0, 0, 81, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 87, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 18, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 89, 90, 0, 0, 76, 77, 0, 23, 0, 24, 0, 0, 0, 78, 0, 89, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 0, 0], [0, 0, 0, 94, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 96, 0, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 102, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 108, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 28, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 110, 111, 0, 0, 97, 98, 0, 33, 0, 34, 0, 0, 0, 99, 0, 110, 0, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 0, 0], [0, 0, 0, 0, 5, 7, 7, 8, 9, 0, 10, 0, 0, 0, 13, 0, 0, 16, 0], [0, 0, 0, 115, 116, 117, 118, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 39, 0, 122, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0], [0, 39, 0, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 46, 47, 48, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 47, 47, 49, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 128, 127, 127, 49, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 129, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 135, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 136, 0, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0], [0, 0, 0, 0, 140, 141, 141, 57, 58, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0], [0, 0, 0, 142, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 148, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 53, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 150, 151, 0, 0, 137, 138, 0, 58, 0, 59, 0, 0, 0, 139, 0, 150, 0, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 157, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 3, 4, 5, 159, 160, 8, 161, 0, 162, 0, 11, 12, 163, 0, 75, 16, 0], [0, 0, 0, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0], [0, 124, 64, 0, 0, 40, 164, 0, 9, 0, 10, 0, 0, 0, 42, 0, 124, 0, 0], [0, 0, 0, 0, 0, 70, 70, 0, 71, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 167, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 19, 74, 74, 22, 23, 0, 24, 0, 0, 0, 26, 0, 0, 27, 0], [0, 0, 0, 0, 79, 80, 80, 22, 23, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 172, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 75, 0, 176, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 178, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0], [0, 75, 0, 0, 0, 175, 179, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 180, 180, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 82, 83, 84, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 83, 83, 85, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 182, 181, 181, 85, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 183, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 191, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0], [0, 178, 90, 0, 0, 76, 193, 0, 23, 0, 24, 0, 0, 0, 78, 0, 178, 0, 0], [0, 0, 0, 0, 29, 95, 31, 32, 33, 0, 34, 0, 0, 0, 36, 0, 0, 37, 0], [0, 0, 0, 0, 100, 101, 101, 32, 33, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 198, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 96, 0, 202, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 204, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0], [0, 96, 0, 0, 0, 201, 205, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 206, 206, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 103, 104, 105, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 104, 104, 106, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 208, 207, 207, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 209, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 217, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0], [0, 204, 111, 0, 0, 97, 219, 0, 33, 0, 34, 0, 0, 0, 99, 0, 204, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 223, 0, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 119, 225, 0, 0, 0, 0], [0, 0, 0, 115, 116, 117, 222, 8, 9, 0, 10, 0, 0, 119, 120, 0, 0, 16, 0], [0, 0, 0, 115, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 226, 64, 0, 0, 40, 224, 0, 9, 0, 10, 0, 0, 0, 42, 0, 226, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 39, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 44, 44, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 229, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 39, 0, 122, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 39, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 231, 231, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 130, 131, 132, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 131, 131, 133, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 234, 233, 233, 133, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 235, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 54, 56, 56, 57, 58, 0, 59, 0, 0, 0, 61, 0, 0, 62, 0], [0, 0, 0, 240, 241, 242, 243, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 136, 0, 247, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 249, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0], [0, 136, 0, 0, 0, 246, 250, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 251, 251, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 143, 144, 145, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 144, 144, 146, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 253, 252, 252, 146, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 254, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 262, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0], [0, 249, 151, 0, 0, 137, 264, 0, 58, 0, 59, 0, 0, 0, 139, 0, 249, 0, 0], [0, 0, 0, 221, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 158, 225, 0, 0, 0, 0], [0, 0, 0, 155, 116, 156, 222, 8, 9, 0, 10, 0, 0, 158, 120, 0, 0, 16, 0], [0, 0, 0, 155, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 43, 266, 266, 8, 161, 0, 24, 0, 0, 12, 267, 0, 0, 0, 0], [0, 75, 0, 176, 43, 268, 268, 269, 161, 0, 24, 0, 0, 0, 267, 0, 75, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 271, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0], [0, 273, 274, 0, 0, 40, 41, 0, 9, 0, 10, 0, 0, 0, 42, 0, 273, 0, 0], [0, 0, 0, 40, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 121, 275, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 279, 0, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 173, 281, 0, 0, 0, 0], [0, 0, 0, 169, 170, 171, 278, 22, 23, 0, 24, 0, 0, 173, 174, 0, 0, 27, 0], [0, 0, 0, 169, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 282, 90, 0, 0, 76, 280, 0, 23, 0, 24, 0, 0, 0, 78, 0, 282, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 75, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 80, 80, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 285, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 75, 0, 176, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 75, 0, 0], [0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 287, 287, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 184, 185, 186, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 185, 185, 187, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 290, 289, 289, 187, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 291, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 277, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 192, 281, 0, 0, 0, 0], [0, 0, 0, 189, 170, 190, 278, 22, 23, 0, 24, 0, 0, 192, 174, 0, 0, 27, 0], [0, 0, 0, 189, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 76, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 175, 296, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 299, 0, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 199, 301, 0, 0, 0, 0], [0, 0, 0, 195, 196, 197, 298, 32, 33, 0, 34, 0, 0, 199, 200, 0, 0, 37, 0], [0, 0, 0, 195, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 302, 111, 0, 0, 97, 300, 0, 33, 0, 34, 0, 0, 0, 99, 0, 302, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 96, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 101, 101, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 305, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 96, 0, 202, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 96, 0, 0], [0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 307, 307, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 210, 211, 212, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 211, 211, 213, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 310, 309, 309, 213, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 311, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 297, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 218, 301, 0, 0, 0, 0], [0, 0, 0, 215, 196, 216, 298, 32, 33, 0, 34, 0, 0, 218, 200, 0, 0, 37, 0], [0, 0, 0, 215, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 97, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 201, 316, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 116, 222, 222, 8, 9, 0, 10, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 9, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 320, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 223, 0, 323, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 0, 0, 121, 324, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 325, 318, 326, 327, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 64, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 228, 121, 0, 9, 0, 10, 0, 0, 230, 0, 0, 0, 0, 0], [0, 0, 0, 227, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0], [0, 0, 0, 0, 0, 329, 329, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 236, 237, 238, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 237, 237, 239, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 332, 331, 331, 239, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 333, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 337, 0, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 244, 339, 0, 0, 0, 0], [0, 0, 0, 240, 241, 242, 336, 57, 58, 0, 59, 0, 0, 244, 245, 0, 0, 62, 0], [0, 0, 0, 240, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 340, 151, 0, 0, 137, 338, 0, 58, 0, 59, 0, 0, 0, 139, 0, 340, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 136, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 141, 141, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 343, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 136, 0, 247, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 136, 0, 0], [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 345, 345, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 255, 256, 257, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 256, 256, 258, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 348, 347, 347, 258, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 349, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 335, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 263, 339, 0, 0, 0, 0], [0, 0, 0, 260, 241, 261, 336, 57, 58, 0, 59, 0, 0, 263, 245, 0, 0, 62, 0], [0, 0, 0, 260, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 137, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 246, 354, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 126, 126, 8, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 355, 90, 0, 0, 121, 125, 0, 9, 0, 10, 0, 0, 0, 42, 0, 355, 0, 0], [0, 0, 0, 0, 0, 356, 356, 269, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 357, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 366, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 40, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 170, 278, 278, 22, 23, 0, 24, 0, 0, 0, 174, 0, 0, 27, 0], [0, 0, 0, 0, 281, 80, 80, 22, 23, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 372, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 279, 0, 375, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 0, 0, 175, 376, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 377, 370, 378, 379, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 90, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 284, 175, 0, 23, 0, 24, 0, 0, 286, 0, 0, 0, 0, 0], [0, 0, 0, 283, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0], [0, 0, 0, 0, 0, 381, 381, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 292, 293, 294, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 293, 293, 295, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 0, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 384, 383, 383, 295, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 385, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 76, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 196, 298, 298, 32, 33, 0, 34, 0, 0, 0, 200, 0, 0, 37, 0], [0, 0, 0, 0, 301, 101, 101, 32, 33, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 390, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 299, 0, 393, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 0, 0, 201, 394, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 395, 388, 396, 397, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 111, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 304, 201, 0, 33, 0, 34, 0, 0, 306, 0, 0, 0, 0, 0], [0, 0, 0, 303, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0], [0, 0, 0, 0, 0, 399, 399, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 312, 313, 314, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 313, 313, 315, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 0, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 402, 401, 401, 315, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 403, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 97, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 407, 0, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 321, 409, 0, 0, 0, 0], [0, 0, 0, 317, 318, 319, 406, 8, 9, 0, 10, 0, 0, 321, 322, 0, 0, 16, 0], [0, 0, 0, 317, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 410, 64, 0, 0, 40, 408, 0, 9, 0, 10, 0, 0, 0, 42, 0, 410, 0, 0], [0, 223, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 223, 0, 323, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 223, 0, 0], [0, 0, 0, 405, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 328, 409, 0, 0, 0, 0], [0, 0, 0, 325, 318, 326, 406, 8, 9, 0, 10, 0, 0, 328, 322, 0, 0, 16, 0], [0, 0, 0, 325, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0], [0, 0, 0, 0, 0, 411, 411, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 121, 334, 0, 9, 0, 10, 0, 0, 0, 42, 0, 0, 0, 0], [0, 0, 0, 0, 413, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 241, 336, 336, 57, 58, 0, 59, 0, 0, 0, 245, 0, 0, 62, 0], [0, 0, 0, 0, 339, 141, 141, 57, 58, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 417, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 337, 0, 420, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 0, 0, 246, 421, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 422, 415, 423, 424, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 151, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 342, 246, 0, 58, 0, 59, 0, 0, 344, 0, 0, 0, 0, 0], [0, 0, 0, 341, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0], [0, 0, 0, 0, 0, 426, 426, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 350, 351, 352, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 351, 351, 353, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 0, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 429, 428, 428, 353, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 430, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 137, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 434, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 180, 180, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 358, 359, 360, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 359, 359, 361, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 437, 436, 436, 361, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 438, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 443, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 367, 225, 0, 0, 0, 0], [0, 0, 0, 364, 116, 365, 445, 8, 161, 0, 162, 0, 0, 367, 120, 0, 0, 16, 0], [0, 0, 0, 364, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 448, 0, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 373, 450, 0, 0, 0, 0], [0, 0, 0, 369, 370, 371, 447, 22, 23, 0, 24, 0, 0, 373, 374, 0, 0, 27, 0], [0, 0, 0, 369, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 451, 90, 0, 0, 76, 449, 0, 23, 0, 24, 0, 0, 0, 78, 0, 451, 0, 0], [0, 279, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 279, 0, 375, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 279, 0, 0], [0, 0, 0, 446, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 380, 450, 0, 0, 0, 0], [0, 0, 0, 377, 370, 378, 447, 22, 23, 0, 24, 0, 0, 380, 374, 0, 0, 27, 0], [0, 0, 0, 377, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0], [0, 0, 0, 0, 0, 452, 452, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 76, 175, 386, 0, 23, 0, 24, 0, 0, 0, 78, 0, 0, 0, 0], [0, 0, 0, 0, 454, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 457, 0, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 391, 459, 0, 0, 0, 0], [0, 0, 0, 387, 388, 389, 456, 32, 33, 0, 34, 0, 0, 391, 392, 0, 0, 37, 0], [0, 0, 0, 387, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 460, 111, 0, 0, 97, 458, 0, 33, 0, 34, 0, 0, 0, 99, 0, 460, 0, 0], [0, 299, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 299, 0, 393, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 299, 0, 0], [0, 0, 0, 455, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 398, 459, 0, 0, 0, 0], [0, 0, 0, 395, 388, 396, 456, 32, 33, 0, 34, 0, 0, 398, 392, 0, 0, 37, 0], [0, 0, 0, 395, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0], [0, 0, 0, 0, 0, 461, 461, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 97, 201, 404, 0, 33, 0, 34, 0, 0, 0, 99, 0, 0, 0, 0], [0, 0, 0, 0, 463, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 318, 406, 406, 8, 9, 0, 10, 0, 0, 0, 322, 0, 0, 16, 0], [0, 0, 0, 0, 409, 44, 44, 8, 9, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 467, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 407, 0, 470, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 0, 0, 121, 471, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 472, 465, 473, 474, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0], [0, 0, 0, 0, 0, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 479, 0, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 418, 481, 0, 0, 0, 0], [0, 0, 0, 414, 415, 416, 478, 57, 58, 0, 59, 0, 0, 418, 419, 0, 0, 62, 0], [0, 0, 0, 414, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 482, 151, 0, 0, 137, 480, 0, 58, 0, 59, 0, 0, 0, 139, 0, 482, 0, 0], [0, 337, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 337, 0, 420, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 337, 0, 0], [0, 0, 0, 477, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 425, 481, 0, 0, 0, 0], [0, 0, 0, 422, 415, 423, 478, 57, 58, 0, 59, 0, 0, 425, 419, 0, 0, 62, 0], [0, 0, 0, 422, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0], [0, 0, 0, 0, 0, 483, 483, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 137, 246, 431, 0, 58, 0, 59, 0, 0, 0, 139, 0, 0, 0, 0], [0, 0, 0, 0, 485, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 444, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 435, 225, 0, 0, 0, 0], [0, 0, 0, 432, 116, 433, 445, 8, 161, 0, 162, 0, 0, 435, 120, 0, 0, 16, 0], [0, 0, 0, 432, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 0, 486, 486, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 439, 440, 441, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 440, 440, 442, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 489, 488, 488, 442, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 490, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 497, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 0, 116, 445, 445, 8, 161, 0, 162, 0, 0, 0, 120, 0, 0, 16, 0], [0, 0, 0, 0, 225, 44, 44, 8, 161, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0], [0, 0, 0, 0, 370, 447, 447, 22, 23, 0, 24, 0, 0, 0, 374, 0, 0, 27, 0], [0, 0, 0, 0, 450, 80, 80, 22, 23, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 502, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 448, 0, 505, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 0, 0, 175, 506, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 507, 500, 508, 509, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0], [0, 0, 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 388, 456, 456, 32, 33, 0, 34, 0, 0, 0, 392, 0, 0, 37, 0], [0, 0, 0, 0, 459, 101, 101, 32, 33, 0, 0, 0, 0, 0, 459, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 515, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 457, 0, 518, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 0, 0, 201, 519, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 520, 513, 521, 522, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 0, 0], [0, 0, 0, 0, 0, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 527, 0, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 468, 529, 0, 0, 0, 0], [0, 0, 0, 464, 465, 466, 526, 8, 9, 0, 10, 0, 0, 468, 469, 0, 0, 16, 0], [0, 0, 0, 464, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 530, 64, 0, 0, 40, 528, 0, 9, 0, 10, 0, 0, 0, 42, 0, 530, 0, 0], [0, 407, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 407, 0, 470, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 407, 0, 0], [0, 0, 0, 525, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 475, 529, 0, 0, 0, 0], [0, 0, 0, 472, 465, 473, 526, 8, 9, 0, 10, 0, 0, 475, 469, 0, 0, 16, 0], [0, 0, 0, 472, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0], [0, 0, 0, 0, 415, 478, 478, 57, 58, 0, 59, 0, 0, 0, 419, 0, 0, 62, 0], [0, 0, 0, 0, 481, 141, 141, 57, 58, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 534, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 479, 0, 537, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 0, 0, 246, 538, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 539, 532, 540, 541, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0], [0, 0, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0], [0, 0, 0, 0, 0, 544, 544, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 491, 492, 493, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 492, 492, 494, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 547, 546, 546, 494, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 548, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 274, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 496, 368, 0, 161, 0, 162, 0, 0, 498, 0, 0, 0, 0, 0], [0, 0, 0, 495, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 553, 0, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 503, 555, 0, 0, 0, 0], [0, 0, 0, 499, 500, 501, 552, 22, 23, 0, 24, 0, 0, 503, 504, 0, 0, 27, 0], [0, 0, 0, 499, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 556, 90, 0, 0, 76, 554, 0, 23, 0, 24, 0, 0, 0, 78, 0, 556, 0, 0], [0, 448, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 448, 0, 505, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 448, 0, 0], [0, 0, 0, 551, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 510, 555, 0, 0, 0, 0], [0, 0, 0, 507, 500, 508, 552, 22, 23, 0, 24, 0, 0, 510, 504, 0, 0, 27, 0], [0, 0, 0, 507, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 559, 0, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 516, 561, 0, 0, 0, 0], [0, 0, 0, 512, 513, 514, 558, 32, 33, 0, 34, 0, 0, 516, 517, 0, 0, 37, 0], [0, 0, 0, 512, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 562, 111, 0, 0, 97, 560, 0, 33, 0, 34, 0, 0, 0, 99, 0, 562, 0, 0], [0, 457, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 457, 0, 518, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 457, 0, 0], [0, 0, 0, 557, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 523, 561, 0, 0, 0, 0], [0, 0, 0, 520, 513, 521, 558, 32, 33, 0, 34, 0, 0, 523, 517, 0, 0, 37, 0], [0, 0, 0, 520, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0], [0, 0, 0, 0, 465, 526, 526, 8, 9, 0, 10, 0, 0, 0, 469, 0, 0, 16, 0], [0, 0, 0, 0, 529, 44, 44, 8, 9, 0, 0, 0, 0, 0, 529, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 565, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 527, 0, 567, 0, 123, 123, 8, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 0, 0, 121, 568, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 569, 66, 570, 571, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 575, 0, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 535, 577, 0, 0, 0, 0], [0, 0, 0, 531, 532, 533, 574, 57, 58, 0, 59, 0, 0, 535, 536, 0, 0, 62, 0], [0, 0, 0, 531, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 578, 151, 0, 0, 137, 576, 0, 58, 0, 59, 0, 0, 0, 139, 0, 578, 0, 0], [0, 479, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 479, 0, 537, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 479, 0, 0], [0, 0, 0, 573, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 542, 577, 0, 0, 0, 0], [0, 0, 0, 539, 532, 540, 574, 57, 58, 0, 59, 0, 0, 542, 536, 0, 0, 62, 0], [0, 0, 0, 539, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0], [0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0], [0, 0, 0, 0, 0, 579, 579, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 549, 368, 550, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 0, 368, 368, 0, 161, 0, 162, 0, 0, 0, 362, 0, 0, 0, 0], [0, 0, 0, 0, 581, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 500, 552, 552, 22, 23, 0, 24, 0, 0, 0, 504, 0, 0, 27, 0], [0, 0, 0, 0, 555, 80, 80, 22, 23, 0, 0, 0, 0, 0, 555, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 584, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 553, 0, 586, 0, 177, 177, 22, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 0, 0, 175, 587, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 588, 91, 589, 590, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 0, 513, 558, 558, 32, 33, 0, 34, 0, 0, 0, 517, 0, 0, 37, 0], [0, 0, 0, 0, 561, 101, 101, 32, 33, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 594, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 559, 0, 596, 0, 203, 203, 32, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 0, 0, 201, 597, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 598, 112, 599, 600, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 566, 165, 0, 0, 0, 0], [0, 0, 0, 563, 66, 564, 67, 8, 9, 0, 10, 0, 0, 566, 68, 0, 0, 16, 0], [0, 0, 0, 563, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 527, 0, 0, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 527, 0, 567, 0, 121, 121, 0, 9, 0, 10, 0, 0, 0, 42, 0, 527, 0, 0], [0, 0, 0, 602, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 165, 44, 44, 8, 9, 0, 0, 0, 0, 572, 165, 0, 0, 0, 0], [0, 0, 0, 569, 66, 570, 67, 8, 9, 0, 10, 0, 0, 572, 68, 0, 0, 16, 0], [0, 0, 0, 569, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 0, 532, 574, 574, 57, 58, 0, 59, 0, 0, 0, 536, 0, 0, 62, 0], [0, 0, 0, 0, 577, 141, 141, 57, 58, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 605, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 575, 0, 607, 0, 248, 248, 57, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 0, 0, 246, 608, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 609, 152, 610, 611, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0], [0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 585, 194, 0, 0, 0, 0], [0, 0, 0, 582, 91, 583, 92, 22, 23, 0, 24, 0, 0, 585, 93, 0, 0, 27, 0], [0, 0, 0, 582, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 553, 0, 0, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 553, 0, 586, 0, 175, 175, 0, 23, 0, 24, 0, 0, 0, 78, 0, 553, 0, 0], [0, 0, 0, 614, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 194, 80, 80, 22, 23, 0, 0, 0, 0, 591, 194, 0, 0, 0, 0], [0, 0, 0, 588, 91, 589, 92, 22, 23, 0, 24, 0, 0, 591, 93, 0, 0, 27, 0], [0, 0, 0, 588, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 595, 220, 0, 0, 0, 0], [0, 0, 0, 592, 112, 593, 113, 32, 33, 0, 34, 0, 0, 595, 114, 0, 0, 37, 0], [0, 0, 0, 592, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 559, 0, 0, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 559, 0, 596, 0, 201, 201, 0, 33, 0, 34, 0, 0, 0, 99, 0, 559, 0, 0], [0, 0, 0, 615, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 220, 101, 101, 32, 33, 0, 0, 0, 0, 601, 220, 0, 0, 0, 0], [0, 0, 0, 598, 112, 599, 113, 32, 33, 0, 34, 0, 0, 601, 114, 0, 0, 37, 0], [0, 0, 0, 598, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 66, 67, 67, 8, 9, 0, 10, 0, 0, 0, 68, 0, 0, 16, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 606, 265, 0, 0, 0, 0], [0, 0, 0, 603, 152, 604, 153, 57, 58, 0, 59, 0, 0, 606, 154, 0, 0, 62, 0], [0, 0, 0, 603, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 575, 0, 0, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 575, 0, 607, 0, 246, 246, 0, 58, 0, 59, 0, 0, 0, 139, 0, 575, 0, 0], [0, 0, 0, 616, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 265, 141, 141, 57, 58, 0, 0, 0, 0, 612, 265, 0, 0, 0, 0], [0, 0, 0, 609, 152, 610, 153, 57, 58, 0, 59, 0, 0, 612, 154, 0, 0, 62, 0], [0, 0, 0, 609, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 0, 0], [0, 0, 0, 0, 91, 92, 92, 22, 23, 0, 24, 0, 0, 0, 93, 0, 0, 27, 0], [0, 0, 0, 0, 112, 113, 113, 32, 33, 0, 34, 0, 0, 0, 114, 0, 0, 37, 0], [0, 0, 0, 0, 152, 153, 153, 57, 58, 0, 59, 0, 0, 0, 154, 0, 0, 62, 0]];\nvar accepting = [false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true];\nvar tags = [[], [\"broken_cluster\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"symbol_cluster\"], [], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"broken_cluster\"], [\"symbol_cluster\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [\"standalone_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [], [], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [], [], [\"consonant_syllable\", \"broken_cluster\"], [\"consonant_syllable\", \"broken_cluster\"], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [], [], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"consonant_syllable\"], [], [\"consonant_syllable\"], [\"consonant_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"vowel_syllable\"], [], [\"vowel_syllable\"], [\"vowel_syllable\"], [\"broken_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"standalone_cluster\"], [\"standalone_cluster\"], [], [\"consonant_syllable\"], [\"vowel_syllable\"], [\"standalone_cluster\"]];\nvar indicMachine = {\n\tstateTable: stateTable,\n\taccepting: accepting,\n\ttags: tags\n};\n\nvar categories = [\"O\", \"IND\", \"S\", \"GB\", \"B\", \"FM\", \"CGJ\", \"VMAbv\", \"VMPst\", \"VAbv\", \"VPst\", \"CMBlw\", \"VPre\", \"VBlw\", \"H\", \"VMBlw\", \"CMAbv\", \"MBlw\", \"CS\", \"R\", \"SUB\", \"MPst\", \"MPre\", \"FAbv\", \"FPst\", \"FBlw\", \"SMAbv\", \"SMBlw\", \"VMPre\", \"ZWNJ\", \"ZWJ\", \"WJ\", \"VS\", \"N\", \"HN\", \"MAbv\"];\nvar decompositions$1 = { \"2507\": [2503, 2494], \"2508\": [2503, 2519], \"2888\": [2887, 2902], \"2891\": [2887, 2878], \"2892\": [2887, 2903], \"3018\": [3014, 3006], \"3019\": [3015, 3006], \"3020\": [3014, 3031], \"3144\": [3142, 3158], \"3264\": [3263, 3285], \"3271\": [3270, 3285], \"3272\": [3270, 3286], \"3274\": [3270, 3266], \"3275\": [3270, 3266, 3285], \"3402\": [3398, 3390], \"3403\": [3399, 3390], \"3404\": [3398, 3415], \"3546\": [3545, 3530], \"3548\": [3545, 3535], \"3549\": [3545, 3535, 3530], \"3550\": [3545, 3551], \"3635\": [3661, 3634], \"3763\": [3789, 3762], \"3955\": [3953, 3954], \"3957\": [3953, 3956], \"3958\": [4018, 3968], \"3959\": [4018, 3953, 3968], \"3960\": [4019, 3968], \"3961\": [4019, 3953, 3968], \"3969\": [3953, 3968], \"6971\": [6970, 6965], \"6973\": [6972, 6965], \"6976\": [6974, 6965], \"6977\": [6975, 6965], \"6979\": [6978, 6965], \"69934\": [69937, 69927], \"69935\": [69938, 69927], \"70475\": [70471, 70462], \"70476\": [70471, 70487], \"70843\": [70841, 70842], \"70844\": [70841, 70832], \"70846\": [70841, 70845], \"71098\": [71096, 71087], \"71099\": [71097, 71087] };\nvar stateTable$1 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 2, 0, 24, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 27, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 39, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 9, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 0, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 49, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 0, 11, 12, 0, 14, 0, 16, 0, 0, 0, 11, 0, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 33, 0, 0, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 0, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 53, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 0, 35, 36, 0, 38, 0, 40, 0, 0, 0, 35, 0, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 0, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 5, 0, 6, 7, 8, 9, 48, 11, 12, 13, 14, 48, 16, 0, 0, 18, 11, 19, 20, 21, 22, 0, 0, 23, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 0, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 29, 0, 30, 31, 32, 33, 52, 35, 36, 37, 38, 52, 40, 0, 0, 41, 35, 42, 43, 44, 45, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 51, 0]];\nvar accepting$1 = [false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];\nvar tags$1 = [[], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"broken_cluster\"], [\"independent_cluster\"], [\"symbol_cluster\"], [\"symbol_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"virama_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"broken_cluster\"], [\"broken_cluster\"], [\"numeral_cluster\"], [\"number_joiner_terminated_cluster\"], [\"standard_cluster\"], [\"standard_cluster\"], [\"numeral_cluster\"]];\nvar useData = {\n\tcategories: categories,\n\tdecompositions: decompositions$1,\n\tstateTable: stateTable$1,\n\taccepting: accepting$1,\n\ttags: tags$1\n};\n\n// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nvar CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13, // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14, // Khmer-style Virama.\n  Repha: 1 << 15, // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17, // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nvar POSITIONS = {\n  Start: 1 << 0,\n\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n\n  Above_C: 1 << 6,\n\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n\n  End: 1 << 15\n};\n\nvar CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nvar JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nvar HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\n\nvar INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nvar INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n\nvar _class$6;\nvar _temp$2;\nvar decompositions = useData.decompositions;\n\nvar trie$1 = new UnicodeTrie(Buffer(\"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\",\"base64\"));\nvar stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nvar IndicShaper = (_temp$2 = _class$6 = function (_DefaultShaper) {\n  _inherits(IndicShaper, _DefaultShaper);\n\n  function IndicShaper() {\n    _classCallCheck(this, IndicShaper);\n\n    return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  IndicShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    plan.addStage(['locl', 'ccmp']);\n\n    plan.addStage(initialReordering);\n\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n\n    plan.addStage(finalReordering);\n\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  };\n\n  IndicShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      var d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        var decomposed = d.map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n\n  return IndicShaper;\n}(DefaultShaper), _class$6.zeroMarkWidths = 'NONE', _temp$2);\nfunction indicCategory(glyph) {\n  return trie$1.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie$1.get(glyph.codePoints[0]) & 0xff);\n}\n\nvar IndicInfo = function IndicInfo(category, position, syllableType, syllable) {\n  _classCallCheck(this, IndicInfo);\n\n  this.category = category;\n  this.position = position;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\n\nfunction setupSyllables(font, glyphs) {\n  var syllable = 0;\n  var last = 0;\n  for (var _iterator = stateMachine.match(glyphs.map(indicCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        start = _ref2[0],\n        end = _ref2[1],\n        tags = _ref2[2];\n\n    if (start > last) {\n      ++syllable;\n      for (var _i2 = last; _i2 < start; _i2++) {\n        glyphs[_i2].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable;\n\n    // Create shaper info\n    for (var _i3 = start; _i3 <= end; _i3++) {\n      glyphs[_i3].shaperInfo = new IndicInfo(1 << indicCategory(glyphs[_i3]), indicPosition(glyphs[_i3]), tags[0], syllable);\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n    for (var i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n    var _glyph$features;\n\n    var _ref3;\n\n    if (_isArray2) {\n      if (_i4 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i4++];\n    } else {\n      _i4 = _iterator2.next();\n      if (_i4.done) break;\n      _ref3 = _i4.value;\n    }\n\n    var glyph = _ref3;\n\n    glyph.features = (_glyph$features = {}, _glyph$features[feature] = true, _glyph$features);\n  }\n\n  var GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  var glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  var virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    var info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    var _glyphs$start$shaperI = glyphs[start].shaperInfo,\n        category = _glyphs$start$shaperI.category,\n        syllableType = _glyphs$start$shaperI.syllableType;\n\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(1 << indicCategory(g), indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n\n      // Insert after possible Repha.\n      var _i5 = start;\n      while (_i5 < end && glyphs[_i5].shaperInfo.category === CATEGORIES.Repha) {\n        _i5++;\n      }\n\n      glyphs.splice(_i5++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    var base = end;\n    var limit = start;\n    var hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      var _g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(_g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && wouldSubstitute(_g, 'rphf')) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          var _i6 = end;\n          var seenBelow = false;\n\n          do {\n            var _info = glyphs[--_i6].shaperInfo;\n\n            // until a consonant is found\n            if (isConsonant(glyphs[_i6])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (_info.position !== POSITIONS.Below_C && (_info.position !== POSITIONS.Post_C || seenBelow)) {\n                base = _i6;\n                break;\n              }\n\n              // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n              if (_info.position === POSITIONS.Below_C) {\n                seenBelow = true;\n              }\n\n              base = _i6;\n            } else if (start < _i6 && _info.category === CATEGORIES.ZWJ && glyphs[_i6 - 1].shaperInfo.category === CATEGORIES.H) {\n              // A ZWJ after a Halant stops the base search, and requests an explicit\n              // half form.\n              // A ZWJ before a Halant, requests a subjoined form instead, and hence\n              // search continues.  This is particularly important for Bengali\n              // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n              break;\n            }\n          } while (_i6 > limit);\n          break;\n        }\n\n      case 'First':\n        {\n          // The first consonant is always the base.\n          base = start;\n\n          // Mark all subsequent consonants as below.\n          for (var _i7 = base + 1; _i7 < end; _i7++) {\n            if (isConsonant(glyphs[_i7])) {\n              glyphs[_i7].shaperInfo.position = POSITIONS.Below_C;\n            }\n          }\n        }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (var _i8 = start; _i8 < base; _i8++) {\n      var _info2 = glyphs[_i8].shaperInfo;\n      _info2.position = Math.min(POSITIONS.Pre_C, _info2.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (var _i9 = base + 1; _i9 < end; _i9++) {\n      if (glyphs[_i9].shaperInfo.category === CATEGORIES.M) {\n        for (var j = _i9 + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      var disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (var _i10 = base + 1; _i10 < end; _i10++) {\n        if (glyphs[_i10].shaperInfo.category === CATEGORIES.H) {\n          var _j = void 0;\n          for (_j = end - 1; _j > _i10; _j--) {\n            if (isConsonant(glyphs[_j]) || disallowDoubleHalants && glyphs[_j].shaperInfo.category === CATEGORIES.H) {\n              break;\n            }\n          }\n\n          if (glyphs[_j].shaperInfo.category !== CATEGORIES.H && _j > _i10) {\n            // Move Halant to after last consonant.\n            var t = glyphs[_i10];\n            glyphs.splice.apply(glyphs, [_i10, 0].concat(glyphs.splice(_i10 + 1, _j - _i10)));\n            glyphs[_j] = t;\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    var lastPos = POSITIONS.Start;\n    for (var _i11 = start; _i11 < end; _i11++) {\n      var _info3 = glyphs[_i11].shaperInfo;\n      if (_info3.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & _info3.category)) {\n        _info3.position = lastPos;\n        if (_info3.category === CATEGORIES.H && _info3.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (var _j2 = _i11; _j2 > start; _j2--) {\n            if (glyphs[_j2 - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              _info3.position = glyphs[_j2 - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (_info3.position !== POSITIONS.SMVD) {\n        lastPos = _info3.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    var last = base;\n    for (var _i12 = base + 1; _i12 < end; _i12++) {\n      if (isConsonant(glyphs[_i12])) {\n        for (var _j3 = last + 1; _j3 < _i12; _j3++) {\n          if (glyphs[_j3].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[_j3].shaperInfo.position = glyphs[_i12].shaperInfo.position;\n          }\n        }\n        last = _i12;\n      } else if (glyphs[_i12].shaperInfo.category === CATEGORIES.M) {\n        last = _i12;\n      }\n    }\n\n    var arr = glyphs.slice(start, end);\n    arr.sort(function (a, b) {\n      return a.shaperInfo.position - b.shaperInfo.position;\n    });\n    glyphs.splice.apply(glyphs, [start, arr.length].concat(arr));\n\n    // Find base again\n    for (var _i13 = start; _i13 < end; _i13++) {\n      if (glyphs[_i13].shaperInfo.position === POSITIONS.Base_C) {\n        base = _i13;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (var _i14 = start; _i14 < end && glyphs[_i14].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; _i14++) {\n      glyphs[_i14].features.rphf = true;\n    }\n\n    // Pre-base\n    var blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (var _i15 = start; _i15 < base; _i15++) {\n      glyphs[_i15].features.half = true;\n      if (blwf) {\n        glyphs[_i15].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (var _i16 = base + 1; _i16 < end; _i16++) {\n      glyphs[_i16].features.abvf = true;\n      glyphs[_i16].features.pstf = true;\n      glyphs[_i16].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (var _i17 = start; _i17 + 1 < base; _i17++) {\n        if (glyphs[_i17].shaperInfo.category === CATEGORIES.Ra && glyphs[_i17 + 1].shaperInfo.category === CATEGORIES.H && (_i17 + 1 === base || glyphs[_i17 + 2].shaperInfo.category === CATEGORIES.ZWJ)) {\n          glyphs[_i17].features.blwf = true;\n          glyphs[_i17 + 1].features.blwf = true;\n        }\n      }\n    }\n\n    var prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (var _i18 = base + 1; _i18 + prefLen - 1 < end; _i18++) {\n        var _g2 = [glyphs[_i18].copy(), glyphs[_i18 + 1].copy()];\n        if (wouldSubstitute(_g2, 'pref')) {\n          for (var _j4 = 0; _j4 < prefLen; _j4++) {\n            glyphs[_i18++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; _i18 < end; _i18++) {\n              glyphs[_i18].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (var _i19 = start + 1; _i19 < end; _i19++) {\n      if (isJoiner(glyphs[_i19])) {\n        var nonJoiner = glyphs[_i19].shaperInfo.category === CATEGORIES.ZWNJ;\n        var _j5 = _i19;\n\n        do {\n          _j5--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[_j5].features.half;\n          }\n        } while (_j5 > start && !isConsonant(glyphs[_j5]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  var indicConfig = plan.indicConfig;\n  var features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (var start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    var tryPref = !!features.pref;\n\n    // Find base again\n    var base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (var i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (var _i20 = base + 1; _i20 < end; _i20++) {\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n\n            if (_i20 === end || !isHalantOrCoeng(glyphs[_i20])) {\n              break;\n            }\n\n            _i20++; // Skip halant.\n            while (_i20 < end && isJoiner(glyphs[_i20])) {\n              _i20++;\n            }\n\n            if (_i20 < end && isConsonant(glyphs[_i20]) && glyphs[_i20].shaperInfo.position === POSITIONS.Below_C) {\n              base = _i20;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) {\n      // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      var newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (var _i21 = newPos; _i21 > start; _i21--) {\n          if (glyphs[_i21 - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            var oldPos = _i21 - 1;\n            if (oldPos < base && base <= newPos) {\n              // Shouldn't actually happen.\n              base--;\n            }\n\n            var tmp = glyphs[oldPos];\n            glyphs.splice.apply(glyphs, [oldPos, 0].concat(glyphs.splice(oldPos + 1, newPos - oldPos)));\n            glyphs[newPos] = tmp;\n\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end && glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === CATEGORIES.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      var newRephPos = void 0;\n      var rephPos = indicConfig.rephPos;\n      var found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (var _i22 = base + 1; _i22 < newRephPos; _i22++) {\n            if (glyphs[_i22].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      var reph = glyphs[start];\n      glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, newRephPos - start)));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (var _i23 = base + 1; _i23 < end; _i23++) {\n        if (glyphs[_i23].features.pref) {\n          // 1. Only reorder a glyph produced by substitution during application\n          //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n          //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[_i23].isLigated && !glyphs[_i23].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            var _newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (_newPos > start && !(glyphs[_newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                _newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (_newPos > start && glyphs[_newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                var _oldPos2 = _i23;\n                for (var j = base + 1; j < _oldPos2; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    _newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (_newPos > start && isHalantOrCoeng(glyphs[_newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (_newPos < end && isJoiner(glyphs[_newPos])) {\n                _newPos++;\n              }\n            }\n\n            var _oldPos = _i23;\n            var _tmp = glyphs[_oldPos];\n            glyphs.splice.apply(glyphs, [_newPos + 1, 0].concat(glyphs.splice(_newPos, _oldPos - _newPos)));\n            glyphs[_newPos] = _tmp;\n\n            if (_newPos <= base && base < _oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\n\nvar _class$7;\nvar _temp$3;\nvar categories$1 = useData.categories;\nvar decompositions$2 = useData.decompositions;\nvar trie$2 = new UnicodeTrie(Buffer(\"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\",\"base64\"));\nvar stateMachine$1 = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nvar UniversalShaper = (_temp$3 = _class$7 = function (_DefaultShaper) {\n  _inherits(UniversalShaper, _DefaultShaper);\n\n  function UniversalShaper() {\n    _classCallCheck(this, UniversalShaper);\n\n    return _possibleConstructorReturn(this, _DefaultShaper.apply(this, arguments));\n  }\n\n  UniversalShaper.planFeatures = function planFeatures(plan) {\n    plan.addStage(setupSyllables$1);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  };\n\n  UniversalShaper.assignFeatures = function assignFeatures(plan, glyphs) {\n    var _loop = function _loop(i) {\n      var codepoint = glyphs[i].codePoints[0];\n      if (decompositions$2[codepoint]) {\n        var decomposed = decompositions$2[codepoint].map(function (c) {\n          var g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice.apply(glyphs, [i, 1].concat(decomposed));\n      }\n    };\n\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (var i = glyphs.length - 1; i >= 0; i--) {\n      _loop(i);\n    }\n  };\n\n  return UniversalShaper;\n}(DefaultShaper), _class$7.zeroMarkWidths = 'BEFORE_GPOS', _temp$3);\nfunction useCategory(glyph) {\n  return trie$2.get(glyph.codePoints[0]);\n}\n\nvar USEInfo = function USEInfo(category, syllableType, syllable) {\n  _classCallCheck(this, USEInfo);\n\n  this.category = category;\n  this.syllableType = syllableType;\n  this.syllable = syllable;\n};\n\nfunction setupSyllables$1(font, glyphs) {\n  var syllable = 0;\n  for (var _iterator = stateMachine$1.match(glyphs.map(useCategory)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        start = _ref2[0],\n        end = _ref2[1],\n        tags = _ref2[2];\n\n    ++syllable;\n\n    // Create shaper info\n    for (var i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories$1[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    var limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (var _i2 = start; _i2 < start + limit; _i2++) {\n      glyphs[_i2].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (var _iterator2 = glyphs, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n    var _ref3;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref3 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref3 = _i3.value;\n    }\n\n    var glyph = _ref3;\n\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (var _iterator3 = glyphs, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n    var _ref4;\n\n    if (_isArray3) {\n      if (_i4 >= _iterator3.length) break;\n      _ref4 = _iterator3[_i4++];\n    } else {\n      _i4 = _iterator3.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var glyph = _ref4;\n\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (var _iterator4 = glyphs, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n    var _ref5;\n\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref5 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var glyph = _ref5;\n\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  var dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (var start = 0, end = nextSyllable$1(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable$1(glyphs, start)) {\n    var i = void 0,\n        j = void 0;\n    var info = glyphs[start].shaperInfo;\n    var type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      var g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++) {}\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice.apply(glyphs, [start, 0].concat(glyphs.splice(start + 1, i - start), [glyphs[i]]));\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice.apply(glyphs, [j, 1, glyphs[i]].concat(glyphs.splice(j, i - j)));\n      }\n    }\n  }\n}\n\nfunction nextSyllable$1(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  var syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable) {}\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n\nvar SHAPERS = {\n  arab: ArabicShaper, // Arabic\n  mong: ArabicShaper, // Mongolian\n  syrc: ArabicShaper, // Syriac\n  'nko ': ArabicShaper, // N'Ko\n  phag: ArabicShaper, // Phags Pa\n  mand: ArabicShaper, // Mandaic\n  mani: ArabicShaper, // Manichaean\n  phlp: ArabicShaper, // Psalter Pahlavi\n\n  hang: HangulShaper, // Hangul\n\n  bng2: IndicShaper, // Bengali\n  beng: IndicShaper, // Bengali\n  dev2: IndicShaper, // Devanagari\n  deva: IndicShaper, // Devanagari\n  gjr2: IndicShaper, // Gujarati\n  gujr: IndicShaper, // Gujarati\n  guru: IndicShaper, // Gurmukhi\n  gur2: IndicShaper, // Gurmukhi\n  knda: IndicShaper, // Kannada\n  knd2: IndicShaper, // Kannada\n  mlm2: IndicShaper, // Malayalam\n  mlym: IndicShaper, // Malayalam\n  ory2: IndicShaper, // Oriya\n  orya: IndicShaper, // Oriya\n  taml: IndicShaper, // Tamil\n  tml2: IndicShaper, // Tamil\n  telu: IndicShaper, // Telugu\n  tel2: IndicShaper, // Telugu\n  khmr: IndicShaper, // Khmer\n\n  bali: UniversalShaper, // Balinese\n  batk: UniversalShaper, // Batak\n  brah: UniversalShaper, // Brahmi\n  bugi: UniversalShaper, // Buginese\n  buhd: UniversalShaper, // Buhid\n  cakm: UniversalShaper, // Chakma\n  cham: UniversalShaper, // Cham\n  dupl: UniversalShaper, // Duployan\n  egyp: UniversalShaper, // Egyptian Hieroglyphs\n  gran: UniversalShaper, // Grantha\n  hano: UniversalShaper, // Hanunoo\n  java: UniversalShaper, // Javanese\n  kthi: UniversalShaper, // Kaithi\n  kali: UniversalShaper, // Kayah Li\n  khar: UniversalShaper, // Kharoshthi\n  khoj: UniversalShaper, // Khojki\n  sind: UniversalShaper, // Khudawadi\n  lepc: UniversalShaper, // Lepcha\n  limb: UniversalShaper, // Limbu\n  mahj: UniversalShaper, // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper, // Meitei Mayek\n  modi: UniversalShaper, // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper, // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper, // Rejang\n  saur: UniversalShaper, // Saurashtra\n  shrd: UniversalShaper, // Sharada\n  sidd: UniversalShaper, // Siddham\n  sinh: UniversalShaper, // Sinhala\n  sund: UniversalShaper, // Sundanese\n  sylo: UniversalShaper, // Syloti Nagri\n  tglg: UniversalShaper, // Tagalog\n  tagb: UniversalShaper, // Tagbanwa\n  tale: UniversalShaper, // Tai Le\n  lana: UniversalShaper, // Tai Tham\n  tavt: UniversalShaper, // Tai Viet\n  takr: UniversalShaper, // Takri\n  tibt: UniversalShaper, // Tibetan\n  tfng: UniversalShaper, // Tifinagh\n  tirh: UniversalShaper, // Tirhuta\n\n  latn: DefaultShaper, // Latin\n  DFLT: DefaultShaper // Default\n};\n\nfunction choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (var _iterator = script, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var s = _ref;\n\n    var shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n\nvar GSUBProcessor = function (_OTProcessor) {\n  _inherits(GSUBProcessor, _OTProcessor);\n\n  function GSUBProcessor() {\n    _classCallCheck(this, GSUBProcessor);\n\n    return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n\n  GSUBProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    var _this2 = this;\n\n    switch (lookupType) {\n      case 1:\n        {\n          // Single Substitution\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n\n          var glyph = this.glyphIterator.cur;\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Multiple Substitution\n          var _index = this.coverageIndex(table.coverage);\n          if (_index !== -1) {\n            var _glyphs;\n\n            var sequence = table.sequences.get(_index);\n\n            if (sequence.length === 0) {\n              // If the sequence length is zero, delete the glyph.\n              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n              this.glyphs.splice(this.glyphIterator.index, 1);\n              return true;\n            }\n\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n\n            var features = this.glyphIterator.cur.features;\n            var curGlyph = this.glyphIterator.cur;\n            var replacement = sequence.slice(1).map(function (gid, i) {\n              var glyph = new GlyphInfo(_this2.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n\n            (_glyphs = this.glyphs).splice.apply(_glyphs, [this.glyphIterator.index + 1, 0].concat(replacement));\n            return true;\n          }\n\n          return false;\n        }\n\n      case 3:\n        {\n          // Alternate Substitution\n          var _index2 = this.coverageIndex(table.coverage);\n          if (_index2 !== -1) {\n            var USER_INDEX = 0; // TODO\n            this.glyphIterator.cur.id = table.alternateSet.get(_index2)[USER_INDEX];\n            return true;\n          }\n\n          return false;\n        }\n\n      case 4:\n        {\n          // Ligature Substitution\n          var _index3 = this.coverageIndex(table.coverage);\n          if (_index3 === -1) {\n            return false;\n          }\n\n          for (var _iterator = table.ligatureSets.get(_index3), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var ligature = _ref;\n\n            var matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) {\n              continue;\n            }\n\n            var _curGlyph = this.glyphIterator.cur;\n\n            // Concatenate all of the characters the new ligature will represent\n            var characters = _curGlyph.codePoints.slice();\n            for (var _iterator2 = matched, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n              var _ref2;\n\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref2 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref2 = _i2.value;\n              }\n\n              var _index4 = _ref2;\n\n              characters.push.apply(characters, this.glyphs[_index4].codePoints);\n            }\n\n            // Create the replacement ligature glyph\n            var ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, _curGlyph.features);\n            ligatureGlyph.shaperInfo = _curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true;\n\n            // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n            var isMarkLigature = _curGlyph.isMark;\n            for (var i = 0; i < matched.length && isMarkLigature; i++) {\n              isMarkLigature = this.glyphs[matched[i]].isMark;\n            }\n\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n\n            var lastLigID = _curGlyph.ligatureID;\n            var lastNumComps = _curGlyph.codePoints.length;\n            var curComps = lastNumComps;\n            var idx = this.glyphIterator.index + 1;\n\n            // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n            for (var _iterator3 = matched, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n              var _ref3;\n\n              if (_isArray3) {\n                if (_i3 >= _iterator3.length) break;\n                _ref3 = _iterator3[_i3++];\n              } else {\n                _i3 = _iterator3.next();\n                if (_i3.done) break;\n                _ref3 = _i3.value;\n              }\n\n              var matchIndex = _ref3;\n\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) {\n                idx = matchIndex;\n              } else {\n                while (idx < matchIndex) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                  this.glyphs[idx].ligatureComponent = ligatureComponent;\n                  idx++;\n                }\n              }\n\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            }\n\n            // Adjust ligature components for any marks following\n            if (lastLigID && !isMarkLigature) {\n              for (var _i4 = idx; _i4 < this.glyphs.length; _i4++) {\n                if (this.glyphs[_i4].ligatureID === lastLigID) {\n                  var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[_i4].ligatureComponent || 1, lastNumComps);\n                  this.glyphs[_i4].ligatureComponent = ligatureComponent;\n                } else {\n                  break;\n                }\n              }\n            }\n\n            // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n            for (var _i5 = matched.length - 1; _i5 >= 0; _i5--) {\n              this.glyphs.splice(matched[_i5], 1);\n            }\n\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n\n          return false;\n        }\n\n      case 5:\n        // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6:\n        // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7:\n        // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error('GSUB lookupType ' + lookupType + ' is not supported');\n    }\n  };\n\n  return GSUBProcessor;\n}(OTProcessor);\n\nvar GPOSProcessor = function (_OTProcessor) {\n  _inherits(GPOSProcessor, _OTProcessor);\n\n  function GPOSProcessor() {\n    _classCallCheck(this, GPOSProcessor);\n\n    return _possibleConstructorReturn(this, _OTProcessor.apply(this, arguments));\n  }\n\n  GPOSProcessor.prototype.applyPositionValue = function applyPositionValue(sequenceIndex, value) {\n    var position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  };\n\n  GPOSProcessor.prototype.applyLookup = function applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          // Single positioning value\n          var index = this.coverageIndex(table.coverage);\n          if (index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          // Pair Adjustment Positioning\n          var nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) {\n            return false;\n          }\n\n          var _index = this.coverageIndex(table.coverage);\n          if (_index === -1) {\n            return false;\n          }\n\n          switch (table.version) {\n            case 1:\n              // Adjustments for glyph pairs\n              var set = table.pairSets.get(_index);\n\n              for (var _iterator = set, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n                var _ref;\n\n                if (_isArray) {\n                  if (_i >= _iterator.length) break;\n                  _ref = _iterator[_i++];\n                } else {\n                  _i = _iterator.next();\n                  if (_i.done) break;\n                  _ref = _i.value;\n                }\n\n                var _pair = _ref;\n\n                if (_pair.secondGlyph === nextGlyph.id) {\n                  this.applyPositionValue(0, _pair.value1);\n                  this.applyPositionValue(1, _pair.value2);\n                  return true;\n                }\n              }\n\n              return false;\n\n            case 2:\n              // Class pair adjustment\n              var class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              var class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) {\n                return false;\n              }\n\n              var pair = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair.value1);\n              this.applyPositionValue(1, pair.value2);\n              return true;\n          }\n        }\n\n      case 3:\n        {\n          // Cursive Attachment Positioning\n          var nextIndex = this.glyphIterator.peekIndex();\n          var _nextGlyph = this.glyphs[nextIndex];\n          if (!_nextGlyph) {\n            return false;\n          }\n\n          var curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) {\n            return false;\n          }\n\n          var nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, _nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) {\n            return false;\n          }\n\n          var entry = this.getAnchor(nextRecord.entryAnchor);\n          var exit = this.getAnchor(curRecord.exitAnchor);\n\n          var cur = this.positions[this.glyphIterator.index];\n          var next = this.positions[nextIndex];\n\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n\n              var d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            _nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n\n          return true;\n        }\n\n      case 4:\n        {\n          // Mark to base positioning\n          var markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0)) {}\n\n          if (baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) {\n            return false;\n          }\n\n          var markRecord = table.markArray[markIndex];\n          var baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n\n      case 5:\n        {\n          // Mark to ligature positioning\n          var _markIndex = this.coverageIndex(table.markCoverage);\n          if (_markIndex === -1) {\n            return false;\n          }\n\n          // search backward for a base glyph\n          var _baseGlyphIndex = this.glyphIterator.index;\n          while (--_baseGlyphIndex >= 0 && this.glyphs[_baseGlyphIndex].isMark) {}\n\n          if (_baseGlyphIndex < 0) {\n            return false;\n          }\n\n          var ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[_baseGlyphIndex].id);\n          if (ligIndex === -1) {\n            return false;\n          }\n\n          var ligAttach = table.ligatureArray[ligIndex];\n          var markGlyph = this.glyphIterator.cur;\n          var ligGlyph = this.glyphs[_baseGlyphIndex];\n          var compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n\n          var _markRecord = table.markArray[_markIndex];\n          var _baseAnchor = ligAttach[compIndex][_markRecord.class];\n          this.applyAnchor(_markRecord, _baseAnchor, _baseGlyphIndex);\n          return true;\n        }\n\n      case 6:\n        {\n          // Mark to mark positioning\n          var mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) {\n            return false;\n          }\n\n          // get the previous mark to attach to\n          var prevIndex = this.glyphIterator.peekIndex(-1);\n          var prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) {\n            return false;\n          }\n\n          var _cur = this.glyphIterator.cur;\n\n          // The following logic was borrowed from Harfbuzz\n          var good = false;\n          if (_cur.ligatureID === prev.ligatureID) {\n            if (!_cur.ligatureID) {\n              // Marks belonging to the same base\n              good = true;\n            } else if (_cur.ligatureComponent === prev.ligatureComponent) {\n              // Marks belonging to the same ligature component\n              good = true;\n            }\n          } else {\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (_cur.ligatureID && !_cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) {\n              good = true;\n            }\n          }\n\n          if (!good) {\n            return false;\n          }\n\n          var mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) {\n            return false;\n          }\n\n          var _markRecord2 = table.mark1Array[mark1Index];\n          var _baseAnchor2 = table.mark2Array[mark2Index][_markRecord2.class];\n          this.applyAnchor(_markRecord2, _baseAnchor2, prevIndex);\n          return true;\n        }\n\n      case 7:\n        // Contextual positioning\n        return this.applyContext(table);\n\n      case 8:\n        // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9:\n        // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error('Unsupported GPOS table: ' + lookupType);\n    }\n  };\n\n  GPOSProcessor.prototype.applyAnchor = function applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    var baseCoords = this.getAnchor(baseAnchor);\n    var markCoords = this.getAnchor(markRecord.markAnchor);\n\n    var basePos = this.positions[baseGlyphIndex];\n    var markPos = this.positions[this.glyphIterator.index];\n\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  };\n\n  GPOSProcessor.prototype.getAnchor = function getAnchor(anchor) {\n    // TODO: contour point, device tables\n    var x = anchor.xCoordinate;\n    var y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    var variationProcessor = this.font._variationProcessor;\n    var variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return { x: x, y: y };\n  };\n\n  GPOSProcessor.prototype.applyFeatures = function applyFeatures(userFeatures, glyphs, advances) {\n    _OTProcessor.prototype.applyFeatures.call(this, userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  };\n\n  GPOSProcessor.prototype.fixCursiveAttachment = function fixCursiveAttachment(i) {\n    var glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      var j = glyph.cursiveAttachment;\n\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  };\n\n  GPOSProcessor.prototype.fixMarkAttachment = function fixMarkAttachment() {\n    for (var i = 0; i < this.glyphs.length; i++) {\n      var glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        var j = glyph.markAttachment;\n\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (var k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (var _k = j + 1; _k < i + 1; _k++) {\n            this.positions[i].xOffset += this.positions[_k].xAdvance;\n            this.positions[i].yOffset += this.positions[_k].yAdvance;\n          }\n        }\n      }\n    }\n  };\n\n  return GPOSProcessor;\n}(OTProcessor);\n\nvar OTLayoutEngine = function () {\n  function OTLayoutEngine(font) {\n    _classCallCheck(this, OTLayoutEngine);\n\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  OTLayoutEngine.prototype.setup = function setup(glyphRun) {\n    var _this = this;\n\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(function (glyph) {\n      return new GlyphInfo(_this.font, glyph.id, [].concat(glyph.codePoints));\n    });\n\n    // Select a script based on what is available in GSUB/GPOS.\n    var script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (var key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  };\n\n  OTLayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    var _this2 = this;\n\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(function (glyphInfo) {\n        return _this2.font.getGlyph(glyphInfo.id, glyphInfo.codePoints);\n      });\n    }\n  };\n\n  OTLayoutEngine.prototype.position = function position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  };\n\n  OTLayoutEngine.prototype.zeroMarkAdvances = function zeroMarkAdvances(positions) {\n    for (var i = 0; i < this.glyphInfos.length; i++) {\n      if (this.glyphInfos[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n\n  OTLayoutEngine.prototype.cleanup = function cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  };\n\n  OTLayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push.apply(features, _Object$keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push.apply(features, _Object$keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  };\n\n  return OTLayoutEngine;\n}();\n\nvar LayoutEngine = function () {\n  function LayoutEngine(font) {\n    _classCallCheck(this, LayoutEngine);\n\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  LayoutEngine.prototype.layout = function layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Map string to glyphs if needed\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) {\n        script = forString(string);\n      }\n\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        var codePoints = [];\n        for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var glyph = _ref;\n\n          codePoints.push.apply(codePoints, glyph.codePoints);\n        }\n\n        script = forCodePoints(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    var glyphRun = new GlyphRun(glyphs, features, script, language, direction);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    return glyphRun;\n  };\n\n  LayoutEngine.prototype.substitute = function substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  };\n\n  LayoutEngine.prototype.position = function position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(function (glyph) {\n      return new GlyphPosition(glyph.advanceWidth);\n    });\n    var positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  };\n\n  LayoutEngine.prototype.hideDefaultIgnorables = function hideDefaultIgnorables(glyphs, positions) {\n    var space = this.font.glyphForCodePoint(0x20);\n    for (var i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  };\n\n  LayoutEngine.prototype.isDefaultIgnorable = function isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    var plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00AD;\n        case 0x03:\n          return ch === 0x034F;\n        case 0x06:\n          return ch === 0x061C;\n        case 0x17:\n          return 0x17B4 <= ch && ch <= 0x17B5;\n        case 0x18:\n          return 0x180B <= ch && ch <= 0x180E;\n        case 0x20:\n          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n        case 0xFE:\n          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n        case 0xFF:\n          return 0xFFF0 <= ch && ch <= 0xFFF8;\n        default:\n          return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n        case 0x0E:\n          return 0xE0000 <= ch && ch <= 0xE0FFF;\n        default:\n          return false;\n      }\n    }\n  };\n\n  LayoutEngine.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    var features = [];\n\n    if (this.engine) {\n      features.push.apply(features, this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  };\n\n  LayoutEngine.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    var result = new _Set();\n\n    var codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (var _iterator2 = codePoints, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var codePoint = _ref2;\n\n      result.add(_String$fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (var _iterator3 = this.engine.stringsForGlyph(gid), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var string = _ref3;\n\n        result.add(string);\n      }\n    }\n\n    return _Array$from(result);\n  };\n\n  return LayoutEngine;\n}();\n\nvar SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\n\nvar Path = function () {\n  function Path() {\n    _classCallCheck(this, Path);\n\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n\n\n  Path.prototype.toFunction = function toFunction() {\n    var cmds = this.commands.map(function (c) {\n      return '  ctx.' + c.command + '(' + c.args.join(', ') + ');';\n    });\n    return new Function('ctx', cmds.join('\\n'));\n  };\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n\n\n  Path.prototype.toSVG = function toSVG() {\n    var cmds = this.commands.map(function (c) {\n      var args = c.args.map(function (arg) {\n        return Math.round(arg * 100) / 100;\n      });\n      return '' + SVG_COMMANDS[c.command] + args.join(' ');\n    });\n\n    return cmds.join('');\n  };\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  Path.prototype.mapPoints = function mapPoints(fn) {\n    var path = new Path();\n\n    for (var _iterator = this.commands, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var c = _ref;\n\n      var args = [];\n      for (var _i2 = 0; _i2 < c.args.length; _i2 += 2) {\n        var _fn = fn(c.args[_i2], c.args[_i2 + 1]),\n            x = _fn[0],\n            y = _fn[1];\n\n        args.push(x, y);\n      }\n\n      path[c.command].apply(path, args);\n    }\n\n    return path;\n  };\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n\n\n  Path.prototype.transform = function transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints(function (x, y) {\n      x = m0 * x + m2 * y + m4;\n      y = m1 * x + m3 * y + m5;\n      return [x, y];\n    });\n  };\n\n  /**\n   * Translates the path by the given offset.\n   */\n\n\n  Path.prototype.translate = function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  };\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n\n\n  Path.prototype.rotate = function rotate(angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  };\n\n  /**\n   * Scales the path.\n   */\n\n\n  Path.prototype.scale = function scale(scaleX) {\n    var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  };\n\n  _createClass(Path, [{\n    key: 'cbox',\n    get: function get() {\n      if (!this._cbox) {\n        var cbox = new BBox();\n        for (var _iterator2 = this.commands, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i3 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i3++];\n          } else {\n            _i3 = _iterator2.next();\n            if (_i3.done) break;\n            _ref2 = _i3.value;\n          }\n\n          var command = _ref2;\n\n          for (var _i4 = 0; _i4 < command.args.length; _i4 += 2) {\n            cbox.addPoint(command.args[_i4], command.args[_i4 + 1]);\n          }\n        }\n\n        this._cbox = _Object$freeze(cbox);\n      }\n\n      return this._cbox;\n    }\n\n    /**\n     * Gets the exact bounding box of the path by evaluating curve segments.\n     * Slower to compute than the control box, but more accurate.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get() {\n      if (this._bbox) {\n        return this._bbox;\n      }\n\n      var bbox = new BBox();\n      var cx = 0,\n          cy = 0;\n\n      var f = function f(t) {\n        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n      };\n\n      for (var _iterator3 = this.commands, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i5 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i5++];\n        } else {\n          _i5 = _iterator3.next();\n          if (_i5.done) break;\n          _ref3 = _i5.value;\n        }\n\n        var c = _ref3;\n\n        switch (c.command) {\n          case 'moveTo':\n          case 'lineTo':\n            var _c$args = c.args,\n                x = _c$args[0],\n                y = _c$args[1];\n\n            bbox.addPoint(x, y);\n            cx = x;\n            cy = y;\n            break;\n\n          case 'quadraticCurveTo':\n          case 'bezierCurveTo':\n            if (c.command === 'quadraticCurveTo') {\n              // http://fontforge.org/bezier.html\n              var _c$args2 = c.args,\n                  qp1x = _c$args2[0],\n                  qp1y = _c$args2[1],\n                  p3x = _c$args2[2],\n                  p3y = _c$args2[3];\n\n              var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n              var cp1y = cy + 2 / 3 * (qp1y - cy);\n              var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n              var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n            } else {\n              var _c$args3 = c.args,\n                  cp1x = _c$args3[0],\n                  cp1y = _c$args3[1],\n                  cp2x = _c$args3[2],\n                  cp2y = _c$args3[3],\n                  p3x = _c$args3[4],\n                  p3y = _c$args3[5];\n            }\n\n            // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n            bbox.addPoint(p3x, p3y);\n\n            var p0 = [cx, cy];\n            var p1 = [cp1x, cp1y];\n            var p2 = [cp2x, cp2y];\n            var p3 = [p3x, p3y];\n\n            for (var i = 0; i <= 1; i++) {\n              var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n              var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n              c = 3 * p1[i] - 3 * p0[i];\n\n              if (a === 0) {\n                if (b === 0) {\n                  continue;\n                }\n\n                var t = -c / b;\n                if (0 < t && t < 1) {\n                  if (i === 0) {\n                    bbox.addPoint(f(t), bbox.maxY);\n                  } else if (i === 1) {\n                    bbox.addPoint(bbox.maxX, f(t));\n                  }\n                }\n\n                continue;\n              }\n\n              var b2ac = Math.pow(b, 2) - 4 * c * a;\n              if (b2ac < 0) {\n                continue;\n              }\n\n              var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t1 && t1 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t1), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t1));\n                }\n              }\n\n              var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n              if (0 < t2 && t2 < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t2), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t2));\n                }\n              }\n            }\n\n            cx = p3x;\n            cy = p3y;\n            break;\n        }\n      }\n\n      return this._bbox = _Object$freeze(bbox);\n    }\n  }]);\n\n  return Path;\n}();\n\nvar _arr = ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath'];\n\nvar _loop = function _loop() {\n  var command = _arr[_i6];\n  Path.prototype[command] = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command: command,\n      args: args\n    });\n\n    return this;\n  };\n};\n\nfor (var _i6 = 0; _i6 < _arr.length; _i6++) {\n  _loop();\n}\n\nvar StandardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\nvar _class$8;\nfunction _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nvar Glyph = (_class$8 = function () {\n  function Glyph(id, codePoints, font) {\n    _classCallCheck(this, Glyph);\n\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  Glyph.prototype._getPath = function _getPath() {\n    return new Path();\n  };\n\n  Glyph.prototype._getCBox = function _getCBox() {\n    return this.path.cbox;\n  };\n\n  Glyph.prototype._getBBox = function _getBBox() {\n    return this.path.bbox;\n  };\n\n  Glyph.prototype._getTableMetrics = function _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    var metric = table.metrics.get(table.metrics.length - 1);\n    var res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n\n    return res;\n  };\n\n  Glyph.prototype._getMetrics = function _getMetrics(cbox) {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var _getTableMetrics2 = this._getTableMetrics(this._font.hmtx),\n        advanceWidth = _getTableMetrics2.advance,\n        leftBearing = _getTableMetrics2.bearing;\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n\n\n    if (this._font.vmtx) {\n      var _getTableMetrics3 = this._getTableMetrics(this._font.vmtx),\n          advanceHeight = _getTableMetrics3.advance,\n          topBearing = _getTableMetrics3.bearing;\n    } else {\n      var os2 = void 0;\n      if (typeof cbox === 'undefined' || cbox === null) {\n        cbox = this.cbox;\n      }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        var hhea = this._font.hhea;\n\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing };\n  };\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  Glyph.prototype.getScaledPath = function getScaledPath(size) {\n    var scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  };\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n\n\n  Glyph.prototype._getName = function _getName() {\n    var post = this._font.post;\n\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        var id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  };\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  Glyph.prototype.render = function render(ctx, size) {\n    ctx.save();\n\n    var scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n\n    var fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  _createClass(Glyph, [{\n    key: 'cbox',\n    get: function get() {\n      return this._getCBox();\n    }\n\n    /**\n     * The glyph’s bounding box, i.e. the rectangle that encloses the\n     * glyph outline as tightly as possible.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get() {\n      return this._getBBox();\n    }\n\n    /**\n     * A vector Path object representing the glyph outline.\n     * @type {Path}\n     */\n\n  }, {\n    key: 'path',\n    get: function get() {\n      // Cache the path so we only decode it once\n      // Decoding is actually performed by subclasses\n      return this._getPath();\n    }\n  }, {\n    key: 'advanceWidth',\n    get: function get() {\n      return this._getMetrics().advanceWidth;\n    }\n\n    /**\n     * The glyph's advance height.\n     * @type {number}\n     */\n\n  }, {\n    key: 'advanceHeight',\n    get: function get() {\n      return this._getMetrics().advanceHeight;\n    }\n  }, {\n    key: 'ligatureCaretPositions',\n    get: function get() {}\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._getName();\n    }\n  }]);\n\n  return Glyph;\n}(), (_applyDecoratedDescriptor$4(_class$8.prototype, 'cbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'cbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'bbox'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'path', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'path'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceWidth', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceWidth'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'advanceHeight', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'advanceHeight'), _class$8.prototype), _applyDecoratedDescriptor$4(_class$8.prototype, 'name', [cache], _Object$getOwnPropertyDescriptor(_class$8.prototype, 'name'), _class$8.prototype)), _class$8);\n\n// The header for both simple and composite glyphs\nvar GlyfHeader = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16\n});\n\n// Flags for simple glyphs\nvar ON_CURVE = 1 << 0;\nvar X_SHORT_VECTOR = 1 << 1;\nvar Y_SHORT_VECTOR = 1 << 2;\nvar REPEAT = 1 << 3;\nvar SAME_X = 1 << 4;\nvar SAME_Y = 1 << 5;\n\n// Flags for composite glyphs\nvar ARG_1_AND_2_ARE_WORDS = 1 << 0;\nvar WE_HAVE_A_SCALE = 1 << 3;\nvar MORE_COMPONENTS = 1 << 5;\nvar WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\nvar WE_HAVE_A_TWO_BY_TWO = 1 << 7;\nvar WE_HAVE_INSTRUCTIONS = 1 << 8;\n// Represents a point in a simple glyph\nvar Point = function () {\n  function Point(onCurve, endContour) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Point);\n\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype.copy = function copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  };\n\n  return Point;\n}();\n\n// Represents a component in a composite glyph\n\nvar Component = function Component(glyphID, dx, dy) {\n  _classCallCheck(this, Component);\n\n  this.glyphID = glyphID;\n  this.dx = dx;\n  this.dy = dy;\n  this.pos = 0;\n  this.scaleX = this.scaleY = 1;\n  this.scale01 = this.scale10 = 0;\n};\n\n/**\n * Represents a TrueType glyph.\n */\n\n\nvar TTFGlyph = function (_Glyph) {\n  _inherits(TTFGlyph, _Glyph);\n\n  function TTFGlyph() {\n    _classCallCheck(this, TTFGlyph);\n\n    return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  // Parses just the glyph header and returns the bounding box\n  TTFGlyph.prototype._getCBox = function _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    var glyph = GlyfHeader.decode(stream);\n\n    var cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return _Object$freeze(cbox);\n  };\n\n  // Parses a single glyph coordinate\n\n\n  TTFGlyph.prototype._parseGlyphCoord = function _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  };\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n\n\n  TTFGlyph.prototype._decode = function _decode() {\n    var glyfPos = this._font.loca.offsets[this.id];\n    var nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) {\n      return null;\n    }\n\n    var stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    var startPos = stream.pos;\n\n    var glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  };\n\n  TTFGlyph.prototype._decodeSimple = function _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n\n    var endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n\n    var flags = [];\n    var numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        var count = stream.readUInt8();\n        for (var j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      var point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    var px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    var py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = glyph.points.slice();\n      points.push.apply(points, this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  };\n\n  TTFGlyph.prototype._decodeComposite = function _decodeComposite(glyph, stream) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    // this is a composite glyph\n    glyph.components = [];\n    var haveInstructions = false;\n    var flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      var gPos = stream.pos - offset;\n      var glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      var points = [];\n      for (var j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push.apply(points, this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  };\n\n  TTFGlyph.prototype._getPhantomPoints = function _getPhantomPoints(glyph) {\n    var cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    var _metrics = this._metrics,\n        advanceWidth = _metrics.advanceWidth,\n        advanceHeight = _metrics.advanceHeight,\n        leftBearing = _metrics.leftBearing,\n        topBearing = _metrics.topBearing;\n\n\n    return [new Point(false, true, glyph.xMin - leftBearing, 0), new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new Point(false, true, 0, glyph.yMax + topBearing), new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  };\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n\n\n  TTFGlyph.prototype._getContours = function _getContours() {\n    var glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n\n    var points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (var _iterator = glyph.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var component = _ref;\n\n        var _contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (var i = 0; i < _contours.length; i++) {\n          var contour = _contours[i];\n          for (var j = 0; j < contour.length; j++) {\n            var _point = contour[j];\n            var x = _point.x * component.scaleX + _point.y * component.scale01 + component.dx;\n            var y = _point.y * component.scaleY + _point.x * component.scale10 + component.dy;\n            points.push(new Point(_point.onCurve, _point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    var contours = [];\n    var cur = [];\n    for (var k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  };\n\n  TTFGlyph.prototype._getMetrics = function _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    var cbox = this._getCBox(true);\n    _Glyph.prototype._getMetrics.call(this, cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  };\n\n  // Converts contours to a Path object that can be rendered\n\n\n  TTFGlyph.prototype._getPath = function _getPath() {\n    var contours = this._getContours();\n    var path = new Path();\n\n    for (var i = 0; i < contours.length; i++) {\n      var contour = contours[i];\n      var firstPt = contour[0];\n      var lastPt = contour[contour.length - 1];\n      var start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (var j = start; j < contour.length; j++) {\n        var pt = contour[j];\n        var prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          var midX = (prevPt.x + pt.x) / 2;\n          var midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  };\n\n  return TTFGlyph;\n}(Glyph);\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\n\nvar CFFGlyph = function (_Glyph) {\n  _inherits(CFFGlyph, _Glyph);\n\n  function CFFGlyph() {\n    _classCallCheck(this, CFFGlyph);\n\n    return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  CFFGlyph.prototype._getName = function _getName() {\n    if (this._font.CFF2) {\n      return _Glyph.prototype._getName.call(this);\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  };\n\n  CFFGlyph.prototype.bias = function bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  };\n\n  CFFGlyph.prototype._getPath = function _getPath() {\n    var stream = this._font.stream;\n    var pos = stream.pos;\n\n\n    var cff = this._font.CFF2 || this._font['CFF '];\n    var str = cff.topDict.CharStrings[this.id];\n    var end = str.offset + str.length;\n    stream.pos = str.offset;\n\n    var path = new Path();\n    var stack = [];\n    var trans = [];\n\n    var width = null;\n    var nStems = 0;\n    var x = 0,\n        y = 0;\n    var usedGsubrs = void 0;\n    var usedSubrs = void 0;\n    var open = false;\n\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n\n    var gsubrs = cff.globalSubrIndex || [];\n    var gsubrsBias = this.bias(gsubrs);\n\n    var privateDict = cff.privateDictForGlyph(this.id) || {};\n    var subrs = privateDict.Subrs || [];\n    var subrsBias = this.bias(subrs);\n\n    var vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    var vsindex = privateDict.vsindex;\n    var variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    var parse = function parse() {\n      while (stream.pos < end) {\n        var op = stream.readUInt8();\n        if (op < 32) {\n          switch (op) {\n            case 1: // hstem\n            case 3: // vstem\n            case 18: // hstemhm\n            case 23:\n              // vstemhm\n              parseStems();\n              break;\n\n            case 4:\n              // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5:\n              // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n\n            case 6: // hlineto\n            case 7:\n              // vlineto\n              var phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 8:\n              // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 10:\n              // callsubr\n              var index = stack.pop() + subrsBias;\n              var subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 11:\n              // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n\n            case 14:\n              // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n\n            case 15:\n              {\n                // vsindex\n                if (cff.version < 2) {\n                  throw new Error('vsindex operator not supported in CFF v1');\n                }\n\n                vsindex = stack.pop();\n                break;\n              }\n\n            case 16:\n              {\n                // blend\n                if (cff.version < 2) {\n                  throw new Error('blend operator not supported in CFF v1');\n                }\n\n                if (!variationProcessor) {\n                  throw new Error('blend operator in non-variation font');\n                }\n\n                var blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                var numBlends = stack.pop();\n                var numOperands = numBlends * blendVector.length;\n                var delta = stack.length - numOperands;\n                var base = delta - numBlends;\n\n                for (var i = 0; i < numBlends; i++) {\n                  var sum = stack[base + i];\n                  for (var j = 0; j < blendVector.length; j++) {\n                    sum += blendVector[j] * stack[delta++];\n                  }\n\n                  stack[base + i] = sum;\n                }\n\n                while (numOperands--) {\n                  stack.pop();\n                }\n\n                break;\n              }\n\n            case 19: // hintmask\n            case 20:\n              // cntrmask\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n\n            case 21:\n              // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22:\n              // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24:\n              // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25:\n              // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26:\n              // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 27:\n              // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 28:\n              // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29:\n              // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 30: // vhcurveto\n            case 31:\n              // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3:\n                  // and\n                  var a = stack.pop();\n                  var b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4:\n                  // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5:\n                  // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9:\n                  // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10:\n                  // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11:\n                  // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12:\n                  // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14:\n                  // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15:\n                  // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18:\n                  // drop\n                  stack.pop();\n                  break;\n\n                case 20:\n                  // put\n                  var val = stack.pop();\n                  var idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21:\n                  // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22:\n                  // ifelse\n                  var s1 = stack.pop();\n                  var s2 = stack.pop();\n                  var v1 = stack.pop();\n                  var v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23:\n                  // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24:\n                  // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26:\n                  // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27:\n                  // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28:\n                  // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29:\n                  // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30:\n                  // roll\n                  var n = stack.pop();\n                  var _j = stack.pop();\n\n                  if (_j >= 0) {\n                    while (_j > 0) {\n                      var t = stack[n - 1];\n                      for (var _i = n - 2; _i >= 0; _i--) {\n                        stack[_i + 1] = stack[_i];\n                      }\n\n                      stack[0] = t;\n                      _j--;\n                    }\n                  } else {\n                    while (_j < 0) {\n                      var t = stack[0];\n                      for (var _i2 = 0; _i2 <= n; _i2++) {\n                        stack[_i2] = stack[_i2 + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      _j++;\n                    }\n                  }\n                  break;\n\n                case 34:\n                  // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  var c3x = c2x + stack.shift();\n                  var c3y = c2y;\n                  var c4x = c3x + stack.shift();\n                  var c4y = c3y;\n                  var c5x = c4x + stack.shift();\n                  var c5y = c4y;\n                  var c6x = c5x + stack.shift();\n                  var c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35:\n                  // flex\n                  var pts = [];\n\n                  for (var _i3 = 0; _i3 <= 5; _i3++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n\n                case 36:\n                  // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37:\n                  // flex1\n                  var startx = x;\n                  var starty = y;\n\n                  pts = [];\n                  for (var _i4 = 0; _i4 <= 4; _i4++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                    // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo.apply(path, pts.slice(0, 6));\n                  path.bezierCurveTo.apply(path, pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error('Unknown op: 12 ' + op);\n              }\n              break;\n\n            default:\n              throw new Error('Unknown op: ' + op);\n          }\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  };\n\n  return CFFGlyph;\n}(Glyph);\n\nvar SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(function (t) {\n    return t.parent.buflen - t._currentOffset;\n  })\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\n\nvar SBIXGlyph = function (_TTFGlyph) {\n  _inherits(SBIXGlyph, _TTFGlyph);\n\n  function SBIXGlyph() {\n    _classCallCheck(this, SBIXGlyph);\n\n    return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));\n  }\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  SBIXGlyph.prototype.getImageForSize = function getImageForSize(size) {\n    for (var i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) {\n        break;\n      }\n    }\n\n    var offsets = table.imageOffsets;\n    var start = offsets[this.id];\n    var end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, { buflen: end - start });\n  };\n\n  SBIXGlyph.prototype.render = function render(ctx, size) {\n    var img = this.getImageForSize(size);\n    if (img != null) {\n      var scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, { height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale });\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      _TTFGlyph.prototype.render.call(this, ctx, size);\n    }\n  };\n\n  return SBIXGlyph;\n}(TTFGlyph);\n\nvar COLRLayer = function COLRLayer(glyph, color) {\n  _classCallCheck(this, COLRLayer);\n\n  this.glyph = glyph;\n  this.color = color;\n};\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\n\n\nvar COLRGlyph = function (_Glyph) {\n  _inherits(COLRGlyph, _Glyph);\n\n  function COLRGlyph() {\n    _classCallCheck(this, COLRGlyph);\n\n    return _possibleConstructorReturn(this, _Glyph.apply(this, arguments));\n  }\n\n  COLRGlyph.prototype._getBBox = function _getBBox() {\n    var bbox = new BBox();\n    for (var i = 0; i < this.layers.length; i++) {\n      var layer = this.layers[i];\n      var b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  };\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n\n\n  COLRGlyph.prototype.render = function render(ctx, size) {\n    for (var _iterator = this.layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _ref2 = _ref,\n          glyph = _ref2.glyph,\n          color = _ref2.color;\n\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  };\n\n  _createClass(COLRGlyph, [{\n    key: 'layers',\n    get: function get() {\n      var cpal = this._font.CPAL;\n      var colr = this._font.COLR;\n      var low = 0;\n      var high = colr.baseGlyphRecord.length - 1;\n\n      while (low <= high) {\n        var mid = low + high >> 1;\n        var rec = colr.baseGlyphRecord[mid];\n\n        if (this.id < rec.gid) {\n          high = mid - 1;\n        } else if (this.id > rec.gid) {\n          low = mid + 1;\n        } else {\n          var baseLayer = rec;\n          break;\n        }\n      }\n\n      // if base glyph not found in COLR table,\n      // default to normal glyph from glyf or CFF\n      if (baseLayer == null) {\n        var g = this._font._getBaseGlyph(this.id);\n        var color = {\n          red: 0,\n          green: 0,\n          blue: 0,\n          alpha: 255\n        };\n\n        return [new COLRLayer(g, color)];\n      }\n\n      // otherwise, return an array of all the layers\n      var layers = [];\n      for (var i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n        var rec = colr.layerRecords[i];\n        var color = cpal.colorRecords[rec.paletteIndex];\n        var g = this._font._getBaseGlyph(rec.gid);\n        layers.push(new COLRLayer(g, color));\n      }\n\n      return layers;\n    }\n  }]);\n\n  return COLRGlyph;\n}(Glyph);\n\nvar TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nvar TUPLE_COUNT_MASK = 0x0fff;\nvar EMBEDDED_TUPLE_COORD = 0x8000;\nvar INTERMEDIATE_TUPLE = 0x4000;\nvar PRIVATE_POINT_NUMBERS = 0x2000;\nvar TUPLE_INDEX_MASK = 0x0fff;\nvar POINTS_ARE_WORDS = 0x80;\nvar POINT_RUN_COUNT_MASK = 0x7f;\nvar DELTAS_ARE_ZERO = 0x80;\nvar DELTAS_ARE_WORDS = 0x40;\nvar DELTA_RUN_COUNT_MASK = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\n\nvar GlyphVariationProcessor = function () {\n  function GlyphVariationProcessor(font, coords) {\n    _classCallCheck(this, GlyphVariationProcessor);\n\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new _Map();\n  }\n\n  GlyphVariationProcessor.prototype.normalizeCoords = function normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    var normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      var axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.defaultValue - axis.minValue + _Number$EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + _Number$EPSILON) / (axis.maxValue - axis.defaultValue + _Number$EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        var segment = this.font.avar.segment[i];\n        for (var j = 0; j < segment.correspondence.length; j++) {\n          var pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            var prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + _Number$EPSILON) / (pair.fromCoord - prev.fromCoord + _Number$EPSILON) + prev.toCoord;\n\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  };\n\n  GlyphVariationProcessor.prototype.transformPoints = function transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) {\n      return;\n    }\n\n    var gvar = this.font.gvar;\n\n    if (gid >= gvar.glyphCount) {\n      return;\n    }\n\n    var offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) {\n      return;\n    }\n\n    // Read the gvar data for this glyph\n    var stream = this.font.stream;\n\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    var tupleCount = stream.readUInt16BE();\n    var offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    var origPoints = glyphPoints.map(function (pt) {\n      return pt.copy();\n    });\n\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (var i = 0; i < tupleCount; i++) {\n      var tupleDataSize = stream.readUInt16BE();\n      var tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (var a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (var _a = 0; _a < gvar.axisCount; _a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n        for (var _a2 = 0; _a2 < gvar.axisCount; _a2++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      var factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      var nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      var xDeltas = this.decodeDeltas(nPoints);\n      var yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) {\n        // all points\n        for (var _i = 0; _i < glyphPoints.length; _i++) {\n          var point = glyphPoints[_i];\n          point.x += Math.round(xDeltas[_i] * factor);\n          point.y += Math.round(yDeltas[_i] * factor);\n        }\n      } else {\n        var outPoints = origPoints.map(function (pt) {\n          return pt.copy();\n        });\n        var hasDelta = glyphPoints.map(function () {\n          return false;\n        });\n\n        for (var _i2 = 0; _i2 < points.length; _i2++) {\n          var idx = points[_i2];\n          if (idx < glyphPoints.length) {\n            var _point = outPoints[idx];\n            hasDelta[idx] = true;\n\n            _point.x += Math.round(xDeltas[_i2] * factor);\n            _point.y += Math.round(yDeltas[_i2] * factor);\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (var _i3 = 0; _i3 < glyphPoints.length; _i3++) {\n          var deltaX = outPoints[_i3].x - origPoints[_i3].x;\n          var deltaY = outPoints[_i3].y - origPoints[_i3].y;\n\n          glyphPoints[_i3].x += deltaX;\n          glyphPoints[_i3].y += deltaY;\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  };\n\n  GlyphVariationProcessor.prototype.decodePoints = function decodePoints() {\n    var stream = this.font.stream;\n    var count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    var points = new Uint16Array(count);\n    var i = 0;\n    var point = 0;\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      var fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (var j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  };\n\n  GlyphVariationProcessor.prototype.decodeDeltas = function decodeDeltas(count) {\n    var stream = this.font.stream;\n    var i = 0;\n    var deltas = new Int16Array(count);\n\n    while (i < count) {\n      var run = stream.readUInt8();\n      var runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n      } else {\n        var fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (var j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  };\n\n  GlyphVariationProcessor.prototype.tupleFactor = function tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    var normalized = this.normalizedCoords;\n    var gvar = this.font.gvar;\n\n    var factor = 1;\n\n    for (var i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + _Number$EPSILON) / (tupleCoords[i] + _Number$EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) {\n          return 0;\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + _Number$EPSILON) / (tupleCoords[i] - startCoords[i] + _Number$EPSILON);\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + _Number$EPSILON) / (endCoords[i] - tupleCoords[i] + _Number$EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  };\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n\n\n  GlyphVariationProcessor.prototype.interpolateMissingDeltas = function interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    var point = 0;\n    while (point < points.length) {\n      var firstPoint = point;\n\n      // find the end point of the contour\n      var endPoint = point;\n      var pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      var firstDelta = point;\n      var curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  };\n\n  GlyphVariationProcessor.prototype.deltaInterpolate = function deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    var iterable = ['x', 'y'];\n    for (var i = 0; i < iterable.length; i++) {\n      var k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      var in1 = inPoints[ref1][k];\n      var in2 = inPoints[ref2][k];\n      var out1 = outPoints[ref1][k];\n      var out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        var scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (var _p = p1; _p <= p2; _p++) {\n          var out = inPoints[_p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[_p][k] = out;\n        }\n      }\n    }\n  };\n\n  GlyphVariationProcessor.prototype.deltaShift = function deltaShift(p1, p2, ref, inPoints, outPoints) {\n    var deltaX = outPoints[ref].x - inPoints[ref].x;\n    var deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (var p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  };\n\n  GlyphVariationProcessor.prototype.getAdvanceAdjustment = function getAdvanceAdjustment(gid, table) {\n    var outerIndex = void 0,\n        innerIndex = void 0;\n\n    if (table.advanceWidthMapping) {\n      var idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      var entryFormat = table.advanceWidthMapping.entryFormat;\n      var _table$advanceWidthMa = table.advanceWidthMapping.mapData[idx];\n      outerIndex = _table$advanceWidthMa.outerIndex;\n      innerIndex = _table$advanceWidthMa.innerIndex;\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  };\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n\n\n  GlyphVariationProcessor.prototype.getDelta = function getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    var deltaSet = varData.deltaSets[innerIndex];\n    var blendVector = this.getBlendVector(itemStore, outerIndex);\n    var netAdjustment = 0;\n\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  };\n\n  GlyphVariationProcessor.prototype.getBlendVector = function getBlendVector(itemStore, outerIndex) {\n    var varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    var normalizedCoords = this.normalizedCoords;\n    var blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (var master = 0; master < varData.regionIndexCount; master++) {\n      var scalar = 1;\n      var regionIndex = varData.regionIndexes[master];\n      var axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (var j = 0; j < axes.length; j++) {\n        var axis = axes[j];\n        var axisScalar = void 0;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n          // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n          // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n          // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + _Number$EPSILON) / (axis.peakCoord - axis.startCoord + _Number$EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + _Number$EPSILON) / (axis.endCoord - axis.peakCoord + _Number$EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  };\n\n  return GlyphVariationProcessor;\n}();\n\nvar Subset = function () {\n  function Subset(font) {\n    _classCallCheck(this, Subset);\n\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n\n  Subset.prototype.includeGlyph = function includeGlyph(glyph) {\n    if ((typeof glyph === 'undefined' ? 'undefined' : _typeof(glyph)) === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  };\n\n  Subset.prototype.encodeStream = function encodeStream() {\n    var _this = this;\n\n    var s = new r.EncodeStream();\n\n    process.nextTick(function () {\n      _this.encode(s);\n      return s.end();\n    });\n\n    return s;\n  };\n\n  return Subset;\n}();\n\n// Flags for simple glyphs\nvar ON_CURVE$1 = 1 << 0;\nvar X_SHORT_VECTOR$1 = 1 << 1;\nvar Y_SHORT_VECTOR$1 = 1 << 2;\nvar REPEAT$1 = 1 << 3;\nvar SAME_X$1 = 1 << 4;\nvar SAME_Y$1 = 1 << 5;\n\nvar Point$1 = function () {\n  function Point() {\n    _classCallCheck(this, Point);\n  }\n\n  Point.size = function size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  };\n\n  Point.encode = function encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  };\n\n  return Point;\n}();\n\nvar Glyf = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point$1, 0),\n  yPoints: new r.Array(Point$1, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\n\nvar TTFGlyphEncoder = function () {\n  function TTFGlyphEncoder() {\n    _classCallCheck(this, TTFGlyphEncoder);\n  }\n\n  TTFGlyphEncoder.prototype.encodeSimple = function encodeSimple(path) {\n    var instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var endPtsOfContours = [];\n    var xPoints = [];\n    var yPoints = [];\n    var flags = [];\n    var same = 0;\n    var lastX = 0,\n        lastY = 0,\n        lastFlag = 0;\n    var pointCount = 0;\n\n    for (var i = 0; i < path.commands.length; i++) {\n      var c = path.commands[i];\n\n      for (var j = 0; j < c.args.length; j += 2) {\n        var x = c.args[j];\n        var y = c.args[j + 1];\n        var flag = 0;\n\n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          var next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            var midX = (lastX + next.args[0]) / 2;\n            var midY = (lastY + next.args[1]) / 2;\n\n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n\n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE$1;\n        }\n\n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR$1, SAME_X$1);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR$1, SAME_Y$1);\n\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT$1;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n\n          flags.push(flag);\n          lastFlag = flag;\n        }\n\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n\n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n\n    var bbox = path.bbox;\n    var glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n\n    var size = Glyf.size(glyf);\n    var tail = 4 - size % 4;\n\n    var stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n\n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n\n    return stream.buffer;\n  };\n\n  TTFGlyphEncoder.prototype._encodePoint = function _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    var diff = value - last;\n\n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n\n      points.push(diff);\n    }\n\n    return flag;\n  };\n\n  return TTFGlyphEncoder;\n}();\n\nvar TTFSubset = function (_Subset) {\n  _inherits(TTFSubset, _Subset);\n\n  function TTFSubset(font) {\n    _classCallCheck(this, TTFSubset);\n\n    var _this = _possibleConstructorReturn(this, _Subset.call(this, font));\n\n    _this.glyphEncoder = new TTFGlyphEncoder();\n    return _this;\n  }\n\n  TTFSubset.prototype._addGlyph = function _addGlyph(gid) {\n    var glyph = this.font.getGlyph(gid);\n    var glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    var curOffset = this.font.loca.offsets[gid];\n    var nextOffset = this.font.loca.offsets[gid + 1];\n\n    var stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n\n    var buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = new Buffer(buffer);\n      for (var _iterator = glyf.components, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var component = _ref;\n\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  };\n\n  TTFSubset.prototype.encode = function encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    var i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    var maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n\n    this.loca.offsets.push(this.offset);\n\n    var head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n\n    var hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    Directory.encode(stream, {\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  };\n\n  return TTFSubset;\n}(Subset);\n\nvar CFFSubset = function (_Subset) {\n  _inherits(CFFSubset, _Subset);\n\n  function CFFSubset(font) {\n    _classCallCheck(this, CFFSubset);\n\n    var _this = _possibleConstructorReturn(this, _Subset.call(this, font));\n\n    _this.cff = _this.font['CFF '];\n    if (!_this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n    return _this;\n  }\n\n  CFFSubset.prototype.subsetCharstrings = function subsetCharstrings() {\n    this.charstrings = [];\n    var gsubrs = {};\n\n    for (var _iterator = this.glyphs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var gid = _ref;\n\n      this.charstrings.push(this.cff.getCharString(gid));\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  };\n\n  CFFSubset.prototype.subsetSubrs = function subsetSubrs(subrs, used) {\n    var res = [];\n    for (var i = 0; i < subrs.length; i++) {\n      var subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(new Buffer([11])); // return\n      }\n    }\n\n    return res;\n  };\n\n  CFFSubset.prototype.subsetFontdict = function subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n\n    var used_fds = {};\n    var used_subrs = [];\n    for (var _iterator2 = this.glyphs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var gid = _ref2;\n\n      var fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(_Object$assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(topDict.FDArray.length - 1);\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[used_subrs.length - 1][subr] = true;\n      }\n    }\n\n    for (var i = 0; i < topDict.FDArray.length; i++) {\n      var dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = _Object$assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  };\n\n  CFFSubset.prototype.createCIDFontdict = function createCIDFontdict(topDict) {\n    var used_subrs = {};\n    for (var _iterator3 = this.glyphs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var gid = _ref3;\n\n      var glyph = this.font.getGlyph(gid);\n      var path = glyph.path; // this causes the glyph to be parsed\n\n      for (var subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    var privateDict = _Object$assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{ Private: privateDict }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{ first: 0, fd: 0 }],\n      sentinel: this.charstrings.length\n    };\n  };\n\n  CFFSubset.prototype.addString = function addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  };\n\n  CFFSubset.prototype.encode = function encode(stream) {\n    this.subsetCharstrings();\n\n    var charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]\n    };\n\n    var topDict = _Object$assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    var _arr = ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName'];\n    for (var _i4 = 0; _i4 < _arr.length; _i4++) {\n      var key = _arr[_i4];\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    var top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n\n    CFFTop.encode(stream, top);\n  };\n\n  return CFFSubset;\n}(Subset);\n\nvar _class;\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nvar TTFFont = (_class = function () {\n  TTFFont.probe = function probe(buffer) {\n    var format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  };\n\n  function TTFFont(stream) {\n    var variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, TTFFont);\n\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (var tag in this.directory.tables) {\n      var table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        _Object$defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  TTFFont.prototype.setDefaultLanguage = function setDefaultLanguage() {\n    var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    this.defaultLanguage = lang;\n  };\n\n  TTFFont.prototype._getTable = function _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit.logErrors) {\n          console.error('Error decoding table ' + table.tag);\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  };\n\n  TTFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  };\n\n  TTFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, { _startOffset: 0 });\n  };\n\n  TTFFont.prototype._decodeTable = function _decodeTable(table) {\n    var pos = this.stream.pos;\n\n    var stream = this._getTableStream(table.tag);\n    var result = tables[table.tag].decode(stream, this, table.length);\n\n    this.stream.pos = pos;\n    return result;\n  };\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n\n\n  TTFFont.prototype.getName = function getName(key) {\n    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultLanguage || fontkit.defaultLanguage;\n\n    var record = this.name && this.name.records[key];\n    if (record) {\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return record[lang] || record[this.defaultLanguage] || record[fontkit.defaultLanguage] || record['en'] || record[_Object$keys(record)[0]] // Seriously, ANY language would be fine\n      || null;\n    }\n\n    return null;\n  };\n\n  /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */\n\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  TTFFont.prototype.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  };\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n\n\n  TTFFont.prototype.glyphForCodePoint = function glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  };\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n\n\n  TTFFont.prototype.glyphsForString = function glyphsForString(string) {\n    var glyphs = [];\n    var len = string.length;\n    var idx = 0;\n    var last = -1;\n    var state = -1;\n\n    while (idx <= len) {\n      var code = 0;\n      var nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          var next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else {\n        idx++;\n      }\n\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  };\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  TTFFont.prototype.layout = function layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  };\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n\n\n  TTFFont.prototype.stringsForGlyph = function stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  };\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n\n\n  TTFFont.prototype.getAvailableFeatures = function getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  };\n\n  TTFFont.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n\n\n  TTFFont.prototype.getGlyph = function getGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n      } else if (this.directory.tables.COLR && this.directory.tables.CPAL) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  };\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n\n\n  TTFFont.prototype.createSubset = function createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  };\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  TTFFont.prototype.getVariation = function getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    var coords = this.fvar.axis.map(function (axis, i) {\n      var axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n\n    var stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n\n    var font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n\n    return font;\n  };\n\n  // Standardized format plugin API\n  TTFFont.prototype.getFont = function getFont(name) {\n    return this.getVariation(name);\n  };\n\n  _createClass(TTFFont, [{\n    key: 'postscriptName',\n    get: function get() {\n      return this.getName('postscriptName');\n    }\n\n    /**\n     * The font's full name, e.g. \"Helvetica Bold\"\n     * @type {string}\n     */\n\n  }, {\n    key: 'fullName',\n    get: function get() {\n      return this.getName('fullName');\n    }\n\n    /**\n     * The font's family name, e.g. \"Helvetica\"\n     * @type {string}\n     */\n\n  }, {\n    key: 'familyName',\n    get: function get() {\n      return this.getName('fontFamily');\n    }\n\n    /**\n     * The font's sub-family, e.g. \"Bold\".\n     * @type {string}\n     */\n\n  }, {\n    key: 'subfamilyName',\n    get: function get() {\n      return this.getName('fontSubfamily');\n    }\n\n    /**\n     * The font's copyright information\n     * @type {string}\n     */\n\n  }, {\n    key: 'copyright',\n    get: function get() {\n      return this.getName('copyright');\n    }\n\n    /**\n     * The font's version number\n     * @type {string}\n     */\n\n  }, {\n    key: 'version',\n    get: function get() {\n      return this.getName('version');\n    }\n\n    /**\n     * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n     * @type {number}\n     */\n\n  }, {\n    key: 'ascent',\n    get: function get() {\n      return this.hhea.ascent;\n    }\n\n    /**\n     * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n     * @type {number}\n     */\n\n  }, {\n    key: 'descent',\n    get: function get() {\n      return this.hhea.descent;\n    }\n\n    /**\n     * The amount of space that should be included between lines\n     * @type {number}\n     */\n\n  }, {\n    key: 'lineGap',\n    get: function get() {\n      return this.hhea.lineGap;\n    }\n\n    /**\n     * The offset from the normal underline position that should be used\n     * @type {number}\n     */\n\n  }, {\n    key: 'underlinePosition',\n    get: function get() {\n      return this.post.underlinePosition;\n    }\n\n    /**\n     * The weight of the underline that should be used\n     * @type {number}\n     */\n\n  }, {\n    key: 'underlineThickness',\n    get: function get() {\n      return this.post.underlineThickness;\n    }\n\n    /**\n     * If this is an italic font, the angle the cursor should be drawn at to match the font design\n     * @type {number}\n     */\n\n  }, {\n    key: 'italicAngle',\n    get: function get() {\n      return this.post.italicAngle;\n    }\n\n    /**\n     * The height of capital letters above the baseline.\n     * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n     * @type {number}\n     */\n\n  }, {\n    key: 'capHeight',\n    get: function get() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.capHeight : this.ascent;\n    }\n\n    /**\n     * The height of lower case letters in the font.\n     * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n     * @type {number}\n     */\n\n  }, {\n    key: 'xHeight',\n    get: function get() {\n      var os2 = this['OS/2'];\n      return os2 ? os2.xHeight : 0;\n    }\n\n    /**\n     * The number of glyphs in the font.\n     * @type {number}\n     */\n\n  }, {\n    key: 'numGlyphs',\n    get: function get() {\n      return this.maxp.numGlyphs;\n    }\n\n    /**\n     * The size of the font’s internal coordinate grid\n     * @type {number}\n     */\n\n  }, {\n    key: 'unitsPerEm',\n    get: function get() {\n      return this.head.unitsPerEm;\n    }\n\n    /**\n     * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n     * @type {BBox}\n     */\n\n  }, {\n    key: 'bbox',\n    get: function get() {\n      return _Object$freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n  }, {\n    key: '_cmapProcessor',\n    get: function get() {\n      return new CmapProcessor(this.cmap);\n    }\n\n    /**\n     * An array of all of the unicode code points supported by the font.\n     * @type {number[]}\n     */\n\n  }, {\n    key: 'characterSet',\n    get: function get() {\n      return this._cmapProcessor.getCharacterSet();\n    }\n  }, {\n    key: '_layoutEngine',\n    get: function get() {\n      return new LayoutEngine(this);\n    }\n  }, {\n    key: 'availableFeatures',\n    get: function get() {\n      return this._layoutEngine.getAvailableFeatures();\n    }\n  }, {\n    key: 'variationAxes',\n    get: function get() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n\n      for (var _iterator = this.fvar.axis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var axis = _ref;\n\n        res[axis.axisTag.trim()] = {\n          name: axis.name.en,\n          min: axis.minValue,\n          default: axis.defaultValue,\n          max: axis.maxValue\n        };\n      }\n\n      return res;\n    }\n\n    /**\n     * Returns an object describing the named variation instances\n     * that the font designer has specified. Keys are variation names\n     * and values are the variation settings for this instance.\n     *\n     * @type {object}\n     */\n\n  }, {\n    key: 'namedVariations',\n    get: function get() {\n      var res = {};\n      if (!this.fvar) {\n        return res;\n      }\n\n      for (var _iterator2 = this.fvar.instance, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var instance = _ref2;\n\n        var settings = {};\n        for (var i = 0; i < this.fvar.axis.length; i++) {\n          var axis = this.fvar.axis[i];\n          settings[axis.axisTag.trim()] = instance.coord[i];\n        }\n\n        res[instance.name.en] = settings;\n      }\n\n      return res;\n    }\n  }, {\n    key: '_variationProcessor',\n    get: function get() {\n      if (!this.fvar) {\n        return null;\n      }\n\n      var variationCoords = this.variationCoords;\n\n      // Ignore if no variation coords and not CFF2\n      if (!variationCoords && !this.CFF2) {\n        return null;\n      }\n\n      if (!variationCoords) {\n        variationCoords = this.fvar.axis.map(function (axis) {\n          return axis.defaultValue;\n        });\n      }\n\n      return new GlyphVariationProcessor(this, variationCoords);\n    }\n  }]);\n\n  return TTFFont;\n}(), (_applyDecoratedDescriptor(_class.prototype, 'bbox', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'bbox'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_cmapProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_cmapProcessor'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'characterSet', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'characterSet'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_layoutEngine', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_layoutEngine'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'variationAxes', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'variationAxes'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'namedVariations', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, 'namedVariations'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, '_variationProcessor', [cache], _Object$getOwnPropertyDescriptor(_class.prototype, '_variationProcessor'), _class.prototype)), _class);\n\nvar WOFFDirectoryEntry = new r.Struct({\n  tag: new r.String(4),\n  offset: new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  compLength: r.uint32,\n  length: r.uint32,\n  origChecksum: r.uint32\n});\n\nvar WOFFDirectory = new r.Struct({\n  tag: new r.String(4), // should be 'wOFF'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function () {\n  var tables = {};\n  for (var _iterator = this.tables, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var table = _ref;\n\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nvar WOFFFont = function (_TTFFont) {\n  _inherits(WOFFFont, _TTFFont);\n\n  function WOFFFont() {\n    _classCallCheck(this, WOFFFont);\n\n    return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));\n  }\n\n  WOFFFont.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  };\n\n  WOFFFont.prototype._decodeDirectory = function _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });\n  };\n\n  WOFFFont.prototype._getTableStream = function _getTableStream(tag) {\n    var table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        var outBuffer = new Buffer(table.length);\n        var buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  };\n\n  return WOFFFont;\n}(TTFFont);\n\n/**\n * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.\n */\n\nvar WOFF2Glyph = function (_TTFGlyph) {\n  _inherits(WOFF2Glyph, _TTFGlyph);\n\n  function WOFF2Glyph() {\n    _classCallCheck(this, WOFF2Glyph);\n\n    return _possibleConstructorReturn(this, _TTFGlyph.apply(this, arguments));\n  }\n\n  WOFF2Glyph.prototype._decode = function _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  };\n\n  WOFF2Glyph.prototype._getCBox = function _getCBox() {\n    return this.path.bbox;\n  };\n\n  return WOFF2Glyph;\n}(TTFGlyph);\n\nvar Base128 = {\n  decode: function decode(stream) {\n    var result = 0;\n    var iterable = [0, 1, 2, 3, 4];\n    for (var j = 0; j < iterable.length; j++) {\n      var i = iterable[j];\n      var code = stream.readUInt8();\n\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) {\n        throw new Error('Overflow');\n      }\n\n      result = result << 7 | code & 0x7f;\n      if ((code & 0x80) === 0) {\n        return result;\n      }\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n};\n\nvar knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];\n\nvar WOFF2DirectoryEntry = new r.Struct({\n  flags: r.uint8,\n  customTag: new r.Optional(new r.String(4), function (t) {\n    return (t.flags & 0x3f) === 0x3f;\n  }),\n  tag: function tag(t) {\n    return t.customTag || knownTags[t.flags & 0x3f];\n  }, // || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },\n  length: Base128,\n  transformVersion: function transformVersion(t) {\n    return t.flags >>> 6 & 0x03;\n  },\n  transformed: function transformed(t) {\n    return t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0;\n  },\n  transformLength: new r.Optional(Base128, function (t) {\n    return t.transformed;\n  })\n});\n\nvar WOFF2Directory = new r.Struct({\n  tag: new r.String(4), // should be 'wOF2'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  totalCompressedSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')\n});\n\nWOFF2Directory.process = function () {\n  var tables = {};\n  for (var i = 0; i < this.tables.length; i++) {\n    var table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\n/**\n * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2\n * See spec here: http://www.w3.org/TR/WOFF2/\n */\n\nvar WOFF2Font = function (_TTFFont) {\n  _inherits(WOFF2Font, _TTFFont);\n\n  function WOFF2Font() {\n    _classCallCheck(this, WOFF2Font);\n\n    return _possibleConstructorReturn(this, _TTFFont.apply(this, arguments));\n  }\n\n  WOFF2Font.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOF2';\n  };\n\n  WOFF2Font.prototype._decodeDirectory = function _decodeDirectory() {\n    this.directory = WOFF2Directory.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  };\n\n  WOFF2Font.prototype._decompress = function _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      var buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n\n      var decompressedSize = 0;\n      for (var tag in this.directory.tables) {\n        var entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n      }\n\n      var decompressed = brotli(buffer, decompressedSize);\n      if (!decompressed) {\n        throw new Error('Error decoding compressed data in WOFF2');\n      }\n\n      this.stream = new r.DecodeStream(new Buffer(decompressed));\n      this._decompressed = true;\n    }\n  };\n\n  WOFF2Font.prototype._decodeTable = function _decodeTable(table) {\n    this._decompress();\n    return _TTFFont.prototype._decodeTable.call(this, table);\n  };\n\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n\n\n  WOFF2Font.prototype._getBaseGlyph = function _getBaseGlyph(glyph) {\n    var characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) {\n          this._transformGlyfTable();\n        }\n        return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);\n      } else {\n        return _TTFFont.prototype._getBaseGlyph.call(this, glyph, characters);\n      }\n    }\n  };\n\n  WOFF2Font.prototype._transformGlyfTable = function _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    var table = GlyfTable.decode(this.stream);\n    var glyphs = [];\n\n    for (var index = 0; index < table.numGlyphs; index++) {\n      var glyph = {};\n      var nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) {\n        // simple glyph\n        var nPoints = [];\n        var totalPoints = 0;\n\n        for (var i = 0; i < nContours; i++) {\n          var _r = read255UInt16(table.nPoints);\n          totalPoints += _r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (var _i = 0; _i < nContours; _i++) {\n          glyph.points[nPoints[_i] - 1].endContour = true;\n        }\n\n        var instructionSize = read255UInt16(table.glyphs);\n      } else if (nContours < 0) {\n        // composite glyph\n        var haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);\n        if (haveInstructions) {\n          var instructionSize = read255UInt16(table.glyphs);\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  };\n\n  return WOFF2Font;\n}(TTFFont);\n\nvar Substream = function () {\n  function Substream(length) {\n    _classCallCheck(this, Substream);\n\n    this.length = length;\n    this._buf = new r.Buffer(length);\n  }\n\n  Substream.prototype.decode = function decode(stream, parent) {\n    return new r.DecodeStream(this._buf.decode(stream, parent));\n  };\n\n  return Substream;\n}();\n\n// This struct represents the entire glyf table\n\n\nvar GlyfTable = new r.Struct({\n  version: r.uint32,\n  numGlyphs: r.uint16,\n  indexFormat: r.uint16,\n  nContourStreamSize: r.uint32,\n  nPointsStreamSize: r.uint32,\n  flagStreamSize: r.uint32,\n  glyphStreamSize: r.uint32,\n  compositeStreamSize: r.uint32,\n  bboxStreamSize: r.uint32,\n  instructionStreamSize: r.uint32,\n  nContours: new Substream('nContourStreamSize'),\n  nPoints: new Substream('nPointsStreamSize'),\n  flags: new Substream('flagStreamSize'),\n  glyphs: new Substream('glyphStreamSize'),\n  composites: new Substream('compositeStreamSize'),\n  bboxes: new Substream('bboxStreamSize'),\n  instructions: new Substream('instructionStreamSize')\n});\n\nvar WORD_CODE = 253;\nvar ONE_MORE_BYTE_CODE2 = 254;\nvar ONE_MORE_BYTE_CODE1 = 255;\nvar LOWEST_U_CODE = 253;\n\nfunction read255UInt16(stream) {\n  var code = stream.readUInt8();\n\n  if (code === WORD_CODE) {\n    return stream.readUInt16BE();\n  }\n\n  if (code === ONE_MORE_BYTE_CODE1) {\n    return stream.readUInt8() + LOWEST_U_CODE;\n  }\n\n  if (code === ONE_MORE_BYTE_CODE2) {\n    return stream.readUInt8() + LOWEST_U_CODE * 2;\n  }\n\n  return code;\n}\n\nfunction withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction decodeTriplet(flags, glyphs, nPoints) {\n  var y = void 0;\n  var x = y = 0;\n  var res = [];\n\n  for (var i = 0; i < nPoints; i++) {\n    var dx = 0,\n        dy = 0;\n    var flag = flags.readUInt8();\n    var onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n    } else if (flag < 20) {\n      dx = withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n      dy = withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      var b2 = glyphs.readUInt8();\n      dx = withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n    } else {\n      dx = withSign(flag, glyphs.readUInt16BE());\n      dy = withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new Point(onCurve, false, x, y));\n  }\n\n  return res;\n}\n\nvar TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: r.uint32,\n    offsets: new r.Array(r.uint32, 'numFonts'),\n    dsigTag: r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\n\nvar TrueTypeCollection = function () {\n  TrueTypeCollection.probe = function probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  };\n\n  function TrueTypeCollection(stream) {\n    _classCallCheck(this, TrueTypeCollection);\n\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  TrueTypeCollection.prototype.getFont = function getFont(name) {\n    for (var _iterator = this.header.offsets, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var offset = _ref;\n\n      var stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  };\n\n  _createClass(TrueTypeCollection, [{\n    key: 'fonts',\n    get: function get() {\n      var fonts = [];\n      for (var _iterator2 = this.header.offsets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var offset = _ref2;\n\n        var stream = new r.DecodeStream(this.stream.buffer);\n        stream.pos = offset;\n        fonts.push(new TTFFont(stream));\n      }\n\n      return fonts;\n    }\n  }]);\n\n  return TrueTypeCollection;\n}();\n\nvar DFontName = new r.String(r.uint8);\nvar DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\n\nvar Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\n\nvar Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, function (t) {\n    return t.maxTypeIndex + 1;\n  }), { type: 'parent' })\n});\n\nvar TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, function (t) {\n    return t.length + 1;\n  })\n});\n\nvar DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\n\nvar DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\n\nvar DFont = function () {\n  DFont.probe = function probe(buffer) {\n    var stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (var _iterator = header.map.typeList.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var type = _ref;\n\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  function DFont(stream) {\n    _classCallCheck(this, DFont);\n\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (var _iterator2 = this.header.map.typeList.types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var type = _ref2;\n\n      for (var _iterator3 = type.refList, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var ref = _ref3;\n\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  DFont.prototype.getFont = function getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (var _iterator4 = this.sfnt.refList, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var ref = _ref4;\n\n      var pos = this.header.dataOffset + ref.dataOffset + 4;\n      var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      var font = new TTFFont(stream);\n      if (font.postscriptName === name) {\n        return font;\n      }\n    }\n\n    return null;\n  };\n\n  _createClass(DFont, [{\n    key: 'fonts',\n    get: function get() {\n      var fonts = [];\n      for (var _iterator5 = this.sfnt.refList, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i5 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i5++];\n        } else {\n          _i5 = _iterator5.next();\n          if (_i5.done) break;\n          _ref5 = _i5.value;\n        }\n\n        var ref = _ref5;\n\n        var pos = this.header.dataOffset + ref.dataOffset + 4;\n        var stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n        fonts.push(new TTFFont(stream));\n      }\n\n      return fonts;\n    }\n  }]);\n\n  return DFont;\n}();\n\n// Register font formats\nfontkit.registerFormat(TTFFont);\nfontkit.registerFormat(WOFFFont);\nfontkit.registerFormat(WOFF2Font);\nfontkit.registerFormat(TrueTypeCollection);\nfontkit.registerFormat(DFont);\n\nmodule.exports = fontkit;\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n","\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it. \nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n","\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    \"mik\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n","\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}","\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 decode tables.\n        var thirdByteNodeIdx = this.decodeTables.length;\n        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        var fourthByteNodeIdx = this.decodeTables.length;\n        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n            var secondByteNode = this.decodeTables[secondByteNodeIdx];\n            for (var j = 0x30; j <= 0x39; j++)\n                secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n        }\n        for (var i = 0x81; i <= 0xFE; i++)\n            thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n        for (var i = 0x30; i <= 0x39; i++)\n            fourthByteNode[i] = GB18030_CODE\n    }        \n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0)\n            this._setEncodeChar(uCode, mbCode);\n        else if (uCode <= NODE_START)\n            this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n        else if (uCode <= SEQ_START)\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = Buffer.alloc(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBuf = Buffer.alloc(0);\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = Buffer.alloc(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.\n        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    \n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n        }\n        else if (uCode === GB18030_CODE) {\n            var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);\n            var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode > 0xFFFF) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 + uCode % 0x400;\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBuf.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var buf = this.prevBuf.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBuf = Buffer.alloc(0);\n        this.nodeIdx = 0;\n        if (buf.length > 0)\n            ret += this.write(buf);\n    }\n\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + Math.floor((r-l+1)/2);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n","\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [0xa2cc],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n","\"use strict\";\n\nvar Buffer = require(\"buffer\").Buffer,\n    Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n","\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n// Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer\n\n// == Extend Node primitives to use iconv-lite =================================\n\nmodule.exports = function (iconv) {\n    var original = undefined; // Place to keep original methods.\n\n    // Node authors rewrote Buffer internals to make it compatible with\n    // Uint8Array and we cannot patch key functions since then.\n    // Note: this does use older Buffer API on a purpose\n    iconv.supportsNodeEncodingsExtension = !(Buffer.from || new Buffer(0) instanceof Uint8Array);\n\n    iconv.extendNodeEncodings = function extendNodeEncodings() {\n        if (original) return;\n        original = {};\n\n        if (!iconv.supportsNodeEncodingsExtension) {\n            console.error(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n            console.error(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n            return;\n        }\n\n        var nodeNativeEncodings = {\n            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, \n            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,\n        };\n\n        Buffer.isNativeEncoding = function(enc) {\n            return enc && nodeNativeEncodings[enc.toLowerCase()];\n        }\n\n        // -- SlowBuffer -----------------------------------------------------------\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        original.SlowBufferToString = SlowBuffer.prototype.toString;\n        SlowBuffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.SlowBufferWrite = SlowBuffer.prototype.write;\n        SlowBuffer.prototype.write = function(string, offset, length, encoding) {\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n        }\n\n        // -- Buffer ---------------------------------------------------------------\n\n        original.BufferIsEncoding = Buffer.isEncoding;\n        Buffer.isEncoding = function(encoding) {\n            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n        }\n\n        original.BufferByteLength = Buffer.byteLength;\n        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferByteLength.call(this, str, encoding);\n\n            // Slow, I know, but we don't have a better way yet.\n            return iconv.encode(str, encoding).length;\n        }\n\n        original.BufferToString = Buffer.prototype.toString;\n        Buffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.BufferWrite = Buffer.prototype.write;\n        Buffer.prototype.write = function(string, offset, length, encoding) {\n            var _offset = offset, _length = length, _encoding = encoding;\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n\n            // TODO: Set _charsWritten.\n        }\n\n\n        // -- Readable -------------------------------------------------------------\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            original.ReadableSetEncoding = Readable.prototype.setEncoding;\n            Readable.prototype.setEncoding = function setEncoding(enc, options) {\n                // Use our own decoder, it has the same interface.\n                // We cannot use original function as it doesn't handle BOM-s.\n                this._readableState.decoder = iconv.getDecoder(enc, options);\n                this._readableState.encoding = enc;\n            }\n\n            Readable.prototype.collect = iconv._collect;\n        }\n    }\n\n    // Remove iconv-lite Node primitive extensions.\n    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n        if (!iconv.supportsNodeEncodingsExtension)\n            return;\n        if (!original)\n            throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\")\n\n        delete Buffer.isNativeEncoding;\n\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        SlowBuffer.prototype.toString = original.SlowBufferToString;\n        SlowBuffer.prototype.write = original.SlowBufferWrite;\n\n        Buffer.isEncoding = original.BufferIsEncoding;\n        Buffer.byteLength = original.BufferByteLength;\n        Buffer.prototype.toString = original.BufferToString;\n        Buffer.prototype.write = original.BufferWrite;\n\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            Readable.prototype.setEncoding = original.ReadableSetEncoding;\n            delete Readable.prototype.collect;\n        }\n\n        original = undefined;\n    }\n}\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    var Wil = gamma0l + Wi7l;\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + gamma1l;\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + Wi16l;\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));","// Generated by CoffeeScript 1.7.1\n(function() {\n  var ArrayT, NumberT, utils;\n\n  NumberT = require('./Number').Number;\n\n  utils = require('./utils');\n\n  ArrayT = (function() {\n    function ArrayT(type, length, lengthType) {\n      this.type = type;\n      this.length = length;\n      this.lengthType = lengthType != null ? lengthType : 'count';\n    }\n\n    ArrayT.prototype.decode = function(stream, parent) {\n      var ctx, i, length, pos, res, target, _i;\n      pos = stream.pos;\n      res = [];\n      ctx = parent;\n      if (this.length != null) {\n        length = utils.resolveLength(this.length, stream, parent);\n      }\n      if (this.length instanceof NumberT) {\n        Object.defineProperties(res, {\n          parent: {\n            value: parent\n          },\n          _startOffset: {\n            value: pos\n          },\n          _currentOffset: {\n            value: 0,\n            writable: true\n          },\n          _length: {\n            value: length\n          }\n        });\n        ctx = res;\n      }\n      if ((length == null) || this.lengthType === 'bytes') {\n        target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;\n        while (stream.pos < target) {\n          res.push(this.type.decode(stream, ctx));\n        }\n      } else {\n        for (i = _i = 0; _i < length; i = _i += 1) {\n          res.push(this.type.decode(stream, ctx));\n        }\n      }\n      return res;\n    };\n\n    ArrayT.prototype.size = function(array, ctx) {\n      var item, size, _i, _len;\n      if (!array) {\n        return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);\n      }\n      size = 0;\n      if (this.length instanceof NumberT) {\n        size += this.length.size();\n        ctx = {\n          parent: ctx\n        };\n      }\n      for (_i = 0, _len = array.length; _i < _len; _i++) {\n        item = array[_i];\n        size += this.type.size(item, ctx);\n      }\n      return size;\n    };\n\n    ArrayT.prototype.encode = function(stream, array, parent) {\n      var ctx, i, item, ptr, _i, _len;\n      ctx = parent;\n      if (this.length instanceof NumberT) {\n        ctx = {\n          pointers: [],\n          startOffset: stream.pos,\n          parent: parent\n        };\n        ctx.pointerOffset = stream.pos + this.size(array, ctx);\n        this.length.encode(stream, array.length);\n      }\n      for (_i = 0, _len = array.length; _i < _len; _i++) {\n        item = array[_i];\n        this.type.encode(stream, item, ctx);\n      }\n      if (this.length instanceof NumberT) {\n        i = 0;\n        while (i < ctx.pointers.length) {\n          ptr = ctx.pointers[i++];\n          ptr.type.encode(stream, ptr.val);\n        }\n      }\n    };\n\n    return ArrayT;\n\n  })();\n\n  module.exports = ArrayT;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Struct, utils;\n\n  utils = require('./utils');\n\n  Struct = (function() {\n    function Struct(fields) {\n      this.fields = fields != null ? fields : {};\n    }\n\n    Struct.prototype.decode = function(stream, parent, length) {\n      var res, _ref;\n      if (length == null) {\n        length = 0;\n      }\n      res = this._setup(stream, parent, length);\n      this._parseFields(stream, res, this.fields);\n      if ((_ref = this.process) != null) {\n        _ref.call(res, stream);\n      }\n      return res;\n    };\n\n    Struct.prototype._setup = function(stream, parent, length) {\n      var res;\n      res = {};\n      Object.defineProperties(res, {\n        parent: {\n          value: parent\n        },\n        _startOffset: {\n          value: stream.pos\n        },\n        _currentOffset: {\n          value: 0,\n          writable: true\n        },\n        _length: {\n          value: length\n        }\n      });\n      return res;\n    };\n\n    Struct.prototype._parseFields = function(stream, res, fields) {\n      var key, type, val;\n      for (key in fields) {\n        type = fields[key];\n        if (typeof type === 'function') {\n          val = type.call(res, res);\n        } else {\n          val = type.decode(stream, res);\n        }\n        if (val !== void 0) {\n          if (val instanceof utils.PropertyDescriptor) {\n            Object.defineProperty(res, key, val);\n          } else {\n            res[key] = val;\n          }\n        }\n        res._currentOffset = stream.pos - res._startOffset;\n      }\n    };\n\n    Struct.prototype.size = function(val, parent, includePointers) {\n      var ctx, key, size, type, _ref;\n      if (val == null) {\n        val = {};\n      }\n      if (includePointers == null) {\n        includePointers = true;\n      }\n      ctx = {\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      size = 0;\n      _ref = this.fields;\n      for (key in _ref) {\n        type = _ref[key];\n        if (type.size != null) {\n          size += type.size(val[key], ctx);\n        }\n      }\n      if (includePointers) {\n        size += ctx.pointerSize;\n      }\n      return size;\n    };\n\n    Struct.prototype.encode = function(stream, val, parent) {\n      var ctx, i, key, ptr, type, _ref, _ref1;\n      if ((_ref = this.preEncode) != null) {\n        _ref.call(val, stream);\n      }\n      ctx = {\n        pointers: [],\n        startOffset: stream.pos,\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n      _ref1 = this.fields;\n      for (key in _ref1) {\n        type = _ref1[key];\n        if (type.encode != null) {\n          type.encode(stream, val[key], ctx);\n        }\n      }\n      i = 0;\n      while (i < ctx.pointers.length) {\n        ptr = ctx.pointers[i++];\n        ptr.type.encode(stream, ptr.val, ptr.parent);\n      }\n    };\n\n    return Struct;\n\n  })();\n\n  module.exports = Struct;\n\n}).call(this);\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = require('./_hide');\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar meta = require('./_meta');\nvar fails = require('./_fails');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar setToStringTag = require('./_set-to-string-tag');\nvar dP = require('./_object-dp').f;\nvar each = require('./_array-methods')(0);\nvar DESCRIPTORS = require('./_descriptors');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function (target, iterable) {\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base();\n      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {\n        anInstance(this, C, KEY);\n        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    IS_WEAK || dP(C.prototype, 'size', {\n      get: function () {\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = new Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","function BrotliInput(buffer) {\n  this.buffer = buffer;\n  this.pos = 0;\n}\n\nBrotliInput.prototype.read = function(buf, i, count) {\n  if (this.pos + count > this.buffer.length) {\n    count = this.buffer.length - this.pos;\n  }\n  \n  for (var p = 0; p < count; p++)\n    buf[i + p] = this.buffer[this.pos + p];\n  \n  this.pos += count;\n  return count;\n}\n\nexports.BrotliInput = BrotliInput;\n\nfunction BrotliOutput(buf) {\n  this.buffer = buf;\n  this.pos = 0;\n}\n\nBrotliOutput.prototype.write = function(buf, count) {\n  if (this.pos + count > this.buffer.length)\n    throw new Error('Output buffer is not large enough');\n  \n  this.buffer.set(buf.subarray(0, count), this.pos);\n  this.pos += count;\n  return count;\n};\n\nexports.BrotliOutput = BrotliOutput;\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Collection of static dictionary words.\n*/\n\nvar data = require('./dictionary-data');\nexports.init = function() {\n  exports.dictionary = data.init();\n};\n\nexports.offsetsByLength = new Uint32Array([\n     0,     0,     0,     0,     0,  4096,  9216, 21504, 35840, 44032,\n 53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536,\n 115968, 118528, 119872, 121280, 122016,\n]);\n\nexports.sizeBitsByLength = new Uint8Array([\n  0,  0,  0,  0, 10, 10, 11, 11, 10, 10,\n 10, 10, 10,  9,  9,  8,  7,  7,  8,  7,\n  7,  6,  6,  5,  5,\n]);\n\nexports.minDictionaryWordLength = 4;\nexports.maxDictionaryWordLength = 24;\n","function HuffmanCode(bits, value) {\n  this.bits = bits;   /* number of bits used for this symbol */\n  this.value = value; /* symbol value or table offset */\n}\n\nexports.HuffmanCode = HuffmanCode;\n\nvar MAX_LENGTH = 15;\n\n/* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the\n   bit-wise reversal of the len least significant bits of key. */\nfunction GetNextKey(key, len) {\n  var step = 1 << (len - 1);\n  while (key & step) {\n    step >>= 1;\n  }\n  return (key & (step - 1)) + step;\n}\n\n/* Stores code in table[0], table[step], table[2*step], ..., table[end] */\n/* Assumes that end is an integer multiple of step */\nfunction ReplicateValue(table, i, step, end, code) {\n  do {\n    end -= step;\n    table[i + end] = new HuffmanCode(code.bits, code.value);\n  } while (end > 0);\n}\n\n/* Returns the table width of the next 2nd level table. count is the histogram\n   of bit lengths for the remaining symbols, len is the code length of the next\n   processed symbol */\nfunction NextTableBitSize(count, len, root_bits) {\n  var left = 1 << (len - root_bits);\n  while (len < MAX_LENGTH) {\n    left -= count[len];\n    if (left <= 0) break;\n    ++len;\n    left <<= 1;\n  }\n  return len - root_bits;\n}\n\nexports.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {\n  var start_table = table;\n  var code;            /* current table entry */\n  var len;             /* current code length */\n  var symbol;          /* symbol index in original or sorted table */\n  var key;             /* reversed prefix code */\n  var step;            /* step size to replicate values in current table */\n  var low;             /* low bits for current root entry */\n  var mask;            /* mask for low bits */\n  var table_bits;      /* key length of current table */\n  var table_size;      /* size of current table */\n  var total_size;      /* sum of root table size and 2nd level table sizes */\n  var sorted;          /* symbols sorted by code length */\n  var count = new Int32Array(MAX_LENGTH + 1);  /* number of codes of each length */\n  var offset = new Int32Array(MAX_LENGTH + 1);  /* offsets in sorted table for each length */\n\n  sorted = new Int32Array(code_lengths_size);\n\n  /* build histogram of code lengths */\n  for (symbol = 0; symbol < code_lengths_size; symbol++) {\n    count[code_lengths[symbol]]++;\n  }\n\n  /* generate offsets into sorted symbol table by code length */\n  offset[1] = 0;\n  for (len = 1; len < MAX_LENGTH; len++) {\n    offset[len + 1] = offset[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (symbol = 0; symbol < code_lengths_size; symbol++) {\n    if (code_lengths[symbol] !== 0) {\n      sorted[offset[code_lengths[symbol]]++] = symbol;\n    }\n  }\n  \n  table_bits = root_bits;\n  table_size = 1 << table_bits;\n  total_size = table_size;\n\n  /* special case code with only one value */\n  if (offset[MAX_LENGTH] === 1) {\n    for (key = 0; key < total_size; ++key) {\n      root_table[table + key] = new HuffmanCode(0, sorted[0] & 0xffff);\n    }\n    \n    return total_size;\n  }\n\n  /* fill in root table */\n  key = 0;\n  symbol = 0;\n  for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {\n    for (; count[len] > 0; --count[len]) {\n      code = new HuffmanCode(len & 0xff, sorted[symbol++] & 0xffff);\n      ReplicateValue(root_table, table + key, step, table_size, code);\n      key = GetNextKey(key, len);\n    }\n  }\n\n  /* fill in 2nd level tables and add pointers to root table */\n  mask = total_size - 1;\n  low = -1;\n  for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {\n    for (; count[len] > 0; --count[len]) {\n      if ((key & mask) !== low) {\n        table += table_size;\n        table_bits = NextTableBitSize(count, len, root_bits);\n        table_size = 1 << table_bits;\n        total_size += table_size;\n        low = key & mask;\n        root_table[start_table + low] = new HuffmanCode((table_bits + root_bits) & 0xff, ((table - start_table) - low) & 0xffff);\n      }\n      code = new HuffmanCode((len - root_bits) & 0xff, sorted[symbol++] & 0xffff);\n      ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);\n      key = GetNextKey(key, len);\n    }\n  }\n  \n  return total_size;\n}\n","const inflate = require('tiny-inflate');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;","// Generated by CoffeeScript 1.7.1\n(function() {\n  var AI, AL, BA, BK, CB, CI_BRK, CJ, CP_BRK, CR, DI_BRK, ID, IN_BRK, LF, LineBreaker, NL, NS, PR_BRK, SA, SG, SP, UnicodeTrie, WJ, XX, base64, characterClasses, classTrie, data, fs, pairTable, _ref, _ref1;\n\n  UnicodeTrie = require('unicode-trie');\n\n  \n\n  base64 = require('base64-js');\n\n  _ref = require('./classes'), BK = _ref.BK, CR = _ref.CR, LF = _ref.LF, NL = _ref.NL, CB = _ref.CB, BA = _ref.BA, SP = _ref.SP, WJ = _ref.WJ, SP = _ref.SP, BK = _ref.BK, LF = _ref.LF, NL = _ref.NL, AI = _ref.AI, AL = _ref.AL, SA = _ref.SA, SG = _ref.SG, XX = _ref.XX, CJ = _ref.CJ, ID = _ref.ID, NS = _ref.NS, characterClasses = _ref.characterClasses;\n\n  _ref1 = require('./pairs'), DI_BRK = _ref1.DI_BRK, IN_BRK = _ref1.IN_BRK, CI_BRK = _ref1.CI_BRK, CP_BRK = _ref1.CP_BRK, PR_BRK = _ref1.PR_BRK, pairTable = _ref1.pairTable;\n\n  data = base64.toByteArray(\"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\");\n\n  classTrie = new UnicodeTrie(data);\n\n  LineBreaker = (function() {\n    var Break, mapClass, mapFirst;\n\n    function LineBreaker(string) {\n      this.string = string;\n      this.pos = 0;\n      this.lastPos = 0;\n      this.curClass = null;\n      this.nextClass = null;\n    }\n\n    LineBreaker.prototype.nextCodePoint = function() {\n      var code, next;\n      code = this.string.charCodeAt(this.pos++);\n      next = this.string.charCodeAt(this.pos);\n      if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {\n        this.pos++;\n        return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;\n      }\n      return code;\n    };\n\n    mapClass = function(c) {\n      switch (c) {\n        case AI:\n          return AL;\n        case SA:\n        case SG:\n        case XX:\n          return AL;\n        case CJ:\n          return NS;\n        default:\n          return c;\n      }\n    };\n\n    mapFirst = function(c) {\n      switch (c) {\n        case LF:\n        case NL:\n          return BK;\n        case CB:\n          return BA;\n        case SP:\n          return WJ;\n        default:\n          return c;\n      }\n    };\n\n    LineBreaker.prototype.nextCharClass = function(first) {\n      if (first == null) {\n        first = false;\n      }\n      return mapClass(classTrie.get(this.nextCodePoint()));\n    };\n\n    Break = (function() {\n      function Break(position, required) {\n        this.position = position;\n        this.required = required != null ? required : false;\n      }\n\n      return Break;\n\n    })();\n\n    LineBreaker.prototype.nextBreak = function() {\n      var cur, lastClass, shouldBreak;\n      if (this.curClass == null) {\n        this.curClass = mapFirst(this.nextCharClass());\n      }\n      while (this.pos < this.string.length) {\n        this.lastPos = this.pos;\n        lastClass = this.nextClass;\n        this.nextClass = this.nextCharClass();\n        if (this.curClass === BK || (this.curClass === CR && this.nextClass !== LF)) {\n          this.curClass = mapFirst(mapClass(this.nextClass));\n          return new Break(this.lastPos, true);\n        }\n        cur = (function() {\n          switch (this.nextClass) {\n            case SP:\n              return this.curClass;\n            case BK:\n            case LF:\n            case NL:\n              return BK;\n            case CR:\n              return CR;\n            case CB:\n              return BA;\n          }\n        }).call(this);\n        if (cur != null) {\n          this.curClass = cur;\n          if (this.nextClass === CB) {\n            return new Break(this.lastPos);\n          }\n          continue;\n        }\n        shouldBreak = false;\n        switch (pairTable[this.curClass][this.nextClass]) {\n          case DI_BRK:\n            shouldBreak = true;\n            break;\n          case IN_BRK:\n            shouldBreak = lastClass === SP;\n            break;\n          case CI_BRK:\n            shouldBreak = lastClass === SP;\n            if (!shouldBreak) {\n              continue;\n            }\n            break;\n          case CP_BRK:\n            if (lastClass !== SP) {\n              continue;\n            }\n        }\n        this.curClass = this.nextClass;\n        if (shouldBreak) {\n          return new Break(this.lastPos);\n        }\n      }\n      if (this.pos >= this.string.length) {\n        if (this.lastPos < this.string.length) {\n          this.lastPos = this.string.length;\n          return new Break(this.string.length);\n        } else {\n          return null;\n        }\n      }\n    };\n\n    return LineBreaker;\n\n  })();\n\n  module.exports = LineBreaker;\n\n}).call(this);\n","// Generated by CoffeeScript 1.4.0\n\n/*\n# MIT LICENSE\n# Copyright (c) 2011 Devon Govett\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy of this \n# software and associated documentation files (the \"Software\"), to deal in the Software \n# without restriction, including without limitation the rights to use, copy, modify, merge, \n# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons \n# to whom the Software is furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in all copies or \n# substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \n# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n(function() {\n  var PNG, fs, zlib;\n\n  fs = require('fs');\n\n  zlib = require('zlib');\n\n  module.exports = PNG = (function() {\n\n    PNG.decode = function(path, fn) {\n      return fs.readFile(path, function(err, file) {\n        var png;\n        png = new PNG(file);\n        return png.decode(function(pixels) {\n          return fn(pixels);\n        });\n      });\n    };\n\n    PNG.load = function(path) {\n      var file;\n      file = fs.readFileSync(path);\n      return new PNG(file);\n    };\n\n    function PNG(data) {\n      var chunkSize, colors, i, index, key, section, short, text, _i, _j, _ref;\n      this.data = data;\n      this.pos = 8;\n      this.palette = [];\n      this.imgData = [];\n      this.transparency = {};\n      this.text = {};\n      while (true) {\n        chunkSize = this.readUInt32();\n        section = ((function() {\n          var _i, _results;\n          _results = [];\n          for (i = _i = 0; _i < 4; i = ++_i) {\n            _results.push(String.fromCharCode(this.data[this.pos++]));\n          }\n          return _results;\n        }).call(this)).join('');\n        switch (section) {\n          case 'IHDR':\n            this.width = this.readUInt32();\n            this.height = this.readUInt32();\n            this.bits = this.data[this.pos++];\n            this.colorType = this.data[this.pos++];\n            this.compressionMethod = this.data[this.pos++];\n            this.filterMethod = this.data[this.pos++];\n            this.interlaceMethod = this.data[this.pos++];\n            break;\n          case 'PLTE':\n            this.palette = this.read(chunkSize);\n            break;\n          case 'IDAT':\n            for (i = _i = 0; _i < chunkSize; i = _i += 1) {\n              this.imgData.push(this.data[this.pos++]);\n            }\n            break;\n          case 'tRNS':\n            this.transparency = {};\n            switch (this.colorType) {\n              case 3:\n                this.transparency.indexed = this.read(chunkSize);\n                short = 255 - this.transparency.indexed.length;\n                if (short > 0) {\n                  for (i = _j = 0; 0 <= short ? _j < short : _j > short; i = 0 <= short ? ++_j : --_j) {\n                    this.transparency.indexed.push(255);\n                  }\n                }\n                break;\n              case 0:\n                this.transparency.grayscale = this.read(chunkSize)[0];\n                break;\n              case 2:\n                this.transparency.rgb = this.read(chunkSize);\n            }\n            break;\n          case 'tEXt':\n            text = this.read(chunkSize);\n            index = text.indexOf(0);\n            key = String.fromCharCode.apply(String, text.slice(0, index));\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n            break;\n          case 'IEND':\n            this.colors = (function() {\n              switch (this.colorType) {\n                case 0:\n                case 3:\n                case 4:\n                  return 1;\n                case 2:\n                case 6:\n                  return 3;\n              }\n            }).call(this);\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n            this.pixelBitlength = this.bits * colors;\n            this.colorSpace = (function() {\n              switch (this.colors) {\n                case 1:\n                  return 'DeviceGray';\n                case 3:\n                  return 'DeviceRGB';\n              }\n            }).call(this);\n            this.imgData = new Buffer(this.imgData);\n            return;\n          default:\n            this.pos += chunkSize;\n        }\n        this.pos += 4;\n        if (this.pos > this.data.length) {\n          throw new Error(\"Incomplete or corrupt PNG file\");\n        }\n      }\n      return;\n    }\n\n    PNG.prototype.read = function(bytes) {\n      var i, _i, _results;\n      _results = [];\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        _results.push(this.data[this.pos++]);\n      }\n      return _results;\n    };\n\n    PNG.prototype.readUInt32 = function() {\n      var b1, b2, b3, b4;\n      b1 = this.data[this.pos++] << 24;\n      b2 = this.data[this.pos++] << 16;\n      b3 = this.data[this.pos++] << 8;\n      b4 = this.data[this.pos++];\n      return b1 | b2 | b3 | b4;\n    };\n\n    PNG.prototype.readUInt16 = function() {\n      var b1, b2;\n      b1 = this.data[this.pos++] << 8;\n      b2 = this.data[this.pos++];\n      return b1 | b2;\n    };\n\n    PNG.prototype.decodePixels = function(fn) {\n      var _this = this;\n      return zlib.inflate(this.imgData, function(err, data) {\n        var byte, c, col, i, left, length, p, pa, paeth, pb, pc, pixelBytes, pixels, pos, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n        if (err) {\n          throw err;\n        }\n        pixelBytes = _this.pixelBitlength / 8;\n        scanlineLength = pixelBytes * _this.width;\n        pixels = new Buffer(scanlineLength * _this.height);\n        length = data.length;\n        row = 0;\n        pos = 0;\n        c = 0;\n        while (pos < length) {\n          switch (data[pos++]) {\n            case 0:\n              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\n                pixels[c++] = data[pos++];\n              }\n              break;\n            case 1:\n              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\n                byte = data[pos++];\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                pixels[c++] = (byte + left) % 256;\n              }\n              break;\n            case 2:\n              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                pixels[c++] = (upper + byte) % 256;\n              }\n              break;\n            case 3:\n              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                pixels[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n              }\n              break;\n            case 4:\n              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\n                byte = data[pos++];\n                col = (i - (i % pixelBytes)) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                if (row === 0) {\n                  upper = upperLeft = 0;\n                } else {\n                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\n                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];\n                }\n                p = left + upper - upperLeft;\n                pa = Math.abs(p - left);\n                pb = Math.abs(p - upper);\n                pc = Math.abs(p - upperLeft);\n                if (pa <= pb && pa <= pc) {\n                  paeth = left;\n                } else if (pb <= pc) {\n                  paeth = upper;\n                } else {\n                  paeth = upperLeft;\n                }\n                pixels[c++] = (byte + paeth) % 256;\n              }\n              break;\n            default:\n              throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n          }\n          row++;\n        }\n        return fn(pixels);\n      });\n    };\n\n    PNG.prototype.decodePalette = function() {\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;\n      palette = this.palette;\n      transparency = this.transparency.indexed || [];\n      ret = new Buffer(transparency.length + palette.length);\n      pos = 0;\n      length = palette.length;\n      c = 0;\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\n        ret[pos++] = palette[i];\n        ret[pos++] = palette[i + 1];\n        ret[pos++] = palette[i + 2];\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;\n      }\n      return ret;\n    };\n\n    PNG.prototype.copyToImageData = function(imageData, pixels) {\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;\n      colors = this.colors;\n      palette = null;\n      alpha = this.hasAlphaChannel;\n      if (this.palette.length) {\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();\n        colors = 4;\n        alpha = true;\n      }\n      data = (imageData != null ? imageData.data : void 0) || imageData;\n      length = data.length;\n      input = palette || pixels;\n      i = j = 0;\n      if (colors === 1) {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          v = input[k++];\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      } else {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      }\n    };\n\n    PNG.prototype.decode = function(fn) {\n      var ret,\n        _this = this;\n      ret = new Buffer(this.width * this.height * 4);\n      return this.decodePixels(function(pixels) {\n        _this.copyToImageData(ret, pixels);\n        return fn(ret);\n      });\n    };\n\n    return PNG;\n\n  })();\n\n}).call(this);\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t            i--;\n\t        }\n\t        data.sigBytes = i + 1;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));","// Generated by CoffeeScript 1.7.1\n(function() {\n  var key, val, _ref, _ref1;\n\n  exports.EncodeStream = require('./src/EncodeStream');\n\n  exports.DecodeStream = require('./src/DecodeStream');\n\n  exports.Array = require('./src/Array');\n\n  exports.LazyArray = require('./src/LazyArray');\n\n  exports.Bitfield = require('./src/Bitfield');\n\n  exports.Boolean = require('./src/Boolean');\n\n  exports.Buffer = require('./src/Buffer');\n\n  exports.Enum = require('./src/Enum');\n\n  exports.Optional = require('./src/Optional');\n\n  exports.Reserved = require('./src/Reserved');\n\n  exports.String = require('./src/String');\n\n  exports.Struct = require('./src/Struct');\n\n  exports.VersionedStruct = require('./src/VersionedStruct');\n\n  _ref = require('./src/Number');\n  for (key in _ref) {\n    val = _ref[key];\n    exports[key] = val;\n  }\n\n  _ref1 = require('./src/Pointer');\n  for (key in _ref1) {\n    val = _ref1[key];\n    exports[key] = val;\n  }\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var DecodeStream, EncodeStream, iconv, stream,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  stream = require('stream');\n\n  DecodeStream = require('./DecodeStream');\n\n  try {\n    iconv = require('iconv-lite');\n  } catch (_error) {}\n\n  EncodeStream = (function(_super) {\n    var key;\n\n    __extends(EncodeStream, _super);\n\n    function EncodeStream(bufferSize) {\n      if (bufferSize == null) {\n        bufferSize = 65536;\n      }\n      EncodeStream.__super__.constructor.apply(this, arguments);\n      this.buffer = new Buffer(bufferSize);\n      this.bufferOffset = 0;\n      this.pos = 0;\n    }\n\n    for (key in Buffer.prototype) {\n      if (key.slice(0, 5) === 'write') {\n        (function(key) {\n          var bytes;\n          bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, '')];\n          return EncodeStream.prototype[key] = function(value) {\n            this.ensure(bytes);\n            this.buffer[key](value, this.bufferOffset);\n            this.bufferOffset += bytes;\n            return this.pos += bytes;\n          };\n        })(key);\n      }\n    }\n\n    EncodeStream.prototype._read = function() {};\n\n    EncodeStream.prototype.ensure = function(bytes) {\n      if (this.bufferOffset + bytes > this.buffer.length) {\n        return this.flush();\n      }\n    };\n\n    EncodeStream.prototype.flush = function() {\n      if (this.bufferOffset > 0) {\n        this.push(new Buffer(this.buffer.slice(0, this.bufferOffset)));\n        return this.bufferOffset = 0;\n      }\n    };\n\n    EncodeStream.prototype.writeBuffer = function(buffer) {\n      this.flush();\n      this.push(buffer);\n      return this.pos += buffer.length;\n    };\n\n    EncodeStream.prototype.writeString = function(string, encoding) {\n      var buf, byte, i, _i, _ref;\n      if (encoding == null) {\n        encoding = 'ascii';\n      }\n      switch (encoding) {\n        case 'utf16le':\n        case 'ucs2':\n        case 'utf8':\n        case 'ascii':\n          return this.writeBuffer(new Buffer(string, encoding));\n        case 'utf16be':\n          buf = new Buffer(string, 'utf16le');\n          for (i = _i = 0, _ref = buf.length - 1; _i < _ref; i = _i += 2) {\n            byte = buf[i];\n            buf[i] = buf[i + 1];\n            buf[i + 1] = byte;\n          }\n          return this.writeBuffer(buf);\n        default:\n          if (iconv) {\n            return this.writeBuffer(iconv.encode(string, encoding));\n          } else {\n            throw new Error('Install iconv-lite to enable additional string encodings.');\n          }\n      }\n    };\n\n    EncodeStream.prototype.writeUInt24BE = function(val) {\n      this.ensure(3);\n      this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;\n      this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;\n      this.buffer[this.bufferOffset++] = val & 0xff;\n      return this.pos += 3;\n    };\n\n    EncodeStream.prototype.writeUInt24LE = function(val) {\n      this.ensure(3);\n      this.buffer[this.bufferOffset++] = val & 0xff;\n      this.buffer[this.bufferOffset++] = val >>> 8 & 0xff;\n      this.buffer[this.bufferOffset++] = val >>> 16 & 0xff;\n      return this.pos += 3;\n    };\n\n    EncodeStream.prototype.writeInt24BE = function(val) {\n      if (val >= 0) {\n        return this.writeUInt24BE(val);\n      } else {\n        return this.writeUInt24BE(val + 0xffffff + 1);\n      }\n    };\n\n    EncodeStream.prototype.writeInt24LE = function(val) {\n      if (val >= 0) {\n        return this.writeUInt24LE(val);\n      } else {\n        return this.writeUInt24LE(val + 0xffffff + 1);\n      }\n    };\n\n    EncodeStream.prototype.fill = function(val, length) {\n      var buf;\n      if (length < this.buffer.length) {\n        this.ensure(length);\n        this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);\n        this.bufferOffset += length;\n        return this.pos += length;\n      } else {\n        buf = new Buffer(length);\n        buf.fill(val);\n        return this.writeBuffer(buf);\n      }\n    };\n\n    EncodeStream.prototype.end = function() {\n      this.flush();\n      return this.push(null);\n    };\n\n    return EncodeStream;\n\n  })(stream.Readable);\n\n  module.exports = EncodeStream;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var ArrayT, LazyArray, LazyArrayT, NumberT, inspect, utils,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  ArrayT = require('./Array');\n\n  NumberT = require('./Number').Number;\n\n  utils = require('./utils');\n\n  inspect = require('util').inspect;\n\n  LazyArrayT = (function(_super) {\n    __extends(LazyArrayT, _super);\n\n    function LazyArrayT() {\n      return LazyArrayT.__super__.constructor.apply(this, arguments);\n    }\n\n    LazyArrayT.prototype.decode = function(stream, parent) {\n      var length, pos, res;\n      pos = stream.pos;\n      length = utils.resolveLength(this.length, stream, parent);\n      if (this.length instanceof NumberT) {\n        parent = {\n          parent: parent,\n          _startOffset: pos,\n          _currentOffset: 0,\n          _length: length\n        };\n      }\n      res = new LazyArray(this.type, length, stream, parent);\n      stream.pos += length * this.type.size(null, parent);\n      return res;\n    };\n\n    LazyArrayT.prototype.size = function(val, ctx) {\n      if (val instanceof LazyArray) {\n        val = val.toArray();\n      }\n      return LazyArrayT.__super__.size.call(this, val, ctx);\n    };\n\n    LazyArrayT.prototype.encode = function(stream, val, ctx) {\n      if (val instanceof LazyArray) {\n        val = val.toArray();\n      }\n      return LazyArrayT.__super__.encode.call(this, stream, val, ctx);\n    };\n\n    return LazyArrayT;\n\n  })(ArrayT);\n\n  LazyArray = (function() {\n    function LazyArray(type, length, stream, ctx) {\n      this.type = type;\n      this.length = length;\n      this.stream = stream;\n      this.ctx = ctx;\n      this.base = this.stream.pos;\n      this.items = [];\n    }\n\n    LazyArray.prototype.get = function(index) {\n      var pos;\n      if (index < 0 || index >= this.length) {\n        return void 0;\n      }\n      if (this.items[index] == null) {\n        pos = this.stream.pos;\n        this.stream.pos = this.base + this.type.size(null, this.ctx) * index;\n        this.items[index] = this.type.decode(this.stream, this.ctx);\n        this.stream.pos = pos;\n      }\n      return this.items[index];\n    };\n\n    LazyArray.prototype.toArray = function() {\n      var i, _i, _ref, _results;\n      _results = [];\n      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {\n        _results.push(this.get(i));\n      }\n      return _results;\n    };\n\n    LazyArray.prototype.inspect = function() {\n      return inspect(this.toArray());\n    };\n\n    return LazyArray;\n\n  })();\n\n  module.exports = LazyArrayT;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Bitfield;\n\n  Bitfield = (function() {\n    function Bitfield(type, flags) {\n      this.type = type;\n      this.flags = flags != null ? flags : [];\n    }\n\n    Bitfield.prototype.decode = function(stream) {\n      var flag, i, res, val, _i, _len, _ref;\n      val = this.type.decode(stream);\n      res = {};\n      _ref = this.flags;\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        flag = _ref[i];\n        if (flag != null) {\n          res[flag] = !!(val & (1 << i));\n        }\n      }\n      return res;\n    };\n\n    Bitfield.prototype.size = function() {\n      return this.type.size();\n    };\n\n    Bitfield.prototype.encode = function(stream, keys) {\n      var flag, i, val, _i, _len, _ref;\n      val = 0;\n      _ref = this.flags;\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        flag = _ref[i];\n        if (flag != null) {\n          if (keys[flag]) {\n            val |= 1 << i;\n          }\n        }\n      }\n      return this.type.encode(stream, val);\n    };\n\n    return Bitfield;\n\n  })();\n\n  module.exports = Bitfield;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var BooleanT;\n\n  BooleanT = (function() {\n    function BooleanT(type) {\n      this.type = type;\n    }\n\n    BooleanT.prototype.decode = function(stream, parent) {\n      return !!this.type.decode(stream, parent);\n    };\n\n    BooleanT.prototype.size = function(val, parent) {\n      return this.type.size(val, parent);\n    };\n\n    BooleanT.prototype.encode = function(stream, val, parent) {\n      return this.type.encode(stream, +val, parent);\n    };\n\n    return BooleanT;\n\n  })();\n\n  module.exports = BooleanT;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var BufferT, NumberT, utils;\n\n  utils = require('./utils');\n\n  NumberT = require('./Number').Number;\n\n  BufferT = (function() {\n    function BufferT(length) {\n      this.length = length;\n    }\n\n    BufferT.prototype.decode = function(stream, parent) {\n      var length;\n      length = utils.resolveLength(this.length, stream, parent);\n      return stream.readBuffer(length);\n    };\n\n    BufferT.prototype.size = function(val, parent) {\n      if (!val) {\n        return utils.resolveLength(this.length, null, parent);\n      }\n      return val.length;\n    };\n\n    BufferT.prototype.encode = function(stream, buf, parent) {\n      if (this.length instanceof NumberT) {\n        this.length.encode(stream, buf.length);\n      }\n      return stream.writeBuffer(buf);\n    };\n\n    return BufferT;\n\n  })();\n\n  module.exports = BufferT;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Enum;\n\n  Enum = (function() {\n    function Enum(type, options) {\n      this.type = type;\n      this.options = options != null ? options : [];\n    }\n\n    Enum.prototype.decode = function(stream) {\n      var index;\n      index = this.type.decode(stream);\n      return this.options[index] || index;\n    };\n\n    Enum.prototype.size = function() {\n      return this.type.size();\n    };\n\n    Enum.prototype.encode = function(stream, val) {\n      var index;\n      index = this.options.indexOf(val);\n      if (index === -1) {\n        throw new Error(\"Unknown option in enum: \" + val);\n      }\n      return this.type.encode(stream, index);\n    };\n\n    return Enum;\n\n  })();\n\n  module.exports = Enum;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Optional;\n\n  Optional = (function() {\n    function Optional(type, condition) {\n      this.type = type;\n      this.condition = condition != null ? condition : true;\n    }\n\n    Optional.prototype.decode = function(stream, parent) {\n      var condition;\n      condition = this.condition;\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n      if (condition) {\n        return this.type.decode(stream, parent);\n      }\n    };\n\n    Optional.prototype.size = function(val, parent) {\n      var condition;\n      condition = this.condition;\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n      if (condition) {\n        return this.type.size(val, parent);\n      } else {\n        return 0;\n      }\n    };\n\n    Optional.prototype.encode = function(stream, val, parent) {\n      var condition;\n      condition = this.condition;\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n      if (condition) {\n        return this.type.encode(stream, val, parent);\n      }\n    };\n\n    return Optional;\n\n  })();\n\n  module.exports = Optional;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Reserved, utils;\n\n  utils = require('./utils');\n\n  Reserved = (function() {\n    function Reserved(type, count) {\n      this.type = type;\n      this.count = count != null ? count : 1;\n    }\n\n    Reserved.prototype.decode = function(stream, parent) {\n      stream.pos += this.size(null, parent);\n      return void 0;\n    };\n\n    Reserved.prototype.size = function(data, parent) {\n      var count;\n      count = utils.resolveLength(this.count, null, parent);\n      return this.type.size() * count;\n    };\n\n    Reserved.prototype.encode = function(stream, val, parent) {\n      return stream.fill(0, this.size(val, parent));\n    };\n\n    return Reserved;\n\n  })();\n\n  module.exports = Reserved;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var NumberT, StringT, utils;\n\n  NumberT = require('./Number').Number;\n\n  utils = require('./utils');\n\n  StringT = (function() {\n    function StringT(length, encoding) {\n      this.length = length;\n      this.encoding = encoding != null ? encoding : 'ascii';\n    }\n\n    StringT.prototype.decode = function(stream, parent) {\n      var buffer, encoding, length, pos, string;\n      length = (function() {\n        if (this.length != null) {\n          return utils.resolveLength(this.length, stream, parent);\n        } else {\n          buffer = stream.buffer, length = stream.length, pos = stream.pos;\n          while (pos < length && buffer[pos] !== 0x00) {\n            ++pos;\n          }\n          return pos - stream.pos;\n        }\n      }).call(this);\n      encoding = this.encoding;\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent, parent) || 'ascii';\n      }\n      string = stream.readString(length, encoding);\n      if ((this.length == null) && stream.pos < stream.length) {\n        stream.pos++;\n      }\n      return string;\n    };\n\n    StringT.prototype.size = function(val, parent) {\n      var encoding, size;\n      if (!val) {\n        return utils.resolveLength(this.length, null, parent);\n      }\n      encoding = this.encoding;\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';\n      }\n      if (encoding === 'utf16be') {\n        encoding = 'utf16le';\n      }\n      size = Buffer.byteLength(val, encoding);\n      if (this.length instanceof NumberT) {\n        size += this.length.size();\n      }\n      if (this.length == null) {\n        size++;\n      }\n      return size;\n    };\n\n    StringT.prototype.encode = function(stream, val, parent) {\n      var encoding;\n      encoding = this.encoding;\n      if (typeof encoding === 'function') {\n        encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || 'ascii';\n      }\n      if (this.length instanceof NumberT) {\n        this.length.encode(stream, Buffer.byteLength(val, encoding));\n      }\n      stream.writeString(val, encoding);\n      if (this.length == null) {\n        return stream.writeUInt8(0x00);\n      }\n    };\n\n    return StringT;\n\n  })();\n\n  module.exports = StringT;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Struct, VersionedStruct,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  Struct = require('./Struct');\n\n  VersionedStruct = (function(_super) {\n    __extends(VersionedStruct, _super);\n\n    function VersionedStruct(type, versions) {\n      this.type = type;\n      this.versions = versions != null ? versions : {};\n      if (typeof this.type === 'string') {\n        this.versionGetter = new Function('parent', \"return parent.\" + this.type);\n        this.versionSetter = new Function('parent', 'version', \"return parent.\" + this.type + \" = version\");\n      }\n    }\n\n    VersionedStruct.prototype.decode = function(stream, parent, length) {\n      var fields, res, _ref;\n      if (length == null) {\n        length = 0;\n      }\n      res = this._setup(stream, parent, length);\n      if (typeof this.type === 'string') {\n        res.version = this.versionGetter(parent);\n      } else {\n        res.version = this.type.decode(stream);\n      }\n      if (this.versions.header) {\n        this._parseFields(stream, res, this.versions.header);\n      }\n      fields = this.versions[res.version];\n      if (fields == null) {\n        throw new Error(\"Unknown version \" + res.version);\n      }\n      if (fields instanceof VersionedStruct) {\n        return fields.decode(stream, parent);\n      }\n      this._parseFields(stream, res, fields);\n      if ((_ref = this.process) != null) {\n        _ref.call(res, stream);\n      }\n      return res;\n    };\n\n    VersionedStruct.prototype.size = function(val, parent, includePointers) {\n      var ctx, fields, key, size, type, _ref;\n      if (includePointers == null) {\n        includePointers = true;\n      }\n      if (!val) {\n        throw new Error('Not a fixed size');\n      }\n      ctx = {\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      size = 0;\n      if (typeof this.type !== 'string') {\n        size += this.type.size(val.version, ctx);\n      }\n      if (this.versions.header) {\n        _ref = this.versions.header;\n        for (key in _ref) {\n          type = _ref[key];\n          if (type.size != null) {\n            size += type.size(val[key], ctx);\n          }\n        }\n      }\n      fields = this.versions[val.version];\n      if (fields == null) {\n        throw new Error(\"Unknown version \" + val.version);\n      }\n      for (key in fields) {\n        type = fields[key];\n        if (type.size != null) {\n          size += type.size(val[key], ctx);\n        }\n      }\n      if (includePointers) {\n        size += ctx.pointerSize;\n      }\n      return size;\n    };\n\n    VersionedStruct.prototype.encode = function(stream, val, parent) {\n      var ctx, fields, i, key, ptr, type, _ref, _ref1;\n      if ((_ref = this.preEncode) != null) {\n        _ref.call(val, stream);\n      }\n      ctx = {\n        pointers: [],\n        startOffset: stream.pos,\n        parent: parent,\n        val: val,\n        pointerSize: 0\n      };\n      ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n      if (typeof this.type !== 'string') {\n        this.type.encode(stream, val.version);\n      }\n      if (this.versions.header) {\n        _ref1 = this.versions.header;\n        for (key in _ref1) {\n          type = _ref1[key];\n          if (type.encode != null) {\n            type.encode(stream, val[key], ctx);\n          }\n        }\n      }\n      fields = this.versions[val.version];\n      for (key in fields) {\n        type = fields[key];\n        if (type.encode != null) {\n          type.encode(stream, val[key], ctx);\n        }\n      }\n      i = 0;\n      while (i < ctx.pointers.length) {\n        ptr = ctx.pointers[i++];\n        ptr.type.encode(stream, ptr.val, ptr.parent);\n      }\n    };\n\n    return VersionedStruct;\n\n  })(Struct);\n\n  module.exports = VersionedStruct;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var Pointer, VoidPointer, utils;\n\n  utils = require('./utils');\n\n  Pointer = (function() {\n    function Pointer(offsetType, type, options) {\n      var _base, _base1, _base2, _base3;\n      this.offsetType = offsetType;\n      this.type = type;\n      this.options = options != null ? options : {};\n      if (this.type === 'void') {\n        this.type = null;\n      }\n      if ((_base = this.options).type == null) {\n        _base.type = 'local';\n      }\n      if ((_base1 = this.options).allowNull == null) {\n        _base1.allowNull = true;\n      }\n      if ((_base2 = this.options).nullValue == null) {\n        _base2.nullValue = 0;\n      }\n      if ((_base3 = this.options).lazy == null) {\n        _base3.lazy = false;\n      }\n      if (this.options.relativeTo) {\n        this.relativeToGetter = new Function('ctx', \"return ctx.\" + this.options.relativeTo);\n      }\n    }\n\n    Pointer.prototype.decode = function(stream, ctx) {\n      var c, decodeValue, offset, ptr, relative, val;\n      offset = this.offsetType.decode(stream, ctx);\n      if (offset === this.options.nullValue && this.options.allowNull) {\n        return null;\n      }\n      relative = (function() {\n        switch (this.options.type) {\n          case 'local':\n            return ctx._startOffset;\n          case 'immediate':\n            return stream.pos - this.offsetType.size();\n          case 'parent':\n            return ctx.parent._startOffset;\n          default:\n            c = ctx;\n            while (c.parent) {\n              c = c.parent;\n            }\n            return c._startOffset || 0;\n        }\n      }).call(this);\n      if (this.options.relativeTo) {\n        relative += this.relativeToGetter(ctx);\n      }\n      ptr = offset + relative;\n      if (this.type != null) {\n        val = null;\n        decodeValue = (function(_this) {\n          return function() {\n            var pos;\n            if (val != null) {\n              return val;\n            }\n            pos = stream.pos;\n            stream.pos = ptr;\n            val = _this.type.decode(stream, ctx);\n            stream.pos = pos;\n            return val;\n          };\n        })(this);\n        if (this.options.lazy) {\n          return new utils.PropertyDescriptor({\n            get: decodeValue\n          });\n        }\n        return decodeValue();\n      } else {\n        return ptr;\n      }\n    };\n\n    Pointer.prototype.size = function(val, ctx) {\n      var parent, type;\n      parent = ctx;\n      switch (this.options.type) {\n        case 'local':\n        case 'immediate':\n          break;\n        case 'parent':\n          ctx = ctx.parent;\n          break;\n        default:\n          while (ctx.parent) {\n            ctx = ctx.parent;\n          }\n      }\n      type = this.type;\n      if (type == null) {\n        if (!(val instanceof VoidPointer)) {\n          throw new Error(\"Must be a VoidPointer\");\n        }\n        type = val.type;\n        val = val.value;\n      }\n      if (val && ctx) {\n        ctx.pointerSize += type.size(val, parent);\n      }\n      return this.offsetType.size();\n    };\n\n    Pointer.prototype.encode = function(stream, val, ctx) {\n      var parent, relative, type;\n      parent = ctx;\n      if (val == null) {\n        this.offsetType.encode(stream, this.options.nullValue);\n        return;\n      }\n      switch (this.options.type) {\n        case 'local':\n          relative = ctx.startOffset;\n          break;\n        case 'immediate':\n          relative = stream.pos + this.offsetType.size(val, parent);\n          break;\n        case 'parent':\n          ctx = ctx.parent;\n          relative = ctx.startOffset;\n          break;\n        default:\n          relative = 0;\n          while (ctx.parent) {\n            ctx = ctx.parent;\n          }\n      }\n      if (this.options.relativeTo) {\n        relative += this.relativeToGetter(parent.val);\n      }\n      this.offsetType.encode(stream, ctx.pointerOffset - relative);\n      type = this.type;\n      if (type == null) {\n        if (!(val instanceof VoidPointer)) {\n          throw new Error(\"Must be a VoidPointer\");\n        }\n        type = val.type;\n        val = val.value;\n      }\n      ctx.pointers.push({\n        type: type,\n        val: val,\n        parent: parent\n      });\n      return ctx.pointerOffset += type.size(val, parent);\n    };\n\n    return Pointer;\n\n  })();\n\n  VoidPointer = (function() {\n    function VoidPointer(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    return VoidPointer;\n\n  })();\n\n  exports.Pointer = Pointer;\n\n  exports.VoidPointer = VoidPointer;\n\n}).call(this);\n","module.exports = { \"default\": require(\"core-js/library/fn/object/get-own-property-descriptor\"), __esModule: true };","require('../../modules/es6.object.get-own-property-descriptor');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","module.exports = function () { /* empty */ };\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/freeze\"), __esModule: true };","require('../../modules/es6.object.freeze');\nmodule.exports = require('../../modules/_core').Object.freeze;\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toObject = require('./_to-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $GOPS = require('./_object-gops');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","module.exports = { \"default\": require(\"core-js/library/fn/map\"), __esModule: true };","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.map');\nrequire('../modules/es7.map.to-json');\nrequire('../modules/es7.map.of');\nrequire('../modules/es7.map.from');\nmodule.exports = require('../modules/_core').Map;\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-properties\"), __esModule: true };","require('../../modules/es6.object.define-properties');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperties(T, D) {\n  return $Object.defineProperties(T, D);\n};\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n","module.exports = { \"default\": require(\"core-js/library/fn/string/from-code-point\"), __esModule: true };","require('../../modules/es6.string.from-code-point');\nmodule.exports = require('../../modules/_core').String.fromCodePoint;\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","module.exports = { \"default\": require(\"core-js/library/fn/array/from\"), __esModule: true };","require('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/set\"), __esModule: true };","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.set');\nrequire('../modules/es7.set.to-json');\nrequire('../modules/es7.set.of');\nrequire('../modules/es7.set.from');\nmodule.exports = require('../modules/_core').Set;\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\nrequire('./_set-collection-of')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\nrequire('./_set-collection-from')('Set');\n","import fs from 'fs';\nimport UnicodeTrie from 'unicode-trie';\n\nvar categories=[\"Cc\",\"Zs\",\"Po\",\"Sc\",\"Ps\",\"Pe\",\"Sm\",\"Pd\",\"Nd\",\"Lu\",\"Sk\",\"Pc\",\"Ll\",\"So\",\"Lo\",\"Pi\",\"Cf\",\"No\",\"Pf\",\"Lt\",\"Lm\",\"Mn\",\"Me\",\"Mc\",\"Nl\",\"Zl\",\"Zp\",\"Cs\",\"Co\"];var combiningClasses=[\"Not_Reordered\",\"Above\",\"Above_Right\",\"Below\",\"Attached_Above_Right\",\"Attached_Below\",\"Overlay\",\"Iota_Subscript\",\"Double_Below\",\"Double_Above\",\"Below_Right\",\"Above_Left\",\"CCC10\",\"CCC11\",\"CCC12\",\"CCC13\",\"CCC14\",\"CCC15\",\"CCC16\",\"CCC17\",\"CCC18\",\"CCC19\",\"CCC20\",\"CCC21\",\"CCC22\",\"CCC23\",\"CCC24\",\"CCC25\",\"CCC30\",\"CCC31\",\"CCC32\",\"CCC27\",\"CCC28\",\"CCC29\",\"CCC33\",\"CCC34\",\"CCC35\",\"CCC36\",\"Nukta\",\"Virama\",\"CCC84\",\"CCC91\",\"CCC103\",\"CCC107\",\"CCC118\",\"CCC122\",\"CCC129\",\"CCC130\",\"CCC132\",\"Attached_Above\",\"Below_Left\",\"Left\",\"Kana_Voicing\",\"CCC26\",\"Right\"];var scripts=[\"Common\",\"Latin\",\"Bopomofo\",\"Inherited\",\"Greek\",\"Coptic\",\"Cyrillic\",\"Armenian\",\"Hebrew\",\"Arabic\",\"Syriac\",\"Thaana\",\"Nko\",\"Samaritan\",\"Mandaic\",\"Devanagari\",\"Bengali\",\"Gurmukhi\",\"Gujarati\",\"Oriya\",\"Tamil\",\"Telugu\",\"Kannada\",\"Malayalam\",\"Sinhala\",\"Thai\",\"Lao\",\"Tibetan\",\"Myanmar\",\"Georgian\",\"Hangul\",\"Ethiopic\",\"Cherokee\",\"Canadian_Aboriginal\",\"Ogham\",\"Runic\",\"Tagalog\",\"Hanunoo\",\"Buhid\",\"Tagbanwa\",\"Khmer\",\"Mongolian\",\"Limbu\",\"Tai_Le\",\"New_Tai_Lue\",\"Buginese\",\"Tai_Tham\",\"Balinese\",\"Sundanese\",\"Batak\",\"Lepcha\",\"Ol_Chiki\",\"Braille\",\"Glagolitic\",\"Tifinagh\",\"Han\",\"Hiragana\",\"Katakana\",\"Yi\",\"Lisu\",\"Vai\",\"Bamum\",\"Syloti_Nagri\",\"Phags_Pa\",\"Saurashtra\",\"Kayah_Li\",\"Rejang\",\"Javanese\",\"Cham\",\"Tai_Viet\",\"Meetei_Mayek\",\"null\",\"Linear_B\",\"Lycian\",\"Carian\",\"Old_Italic\",\"Gothic\",\"Old_Permic\",\"Ugaritic\",\"Old_Persian\",\"Deseret\",\"Shavian\",\"Osmanya\",\"Elbasan\",\"Caucasian_Albanian\",\"Linear_A\",\"Cypriot\",\"Imperial_Aramaic\",\"Palmyrene\",\"Nabataean\",\"Hatran\",\"Phoenician\",\"Lydian\",\"Meroitic_Hieroglyphs\",\"Meroitic_Cursive\",\"Kharoshthi\",\"Old_South_Arabian\",\"Old_North_Arabian\",\"Manichaean\",\"Avestan\",\"Inscriptional_Parthian\",\"Inscriptional_Pahlavi\",\"Psalter_Pahlavi\",\"Old_Turkic\",\"Old_Hungarian\",\"Brahmi\",\"Kaithi\",\"Sora_Sompeng\",\"Chakma\",\"Mahajani\",\"Sharada\",\"Khojki\",\"Multani\",\"Khudawadi\",\"Grantha\",\"Tirhuta\",\"Siddham\",\"Modi\",\"Takri\",\"Ahom\",\"Warang_Citi\",\"Pau_Cin_Hau\",\"Cuneiform\",\"Egyptian_Hieroglyphs\",\"Anatolian_Hieroglyphs\",\"Mro\",\"Bassa_Vah\",\"Pahawh_Hmong\",\"Miao\",\"Duployan\",\"SignWriting\",\"Mende_Kikakui\"];var eaw=[\"N\",\"Na\",\"A\",\"W\",\"H\",\"F\"];var data = {categories:categories,combiningClasses:combiningClasses,scripts:scripts,eaw:eaw};\n\nvar log2 = Math.log2 || (n => Math.log(n) / Math.LN2);\n\nvar bits = n => log2(n) + 1 | 0;\n\nvar buildUnicodeProperties = (data, trie) => {\n  // compute the number of bits stored for each field\n  var CATEGORY_BITS = bits(data.categories.length - 1);\n  var COMBINING_BITS = bits(data.combiningClasses.length - 1);\n  var SCRIPT_BITS = bits(data.scripts.length - 1);\n  var EAW_BITS = bits(data.eaw.length - 1);\n  var NUMBER_BITS = 10; // compute shift and mask values for each field\n\n  var CATEGORY_SHIFT = COMBINING_BITS + SCRIPT_BITS + EAW_BITS + NUMBER_BITS;\n  var COMBINING_SHIFT = SCRIPT_BITS + EAW_BITS + NUMBER_BITS;\n  var SCRIPT_SHIFT = EAW_BITS + NUMBER_BITS;\n  var EAW_SHIFT = NUMBER_BITS;\n  var CATEGORY_MASK = (1 << CATEGORY_BITS) - 1;\n  var COMBINING_MASK = (1 << COMBINING_BITS) - 1;\n  var SCRIPT_MASK = (1 << SCRIPT_BITS) - 1;\n  var EAW_MASK = (1 << EAW_BITS) - 1;\n  var NUMBER_MASK = (1 << NUMBER_BITS) - 1;\n\n  var getCategory = codePoint => {\n    var val = trie.get(codePoint);\n    return data.categories[val >> CATEGORY_SHIFT & CATEGORY_MASK];\n  };\n\n  var getCombiningClass = codePoint => {\n    var val = trie.get(codePoint);\n    return data.combiningClasses[val >> COMBINING_SHIFT & COMBINING_MASK];\n  };\n\n  var getScript = codePoint => {\n    var val = trie.get(codePoint);\n    return data.scripts[val >> SCRIPT_SHIFT & SCRIPT_MASK];\n  };\n\n  var getEastAsianWidth = codePoint => {\n    var val = trie.get(codePoint);\n    return data.eaw[val >> EAW_SHIFT & EAW_MASK];\n  };\n\n  var getNumericValue = codePoint => {\n    var val = trie.get(codePoint);\n    var num = val & NUMBER_MASK;\n\n    if (num === 0) {\n      return null;\n    } else if (num <= 50) {\n      return num - 1;\n    } else if (num < 0x1e0) {\n      var numerator = (num >> 4) - 12;\n      var denominator = (num & 0xf) + 1;\n      return numerator / denominator;\n    } else if (num < 0x300) {\n      val = (num >> 5) - 14;\n      var exp = (num & 0x1f) + 2;\n\n      while (exp > 0) {\n        val *= 10;\n        exp--;\n      }\n\n      return val;\n    } else {\n      val = (num >> 2) - 0xbf;\n\n      var _exp = (num & 3) + 1;\n\n      while (_exp > 0) {\n        val *= 60;\n        _exp--;\n      }\n\n      return val;\n    }\n  };\n\n  var isAlphabetic = codePoint => {\n    var category = getCategory(codePoint);\n    return category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Nl';\n  };\n\n  var isDigit = codePoint => getCategory(codePoint) === 'Nd';\n\n  var isPunctuation = codePoint => {\n    var category = getCategory(codePoint);\n    return category === 'Pc' || category === 'Pd' || category === 'Pe' || category === 'Pf' || category === 'Pi' || category === 'Po' || category === 'Ps';\n  };\n\n  var isLowerCase = codePoint => {\n    return getCategory(codePoint) === 'Ll';\n  };\n\n  var isUpperCase = codePoint => getCategory(codePoint) === 'Lu';\n\n  var isTitleCase = codePoint => getCategory(codePoint) === 'Lt';\n\n  var isWhiteSpace = codePoint => {\n    var category = getCategory(codePoint);\n    return category === 'Zs' || category === 'Zl' || category === 'Zp';\n  };\n\n  var isBaseForm = codePoint => {\n    var category = getCategory(codePoint);\n    return category === 'Nd' || category === 'No' || category === 'Nl' || category === 'Lu' || category === 'Ll' || category === 'Lt' || category === 'Lm' || category === 'Lo' || category === 'Me' || category === 'Mc';\n  };\n\n  var isMark = codePoint => {\n    var category = getCategory(codePoint);\n    return category === 'Mn' || category === 'Me' || category === 'Mc';\n  };\n\n  return {\n    getCategory,\n    getCombiningClass,\n    getScript,\n    getEastAsianWidth,\n    getNumericValue,\n    isAlphabetic,\n    isDigit,\n    isPunctuation,\n    isLowerCase,\n    isUpperCase,\n    isTitleCase,\n    isWhiteSpace,\n    isBaseForm,\n    isMark\n  };\n};\n\nvar trie = new UnicodeTrie(fs.readFileSync(__dirname + '/data.trie'));\nvar unicodeProperties = buildUnicodeProperties(data, trie);\n\nexport default unicodeProperties;\n//# sourceMappingURL=unicode-properties.es.js.map\n","'use strict';\n\nvar INITIAL_STATE = 1;\nvar FAIL_STATE = 0;\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\n\nclass StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n\n\n  match(str) {\n    var self = this;\n    return {\n      *[Symbol.iterator]() {\n        var state = INITIAL_STATE;\n        var startRun = null;\n        var lastAccepting = null;\n        var lastState = null;\n\n        for (var p = 0; p < str.length; p++) {\n          var c = str[p];\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            } // reset the state as if we started over from the initial state\n\n\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          } // start a run if not in the failure state\n\n\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          } // if accepting, mark the potential match end\n\n\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          } // reset the state to the initial state if we get into the failure state\n\n\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        } // yield the last match if any\n\n\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n\n    };\n  }\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n\n\n  apply(str, actions) {\n    for (var [start, end, tags] of this.match(str)) {\n      for (var tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = StateMachine;\n//# sourceMappingURL=index.js.map\n","module.exports = { \"default\": require(\"core-js/library/fn/number/epsilon\"), __esModule: true };","require('../../modules/es6.number.epsilon');\nmodule.exports = Math.pow(2, -52);\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","var clone = (function() {\n'use strict';\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\nfunction clone(parent, circular, depth, prototype) {\n  var filter;\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    filter = circular.filter;\n    circular = circular.circular\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n};\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n};\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n};\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n};\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n};\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","module.exports = require('./dec/decode').BrotliDecompressBuffer;\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nvar BrotliInput = require('./streams').BrotliInput;\nvar BrotliOutput = require('./streams').BrotliOutput;\nvar BrotliBitReader = require('./bit_reader');\nvar BrotliDictionary = require('./dictionary');\nvar HuffmanCode = require('./huffman').HuffmanCode;\nvar BrotliBuildHuffmanTable = require('./huffman').BrotliBuildHuffmanTable;\nvar Context = require('./context');\nvar Prefix = require('./prefix');\nvar Transform = require('./transform');\n\nvar kDefaultCodeLength = 8;\nvar kCodeLengthRepeatCode = 16;\nvar kNumLiteralCodes = 256;\nvar kNumInsertAndCopyCodes = 704;\nvar kNumBlockLengthCodes = 26;\nvar kLiteralContextBits = 6;\nvar kDistanceContextBits = 2;\n\nvar HUFFMAN_TABLE_BITS = 8;\nvar HUFFMAN_TABLE_MASK = 0xff;\n/* Maximum possible Huffman table size for an alphabet size of 704, max code\n * length 15 and root table bits 8. */\nvar HUFFMAN_MAX_TABLE_SIZE = 1080;\n\nvar CODE_LENGTH_CODES = 18;\nvar kCodeLengthCodeOrder = new Uint8Array([\n  1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n]);\n\nvar NUM_DISTANCE_SHORT_CODES = 16;\nvar kDistanceShortCodeIndexOffset = new Uint8Array([\n  3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2\n]);\n\nvar kDistanceShortCodeValueOffset = new Int8Array([\n  0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3\n]);\n\nvar kMaxHuffmanTableSize = new Uint16Array([\n  256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822,\n  854, 886, 920, 952, 984, 1016, 1048, 1080\n]);\n\nfunction DecodeWindowBits(br) {\n  var n;\n  if (br.readBits(1) === 0) {\n    return 16;\n  }\n  \n  n = br.readBits(3);\n  if (n > 0) {\n    return 17 + n;\n  }\n  \n  n = br.readBits(3);\n  if (n > 0) {\n    return 8 + n;\n  }\n  \n  return 17;\n}\n\n/* Decodes a number in the range [0..255], by reading 1 - 11 bits. */\nfunction DecodeVarLenUint8(br) {\n  if (br.readBits(1)) {\n    var nbits = br.readBits(3);\n    if (nbits === 0) {\n      return 1;\n    } else {\n      return br.readBits(nbits) + (1 << nbits);\n    }\n  }\n  return 0;\n}\n\nfunction MetaBlockLength() {\n  this.meta_block_length = 0;\n  this.input_end = 0;\n  this.is_uncompressed = 0;\n  this.is_metadata = false;\n}\n\nfunction DecodeMetaBlockLength(br) {\n  var out = new MetaBlockLength;  \n  var size_nibbles;\n  var size_bytes;\n  var i;\n  \n  out.input_end = br.readBits(1);\n  if (out.input_end && br.readBits(1)) {\n    return out;\n  }\n  \n  size_nibbles = br.readBits(2) + 4;\n  if (size_nibbles === 7) {\n    out.is_metadata = true;\n    \n    if (br.readBits(1) !== 0)\n      throw new Error('Invalid reserved bit');\n    \n    size_bytes = br.readBits(2);\n    if (size_bytes === 0)\n      return out;\n    \n    for (i = 0; i < size_bytes; i++) {\n      var next_byte = br.readBits(8);\n      if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0)\n        throw new Error('Invalid size byte');\n      \n      out.meta_block_length |= next_byte << (i * 8);\n    }\n  } else {\n    for (i = 0; i < size_nibbles; ++i) {\n      var next_nibble = br.readBits(4);\n      if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)\n        throw new Error('Invalid size nibble');\n      \n      out.meta_block_length |= next_nibble << (i * 4);\n    }\n  }\n  \n  ++out.meta_block_length;\n  \n  if (!out.input_end && !out.is_metadata) {\n    out.is_uncompressed = br.readBits(1);\n  }\n  \n  return out;\n}\n\n/* Decodes the next Huffman code from bit-stream. */\nfunction ReadSymbol(table, index, br) {\n  var start_index = index;\n  \n  var nbits;\n  br.fillBitWindow();\n  index += (br.val_ >>> br.bit_pos_) & HUFFMAN_TABLE_MASK;\n  nbits = table[index].bits - HUFFMAN_TABLE_BITS;\n  if (nbits > 0) {\n    br.bit_pos_ += HUFFMAN_TABLE_BITS;\n    index += table[index].value;\n    index += (br.val_ >>> br.bit_pos_) & ((1 << nbits) - 1);\n  }\n  br.bit_pos_ += table[index].bits;\n  return table[index].value;\n}\n\nfunction ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {\n  var symbol = 0;\n  var prev_code_len = kDefaultCodeLength;\n  var repeat = 0;\n  var repeat_code_len = 0;\n  var space = 32768;\n  \n  var table = [];\n  for (var i = 0; i < 32; i++)\n    table.push(new HuffmanCode(0, 0));\n  \n  BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);\n\n  while (symbol < num_symbols && space > 0) {\n    var p = 0;\n    var code_len;\n    \n    br.readMoreInput();\n    br.fillBitWindow();\n    p += (br.val_ >>> br.bit_pos_) & 31;\n    br.bit_pos_ += table[p].bits;\n    code_len = table[p].value & 0xff;\n    if (code_len < kCodeLengthRepeatCode) {\n      repeat = 0;\n      code_lengths[symbol++] = code_len;\n      if (code_len !== 0) {\n        prev_code_len = code_len;\n        space -= 32768 >> code_len;\n      }\n    } else {\n      var extra_bits = code_len - 14;\n      var old_repeat;\n      var repeat_delta;\n      var new_len = 0;\n      if (code_len === kCodeLengthRepeatCode) {\n        new_len = prev_code_len;\n      }\n      if (repeat_code_len !== new_len) {\n        repeat = 0;\n        repeat_code_len = new_len;\n      }\n      old_repeat = repeat;\n      if (repeat > 0) {\n        repeat -= 2;\n        repeat <<= extra_bits;\n      }\n      repeat += br.readBits(extra_bits) + 3;\n      repeat_delta = repeat - old_repeat;\n      if (symbol + repeat_delta > num_symbols) {\n        throw new Error('[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols');\n      }\n      \n      for (var x = 0; x < repeat_delta; x++)\n        code_lengths[symbol + x] = repeat_code_len;\n      \n      symbol += repeat_delta;\n      \n      if (repeat_code_len !== 0) {\n        space -= repeat_delta << (15 - repeat_code_len);\n      }\n    }\n  }\n  if (space !== 0) {\n    throw new Error(\"[ReadHuffmanCodeLengths] space = \" + space);\n  }\n  \n  for (; symbol < num_symbols; symbol++)\n    code_lengths[symbol] = 0;\n}\n\nfunction ReadHuffmanCode(alphabet_size, tables, table, br) {\n  var table_size = 0;\n  var simple_code_or_skip;\n  var code_lengths = new Uint8Array(alphabet_size);\n  \n  br.readMoreInput();\n  \n  /* simple_code_or_skip is used as follows:\n     1 for simple code;\n     0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */\n  simple_code_or_skip = br.readBits(2);\n  if (simple_code_or_skip === 1) {\n    /* Read symbols, codes & code lengths directly. */\n    var i;\n    var max_bits_counter = alphabet_size - 1;\n    var max_bits = 0;\n    var symbols = new Int32Array(4);\n    var num_symbols = br.readBits(2) + 1;\n    while (max_bits_counter) {\n      max_bits_counter >>= 1;\n      ++max_bits;\n    }\n\n    for (i = 0; i < num_symbols; ++i) {\n      symbols[i] = br.readBits(max_bits) % alphabet_size;\n      code_lengths[symbols[i]] = 2;\n    }\n    code_lengths[symbols[0]] = 1;\n    switch (num_symbols) {\n      case 1:\n        break;\n      case 3:\n        if ((symbols[0] === symbols[1]) ||\n            (symbols[0] === symbols[2]) ||\n            (symbols[1] === symbols[2])) {\n          throw new Error('[ReadHuffmanCode] invalid symbols');\n        }\n        break;\n      case 2:\n        if (symbols[0] === symbols[1]) {\n          throw new Error('[ReadHuffmanCode] invalid symbols');\n        }\n        \n        code_lengths[symbols[1]] = 1;\n        break;\n      case 4:\n        if ((symbols[0] === symbols[1]) ||\n            (symbols[0] === symbols[2]) ||\n            (symbols[0] === symbols[3]) ||\n            (symbols[1] === symbols[2]) ||\n            (symbols[1] === symbols[3]) ||\n            (symbols[2] === symbols[3])) {\n          throw new Error('[ReadHuffmanCode] invalid symbols');\n        }\n        \n        if (br.readBits(1)) {\n          code_lengths[symbols[2]] = 3;\n          code_lengths[symbols[3]] = 3;\n        } else {\n          code_lengths[symbols[0]] = 2;\n        }\n        break;\n    }\n  } else {  /* Decode Huffman-coded code lengths. */\n    var i;\n    var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);\n    var space = 32;\n    var num_codes = 0;\n    /* Static Huffman code for the code length code lengths */\n    var huff = [\n      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), \n      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 1),\n      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), \n      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 5)\n    ];\n    for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {\n      var code_len_idx = kCodeLengthCodeOrder[i];\n      var p = 0;\n      var v;\n      br.fillBitWindow();\n      p += (br.val_ >>> br.bit_pos_) & 15;\n      br.bit_pos_ += huff[p].bits;\n      v = huff[p].value;\n      code_length_code_lengths[code_len_idx] = v;\n      if (v !== 0) {\n        space -= (32 >> v);\n        ++num_codes;\n      }\n    }\n    \n    if (!(num_codes === 1 || space === 0))\n      throw new Error('[ReadHuffmanCode] invalid num_codes or space');\n    \n    ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);\n  }\n  \n  table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);\n  \n  if (table_size === 0) {\n    throw new Error(\"[ReadHuffmanCode] BuildHuffmanTable failed: \");\n  }\n  \n  return table_size;\n}\n\nfunction ReadBlockLength(table, index, br) {\n  var code;\n  var nbits;\n  code = ReadSymbol(table, index, br);\n  nbits = Prefix.kBlockLengthPrefixCode[code].nbits;\n  return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);\n}\n\nfunction TranslateShortCodes(code, ringbuffer, index) {\n  var val;\n  if (code < NUM_DISTANCE_SHORT_CODES) {\n    index += kDistanceShortCodeIndexOffset[code];\n    index &= 3;\n    val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];\n  } else {\n    val = code - NUM_DISTANCE_SHORT_CODES + 1;\n  }\n  return val;\n}\n\nfunction MoveToFront(v, index) {\n  var value = v[index];\n  var i = index;\n  for (; i; --i) v[i] = v[i - 1];\n  v[0] = value;\n}\n\nfunction InverseMoveToFrontTransform(v, v_len) {\n  var mtf = new Uint8Array(256);\n  var i;\n  for (i = 0; i < 256; ++i) {\n    mtf[i] = i;\n  }\n  for (i = 0; i < v_len; ++i) {\n    var index = v[i];\n    v[i] = mtf[index];\n    if (index) MoveToFront(mtf, index);\n  }\n}\n\n/* Contains a collection of huffman trees with the same alphabet size. */\nfunction HuffmanTreeGroup(alphabet_size, num_htrees) {\n  this.alphabet_size = alphabet_size;\n  this.num_htrees = num_htrees;\n  this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[(alphabet_size + 31) >>> 5]);  \n  this.htrees = new Uint32Array(num_htrees);\n}\n\nHuffmanTreeGroup.prototype.decode = function(br) {\n  var i;\n  var table_size;\n  var next = 0;\n  for (i = 0; i < this.num_htrees; ++i) {\n    this.htrees[i] = next;\n    table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);\n    next += table_size;\n  }\n};\n\nfunction DecodeContextMap(context_map_size, br) {\n  var out = { num_htrees: null, context_map: null };\n  var use_rle_for_zeros;\n  var max_run_length_prefix = 0;\n  var table;\n  var i;\n  \n  br.readMoreInput();\n  var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;\n\n  var context_map = out.context_map = new Uint8Array(context_map_size);\n  if (num_htrees <= 1) {\n    return out;\n  }\n\n  use_rle_for_zeros = br.readBits(1);\n  if (use_rle_for_zeros) {\n    max_run_length_prefix = br.readBits(4) + 1;\n  }\n  \n  table = [];\n  for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {\n    table[i] = new HuffmanCode(0, 0);\n  }\n  \n  ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);\n  \n  for (i = 0; i < context_map_size;) {\n    var code;\n\n    br.readMoreInput();\n    code = ReadSymbol(table, 0, br);\n    if (code === 0) {\n      context_map[i] = 0;\n      ++i;\n    } else if (code <= max_run_length_prefix) {\n      var reps = 1 + (1 << code) + br.readBits(code);\n      while (--reps) {\n        if (i >= context_map_size) {\n          throw new Error(\"[DecodeContextMap] i >= context_map_size\");\n        }\n        context_map[i] = 0;\n        ++i;\n      }\n    } else {\n      context_map[i] = code - max_run_length_prefix;\n      ++i;\n    }\n  }\n  if (br.readBits(1)) {\n    InverseMoveToFrontTransform(context_map, context_map_size);\n  }\n  \n  return out;\n}\n\nfunction DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {\n  var ringbuffer = tree_type * 2;\n  var index = tree_type;\n  var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);\n  var block_type;\n  if (type_code === 0) {\n    block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];\n  } else if (type_code === 1) {\n    block_type = ringbuffers[ringbuffer + ((indexes[index] - 1) & 1)] + 1;\n  } else {\n    block_type = type_code - 2;\n  }\n  if (block_type >= max_block_type) {\n    block_type -= max_block_type;\n  }\n  block_types[tree_type] = block_type;\n  ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;\n  ++indexes[index];\n}\n\nfunction CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {\n  var rb_size = ringbuffer_mask + 1;\n  var rb_pos = pos & ringbuffer_mask;\n  var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;\n  var nbytes;\n\n  /* For short lengths copy byte-by-byte */\n  if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {\n    while (len-- > 0) {\n      br.readMoreInput();\n      ringbuffer[rb_pos++] = br.readBits(8);\n      if (rb_pos === rb_size) {\n        output.write(ringbuffer, rb_size);\n        rb_pos = 0;\n      }\n    }\n    return;\n  }\n\n  if (br.bit_end_pos_ < 32) {\n    throw new Error('[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32');\n  }\n\n  /* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */\n  while (br.bit_pos_ < 32) {\n    ringbuffer[rb_pos] = (br.val_ >>> br.bit_pos_);\n    br.bit_pos_ += 8;\n    ++rb_pos;\n    --len;\n  }\n\n  /* Copy remaining bytes from br.buf_ to ringbuffer. */\n  nbytes = (br.bit_end_pos_ - br.bit_pos_) >> 3;\n  if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {\n    var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;\n    for (var x = 0; x < tail; x++)\n      ringbuffer[rb_pos + x] = br.buf_[br_pos + x];\n    \n    nbytes -= tail;\n    rb_pos += tail;\n    len -= tail;\n    br_pos = 0;\n  }\n\n  for (var x = 0; x < nbytes; x++)\n    ringbuffer[rb_pos + x] = br.buf_[br_pos + x];\n  \n  rb_pos += nbytes;\n  len -= nbytes;\n\n  /* If we wrote past the logical end of the ringbuffer, copy the tail of the\n     ringbuffer to its beginning and flush the ringbuffer to the output. */\n  if (rb_pos >= rb_size) {\n    output.write(ringbuffer, rb_size);\n    rb_pos -= rb_size;    \n    for (var x = 0; x < rb_pos; x++)\n      ringbuffer[x] = ringbuffer[rb_size + x];\n  }\n\n  /* If we have more to copy than the remaining size of the ringbuffer, then we\n     first fill the ringbuffer from the input and then flush the ringbuffer to\n     the output */\n  while (rb_pos + len >= rb_size) {\n    nbytes = rb_size - rb_pos;\n    if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {\n      throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');\n    }\n    output.write(ringbuffer, rb_size);\n    len -= nbytes;\n    rb_pos = 0;\n  }\n\n  /* Copy straight from the input onto the ringbuffer. The ringbuffer will be\n     flushed to the output at a later time. */\n  if (br.input_.read(ringbuffer, rb_pos, len) < len) {\n    throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');\n  }\n\n  /* Restore the state of the bit reader. */\n  br.reset();\n}\n\n/* Advances the bit reader position to the next byte boundary and verifies\n   that any skipped bits are set to zero. */\nfunction JumpToByteBoundary(br) {\n  var new_bit_pos = (br.bit_pos_ + 7) & ~7;\n  var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);\n  return pad_bits == 0;\n}\n\nfunction BrotliDecompressedSize(buffer) {\n  var input = new BrotliInput(buffer);\n  var br = new BrotliBitReader(input);\n  DecodeWindowBits(br);\n  var out = DecodeMetaBlockLength(br);\n  return out.meta_block_length;\n}\n\nexports.BrotliDecompressedSize = BrotliDecompressedSize;\n\nfunction BrotliDecompressBuffer(buffer, output_size) {\n  var input = new BrotliInput(buffer);\n  \n  if (output_size == null) {\n    output_size = BrotliDecompressedSize(buffer);\n  }\n  \n  var output_buffer = new Uint8Array(output_size);\n  var output = new BrotliOutput(output_buffer);\n  \n  BrotliDecompress(input, output);\n  \n  if (output.pos < output.buffer.length) {\n    output.buffer = output.buffer.subarray(0, output.pos);\n  }\n  \n  return output.buffer;\n}\n\nexports.BrotliDecompressBuffer = BrotliDecompressBuffer;\n\nfunction BrotliDecompress(input, output) {\n  var i;\n  var pos = 0;\n  var input_end = 0;\n  var window_bits = 0;\n  var max_backward_distance;\n  var max_distance = 0;\n  var ringbuffer_size;\n  var ringbuffer_mask;\n  var ringbuffer;\n  var ringbuffer_end;\n  /* This ring buffer holds a few past copy distances that will be used by */\n  /* some special distance codes. */\n  var dist_rb = [ 16, 15, 11, 4 ];\n  var dist_rb_idx = 0;\n  /* The previous 2 bytes used for context. */\n  var prev_byte1 = 0;\n  var prev_byte2 = 0;\n  var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];\n  var block_type_trees;\n  var block_len_trees;\n  var br;\n\n  /* We need the slack region for the following reasons:\n       - always doing two 8-byte copies for fast backward copying\n       - transforms\n       - flushing the input ringbuffer when decoding uncompressed blocks */\n  var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;\n\n  br = new BrotliBitReader(input);\n\n  /* Decode window size. */\n  window_bits = DecodeWindowBits(br);\n  max_backward_distance = (1 << window_bits) - 16;\n\n  ringbuffer_size = 1 << window_bits;\n  ringbuffer_mask = ringbuffer_size - 1;\n  ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);\n  ringbuffer_end = ringbuffer_size;\n\n  block_type_trees = [];\n  block_len_trees = [];\n  for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {\n    block_type_trees[x] = new HuffmanCode(0, 0);\n    block_len_trees[x] = new HuffmanCode(0, 0);\n  }\n\n  while (!input_end) {\n    var meta_block_remaining_len = 0;\n    var is_uncompressed;\n    var block_length = [ 1 << 28, 1 << 28, 1 << 28 ];\n    var block_type = [ 0 ];\n    var num_block_types = [ 1, 1, 1 ];\n    var block_type_rb = [ 0, 1, 0, 1, 0, 1 ];\n    var block_type_rb_index = [ 0 ];\n    var distance_postfix_bits;\n    var num_direct_distance_codes;\n    var distance_postfix_mask;\n    var num_distance_codes;\n    var context_map = null;\n    var context_modes = null;\n    var num_literal_htrees;\n    var dist_context_map = null;\n    var num_dist_htrees;\n    var context_offset = 0;\n    var context_map_slice = null;\n    var literal_htree_index = 0;\n    var dist_context_offset = 0;\n    var dist_context_map_slice = null;\n    var dist_htree_index = 0;\n    var context_lookup_offset1 = 0;\n    var context_lookup_offset2 = 0;\n    var context_mode;\n    var htree_command;\n\n    for (i = 0; i < 3; ++i) {\n      hgroup[i].codes = null;\n      hgroup[i].htrees = null;\n    }\n\n    br.readMoreInput();\n    \n    var _out = DecodeMetaBlockLength(br);\n    meta_block_remaining_len = _out.meta_block_length;\n    if (pos + meta_block_remaining_len > output.buffer.length) {\n      /* We need to grow the output buffer to fit the additional data. */\n      var tmp = new Uint8Array( pos + meta_block_remaining_len );\n      tmp.set( output.buffer );\n      output.buffer = tmp;\n    }    \n    input_end = _out.input_end;\n    is_uncompressed = _out.is_uncompressed;\n    \n    if (_out.is_metadata) {\n      JumpToByteBoundary(br);\n      \n      for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {\n        br.readMoreInput();\n        /* Read one byte and ignore it. */\n        br.readBits(8);\n      }\n      \n      continue;\n    }\n    \n    if (meta_block_remaining_len === 0) {\n      continue;\n    }\n    \n    if (is_uncompressed) {\n      br.bit_pos_ = (br.bit_pos_ + 7) & ~7;\n      CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos,\n                                    ringbuffer, ringbuffer_mask, br);\n      pos += meta_block_remaining_len;\n      continue;\n    }\n    \n    for (i = 0; i < 3; ++i) {\n      num_block_types[i] = DecodeVarLenUint8(br) + 1;\n      if (num_block_types[i] >= 2) {\n        ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);\n        ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);\n        block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);\n        block_type_rb_index[i] = 1;\n      }\n    }\n    \n    br.readMoreInput();\n    \n    distance_postfix_bits = br.readBits(2);\n    num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);\n    distance_postfix_mask = (1 << distance_postfix_bits) - 1;\n    num_distance_codes = (num_direct_distance_codes + (48 << distance_postfix_bits));\n    context_modes = new Uint8Array(num_block_types[0]);\n\n    for (i = 0; i < num_block_types[0]; ++i) {\n       br.readMoreInput();\n       context_modes[i] = (br.readBits(2) << 1);\n    }\n    \n    var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);\n    num_literal_htrees = _o1.num_htrees;\n    context_map = _o1.context_map;\n    \n    var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);\n    num_dist_htrees = _o2.num_htrees;\n    dist_context_map = _o2.context_map;\n    \n    hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);\n    hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);\n    hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);\n\n    for (i = 0; i < 3; ++i) {\n      hgroup[i].decode(br);\n    }\n\n    context_map_slice = 0;\n    dist_context_map_slice = 0;\n    context_mode = context_modes[block_type[0]];\n    context_lookup_offset1 = Context.lookupOffsets[context_mode];\n    context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];\n    htree_command = hgroup[1].htrees[0];\n\n    while (meta_block_remaining_len > 0) {\n      var cmd_code;\n      var range_idx;\n      var insert_code;\n      var copy_code;\n      var insert_length;\n      var copy_length;\n      var distance_code;\n      var distance;\n      var context;\n      var j;\n      var copy_dst;\n\n      br.readMoreInput();\n      \n      if (block_length[1] === 0) {\n        DecodeBlockType(num_block_types[1],\n                        block_type_trees, 1, block_type, block_type_rb,\n                        block_type_rb_index, br);\n        block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);\n        htree_command = hgroup[1].htrees[block_type[1]];\n      }\n      --block_length[1];\n      cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);\n      range_idx = cmd_code >> 6;\n      if (range_idx >= 2) {\n        range_idx -= 2;\n        distance_code = -1;\n      } else {\n        distance_code = 0;\n      }\n      insert_code = Prefix.kInsertRangeLut[range_idx] + ((cmd_code >> 3) & 7);\n      copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);\n      insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset +\n          br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);\n      copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset +\n          br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);\n      prev_byte1 = ringbuffer[pos-1 & ringbuffer_mask];\n      prev_byte2 = ringbuffer[pos-2 & ringbuffer_mask];\n      for (j = 0; j < insert_length; ++j) {\n        br.readMoreInput();\n\n        if (block_length[0] === 0) {\n          DecodeBlockType(num_block_types[0],\n                          block_type_trees, 0, block_type, block_type_rb,\n                          block_type_rb_index, br);\n          block_length[0] = ReadBlockLength(block_len_trees, 0, br);\n          context_offset = block_type[0] << kLiteralContextBits;\n          context_map_slice = context_offset;\n          context_mode = context_modes[block_type[0]];\n          context_lookup_offset1 = Context.lookupOffsets[context_mode];\n          context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];\n        }\n        context = (Context.lookup[context_lookup_offset1 + prev_byte1] |\n                   Context.lookup[context_lookup_offset2 + prev_byte2]);\n        literal_htree_index = context_map[context_map_slice + context];\n        --block_length[0];\n        prev_byte2 = prev_byte1;\n        prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);\n        ringbuffer[pos & ringbuffer_mask] = prev_byte1;\n        if ((pos & ringbuffer_mask) === ringbuffer_mask) {\n          output.write(ringbuffer, ringbuffer_size);\n        }\n        ++pos;\n      }\n      meta_block_remaining_len -= insert_length;\n      if (meta_block_remaining_len <= 0) break;\n\n      if (distance_code < 0) {\n        var context;\n        \n        br.readMoreInput();\n        if (block_length[2] === 0) {\n          DecodeBlockType(num_block_types[2],\n                          block_type_trees, 2, block_type, block_type_rb,\n                          block_type_rb_index, br);\n          block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);\n          dist_context_offset = block_type[2] << kDistanceContextBits;\n          dist_context_map_slice = dist_context_offset;\n        }\n        --block_length[2];\n        context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;\n        dist_htree_index = dist_context_map[dist_context_map_slice + context];\n        distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);\n        if (distance_code >= num_direct_distance_codes) {\n          var nbits;\n          var postfix;\n          var offset;\n          distance_code -= num_direct_distance_codes;\n          postfix = distance_code & distance_postfix_mask;\n          distance_code >>= distance_postfix_bits;\n          nbits = (distance_code >> 1) + 1;\n          offset = ((2 + (distance_code & 1)) << nbits) - 4;\n          distance_code = num_direct_distance_codes +\n              ((offset + br.readBits(nbits)) <<\n               distance_postfix_bits) + postfix;\n        }\n      }\n\n      /* Convert the distance code to the actual distance by possibly looking */\n      /* up past distnaces from the ringbuffer. */\n      distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);\n      if (distance < 0) {\n        throw new Error('[BrotliDecompress] invalid distance');\n      }\n\n      if (pos < max_backward_distance &&\n          max_distance !== max_backward_distance) {\n        max_distance = pos;\n      } else {\n        max_distance = max_backward_distance;\n      }\n\n      copy_dst = pos & ringbuffer_mask;\n\n      if (distance > max_distance) {\n        if (copy_length >= BrotliDictionary.minDictionaryWordLength &&\n            copy_length <= BrotliDictionary.maxDictionaryWordLength) {\n          var offset = BrotliDictionary.offsetsByLength[copy_length];\n          var word_id = distance - max_distance - 1;\n          var shift = BrotliDictionary.sizeBitsByLength[copy_length];\n          var mask = (1 << shift) - 1;\n          var word_idx = word_id & mask;\n          var transform_idx = word_id >> shift;\n          offset += word_idx * copy_length;\n          if (transform_idx < Transform.kNumTransforms) {\n            var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);\n            copy_dst += len;\n            pos += len;\n            meta_block_remaining_len -= len;\n            if (copy_dst >= ringbuffer_end) {\n              output.write(ringbuffer, ringbuffer_size);\n              \n              for (var _x = 0; _x < (copy_dst - ringbuffer_end); _x++)\n                ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];\n            }\n          } else {\n            throw new Error(\"Invalid backward reference. pos: \" + pos + \" distance: \" + distance +\n              \" len: \" + copy_length + \" bytes left: \" + meta_block_remaining_len);\n          }\n        } else {\n          throw new Error(\"Invalid backward reference. pos: \" + pos + \" distance: \" + distance +\n            \" len: \" + copy_length + \" bytes left: \" + meta_block_remaining_len);\n        }\n      } else {\n        if (distance_code > 0) {\n          dist_rb[dist_rb_idx & 3] = distance;\n          ++dist_rb_idx;\n        }\n\n        if (copy_length > meta_block_remaining_len) {\n          throw new Error(\"Invalid backward reference. pos: \" + pos + \" distance: \" + distance +\n            \" len: \" + copy_length + \" bytes left: \" + meta_block_remaining_len);\n        }\n\n        for (j = 0; j < copy_length; ++j) {\n          ringbuffer[pos & ringbuffer_mask] = ringbuffer[(pos - distance) & ringbuffer_mask];\n          if ((pos & ringbuffer_mask) === ringbuffer_mask) {\n            output.write(ringbuffer, ringbuffer_size);\n          }\n          ++pos;\n          --meta_block_remaining_len;\n        }\n      }\n\n      /* When we get here, we must have inserted at least one literal and */\n      /* made a copy of at least length two, therefore accessing the last 2 */\n      /* bytes is valid. */\n      prev_byte1 = ringbuffer[(pos - 1) & ringbuffer_mask];\n      prev_byte2 = ringbuffer[(pos - 2) & ringbuffer_mask];\n    }\n\n    /* Protect pos from overflow, wrap it around at every GB of input data */\n    pos &= 0x3fffffff;\n  }\n\n  output.write(ringbuffer, pos & ringbuffer_mask);\n}\n\nexports.BrotliDecompress = BrotliDecompress;\n\nBrotliDictionary.init();\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Bit reading helpers\n*/\n\nvar BROTLI_READ_SIZE = 4096;\nvar BROTLI_IBUF_SIZE =  (2 * BROTLI_READ_SIZE + 32);\nvar BROTLI_IBUF_MASK =  (2 * BROTLI_READ_SIZE - 1);\n\nvar kBitMask = new Uint32Array([\n  0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767,\n  65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215\n]);\n\n/* Input byte buffer, consist of a ringbuffer and a \"slack\" region where */\n/* bytes from the start of the ringbuffer are copied. */\nfunction BrotliBitReader(input) {\n  this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);\n  this.input_ = input;    /* input callback */\n  \n  this.reset();\n}\n\nBrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;\nBrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;\n\nBrotliBitReader.prototype.reset = function() {\n  this.buf_ptr_ = 0;      /* next input will write here */\n  this.val_ = 0;          /* pre-fetched bits */\n  this.pos_ = 0;          /* byte position in stream */\n  this.bit_pos_ = 0;      /* current bit-reading position in val_ */\n  this.bit_end_pos_ = 0;  /* bit-reading end position from LSB of val_ */\n  this.eos_ = 0;          /* input stream is finished */\n  \n  this.readMoreInput();\n  for (var i = 0; i < 4; i++) {\n    this.val_ |= this.buf_[this.pos_] << (8 * i);\n    ++this.pos_;\n  }\n  \n  return this.bit_end_pos_ > 0;\n};\n\n/* Fills up the input ringbuffer by calling the input callback.\n\n   Does nothing if there are at least 32 bytes present after current position.\n\n   Returns 0 if either:\n    - the input callback returned an error, or\n    - there is no more input and the position is past the end of the stream.\n\n   After encountering the end of the input stream, 32 additional zero bytes are\n   copied to the ringbuffer, therefore it is safe to call this function after\n   every 32 bytes of input is read.\n*/\nBrotliBitReader.prototype.readMoreInput = function() {\n  if (this.bit_end_pos_ > 256) {\n    return;\n  } else if (this.eos_) {\n    if (this.bit_pos_ > this.bit_end_pos_)\n      throw new Error('Unexpected end of input ' + this.bit_pos_ + ' ' + this.bit_end_pos_);\n  } else {\n    var dst = this.buf_ptr_;\n    var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);\n    if (bytes_read < 0) {\n      throw new Error('Unexpected end of input');\n    }\n    \n    if (bytes_read < BROTLI_READ_SIZE) {\n      this.eos_ = 1;\n      /* Store 32 bytes of zero after the stream end. */\n      for (var p = 0; p < 32; p++)\n        this.buf_[dst + bytes_read + p] = 0;\n    }\n    \n    if (dst === 0) {\n      /* Copy the head of the ringbuffer to the slack region. */\n      for (var p = 0; p < 32; p++)\n        this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];\n\n      this.buf_ptr_ = BROTLI_READ_SIZE;\n    } else {\n      this.buf_ptr_ = 0;\n    }\n    \n    this.bit_end_pos_ += bytes_read << 3;\n  }\n};\n\n/* Guarantees that there are at least 24 bits in the buffer. */\nBrotliBitReader.prototype.fillBitWindow = function() {    \n  while (this.bit_pos_ >= 8) {\n    this.val_ >>>= 8;\n    this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;\n    ++this.pos_;\n    this.bit_pos_ = this.bit_pos_ - 8 >>> 0;\n    this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;\n  }\n};\n\n/* Reads the specified number of bits from Read Buffer. */\nBrotliBitReader.prototype.readBits = function(n_bits) {\n  if (32 - this.bit_pos_ < n_bits) {\n    this.fillBitWindow();\n  }\n  \n  var val = ((this.val_ >>> this.bit_pos_) & kBitMask[n_bits]);\n  this.bit_pos_ += n_bits;\n  return val;\n};\n\nmodule.exports = BrotliBitReader;\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Collection of static dictionary words.\n*/\n\nexports.dictionary = new Uint8Array([\n  0x74, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x66, 0x65, 0x6c,\n  0x65, 0x66, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x61,\n  0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x69, 0x74,\n  0x65, 0x63, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x65, 0x6e, 0x6a, 0x75, 0x73, 0x74,\n  0x6c, 0x69, 0x6b, 0x65, 0x66, 0x72, 0x65, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74,\n  0x65, 0x78, 0x74, 0x79, 0x65, 0x61, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x6f,\n  0x64, 0x79, 0x6c, 0x6f, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6f, 0x6f,\n  0x6b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65,\n  0x68, 0x65, 0x6c, 0x70, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6d,\n  0x6f, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x68,\n  0x65, 0x6d, 0x76, 0x69, 0x65, 0x77, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x67,\n  0x65, 0x64, 0x61, 0x79, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x68, 0x65, 0x61, 0x64,\n  0x74, 0x65, 0x72, 0x6d, 0x65, 0x61, 0x63, 0x68, 0x61, 0x72, 0x65, 0x61, 0x66,\n  0x72, 0x6f, 0x6d, 0x74, 0x72, 0x75, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62,\n  0x6c, 0x65, 0x75, 0x70, 0x6f, 0x6e, 0x68, 0x69, 0x67, 0x68, 0x64, 0x61, 0x74,\n  0x65, 0x6c, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x76, 0x65, 0x6e,\n  0x6e, 0x65, 0x78, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x74, 0x68, 0x70,\n  0x6f, 0x73, 0x74, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x64, 0x65, 0x68, 0x61,\n  0x6e, 0x64, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x61, 0x74, 0x6e, 0x61, 0x6d,\n  0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x69, 0x7a, 0x65,\n  0x62, 0x61, 0x73, 0x65, 0x68, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6b, 0x65, 0x6d,\n  0x61, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x27, 0x29, 0x20, 0x2b, 0x68, 0x6f,\n  0x6c, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77,\n  0x73, 0x72, 0x65, 0x61, 0x64, 0x77, 0x65, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,\n  0x74, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x73,\n  0x65, 0x65, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x77, 0x65,\n  0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x73, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x6c,\n  0x6d, 0x70, 0x61, 0x72, 0x74, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x68, 0x69, 0x73,\n  0x6c, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x6e, 0x65, 0x65, 0x64, 0x77,\n  0x61, 0x79, 0x73, 0x77, 0x65, 0x73, 0x74, 0x6a, 0x6f, 0x62, 0x73, 0x6d, 0x69,\n  0x6e, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x63,\n  0x68, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x65, 0x61, 0x6d,\n  0x61, 0x72, 0x6d, 0x79, 0x66, 0x6f, 0x6f, 0x64, 0x6b, 0x69, 0x6e, 0x67, 0x77,\n  0x69, 0x6c, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x77, 0x61, 0x72, 0x64, 0x62, 0x65,\n  0x73, 0x74, 0x66, 0x69, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x6b, 0x6e, 0x6f,\n  0x77, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x65,\n  0x74, 0x68, 0x61, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x67, 0x69, 0x76, 0x65, 0x73,\n  0x65, 0x6c, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x75, 0x63, 0x68, 0x66, 0x65,\n  0x65, 0x64, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x63, 0x6f,\n  0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x68, 0x69, 0x64, 0x65,\n  0x64, 0x69, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x68,\n  0x6f, 0x73, 0x74, 0x61, 0x6a, 0x61, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6c,\n  0x75, 0x62, 0x6c, 0x61, 0x77, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x68, 0x61, 0x6c,\n  0x66, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x63, 0x68, 0x7a, 0x6f, 0x6e, 0x65,\n  0x31, 0x30, 0x30, 0x25, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x72, 0x65, 0x54,\n  0x69, 0x6d, 0x65, 0x72, 0x61, 0x63, 0x65, 0x62, 0x6c, 0x75, 0x65, 0x66, 0x6f,\n  0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x66, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x70,\n  0x65, 0x67, 0x61, 0x76, 0x65, 0x68, 0x61, 0x72, 0x64, 0x6c, 0x6f, 0x73, 0x74,\n  0x77, 0x68, 0x65, 0x6e, 0x70, 0x61, 0x72, 0x6b, 0x6b, 0x65, 0x70, 0x74, 0x70,\n  0x61, 0x73, 0x73, 0x73, 0x68, 0x69, 0x70, 0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x54,\n  0x4d, 0x4c, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x6f, 0x6e,\n  0x65, 0x73, 0x61, 0x76, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x66, 0x6c, 0x61, 0x67,\n  0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x6f, 0x6c, 0x64, 0x66, 0x69, 0x76, 0x65, 0x74,\n  0x6f, 0x6f, 0x6b, 0x72, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x6a, 0x75,\n  0x6d, 0x70, 0x74, 0x68, 0x75, 0x73, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x72,\n  0x64, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x65, 0x61, 0x72, 0x73, 0x74, 0x61, 0x79,\n  0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x68, 0x61, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x61,\n  0x75, 0x74, 0x6f, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x74, 0x61,\n  0x6c, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x65, 0x65,\n  0x70, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x73, 0x74, 0x74, 0x75, 0x72, 0x6e,\n  0x62, 0x6f, 0x72, 0x6e, 0x62, 0x61, 0x6e, 0x64, 0x66, 0x65, 0x6c, 0x6c, 0x72,\n  0x6f, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x28, 0x73, 0x6b, 0x69, 0x6e, 0x72, 0x6f,\n  0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65,\n  0x73, 0x6d, 0x65, 0x65, 0x74, 0x67, 0x6f, 0x6c, 0x64, 0x2e, 0x6a, 0x70, 0x67,\n  0x69, 0x74, 0x65, 0x6d, 0x76, 0x61, 0x72, 0x79, 0x66, 0x65, 0x6c, 0x74, 0x74,\n  0x68, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x69,\n  0x65, 0x77, 0x63, 0x6f, 0x70, 0x79, 0x31, 0x2e, 0x30, 0x22, 0x3c, 0x2f, 0x61,\n  0x3e, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0x73, 0x65, 0x6c, 0x69, 0x65, 0x73,\n  0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x70,\n  0x61, 0x73, 0x74, 0x63, 0x73, 0x73, 0x3f, 0x67, 0x72, 0x61, 0x79, 0x6d, 0x65,\n  0x61, 0x6e, 0x26, 0x67, 0x74, 0x3b, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,\n  0x74, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x61, 0x69, 0x64, 0x72, 0x6f, 0x61, 0x64,\n  0x76, 0x61, 0x72, 0x20, 0x66, 0x65, 0x65, 0x6c, 0x6a, 0x6f, 0x68, 0x6e, 0x72,\n  0x69, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x73, 0x74, 0x27, 0x55,\n  0x41, 0x2d, 0x64, 0x65, 0x61, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x70, 0x6f, 0x6f,\n  0x72, 0x62, 0x69, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x55, 0x2e, 0x53, 0x2e,\n  0x77, 0x6f, 0x6f, 0x64, 0x6d, 0x75, 0x73, 0x74, 0x32, 0x70, 0x78, 0x3b, 0x49,\n  0x6e, 0x66, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x77, 0x69, 0x64, 0x65, 0x77, 0x61,\n  0x6e, 0x74, 0x77, 0x61, 0x6c, 0x6c, 0x6c, 0x65, 0x61, 0x64, 0x5b, 0x30, 0x5d,\n  0x3b, 0x70, 0x61, 0x75, 0x6c, 0x77, 0x61, 0x76, 0x65, 0x73, 0x75, 0x72, 0x65,\n  0x24, 0x28, 0x27, 0x23, 0x77, 0x61, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x73, 0x61,\n  0x72, 0x6d, 0x73, 0x67, 0x6f, 0x65, 0x73, 0x67, 0x61, 0x69, 0x6e, 0x6c, 0x61,\n  0x6e, 0x67, 0x70, 0x61, 0x69, 0x64, 0x21, 0x2d, 0x2d, 0x20, 0x6c, 0x6f, 0x63,\n  0x6b, 0x75, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x6f, 0x74, 0x77, 0x61, 0x6c, 0x6b,\n  0x66, 0x69, 0x72, 0x6d, 0x77, 0x69, 0x66, 0x65, 0x78, 0x6d, 0x6c, 0x22, 0x73,\n  0x6f, 0x6e, 0x67, 0x74, 0x65, 0x73, 0x74, 0x32, 0x30, 0x70, 0x78, 0x6b, 0x69,\n  0x6e, 0x64, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x6e,\n  0x74, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x73, 0x74, 0x61, 0x72,\n  0x6d, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x69, 0x6e, 0x66,\n  0x6c, 0x6f, 0x77, 0x62, 0x61, 0x62, 0x79, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x61,\n  0x79, 0x73, 0x34, 0x70, 0x78, 0x3b, 0x36, 0x70, 0x78, 0x3b, 0x61, 0x72, 0x74,\n  0x73, 0x66, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x69, 0x6b, 0x69,\n  0x68, 0x65, 0x61, 0x74, 0x73, 0x74, 0x65, 0x70, 0x74, 0x72, 0x69, 0x70, 0x6f,\n  0x72, 0x67, 0x2f, 0x6c, 0x61, 0x6b, 0x65, 0x77, 0x65, 0x61, 0x6b, 0x74, 0x6f,\n  0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x66, 0x61, 0x6e,\n  0x73, 0x62, 0x61, 0x6e, 0x6b, 0x76, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73,\n  0x6a, 0x75, 0x6c, 0x79, 0x74, 0x61, 0x73, 0x6b, 0x31, 0x70, 0x78, 0x3b, 0x67,\n  0x6f, 0x61, 0x6c, 0x67, 0x72, 0x65, 0x77, 0x73, 0x6c, 0x6f, 0x77, 0x65, 0x64,\n  0x67, 0x65, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x74, 0x73, 0x35, 0x70, 0x78,\n  0x3b, 0x2e, 0x6a, 0x73, 0x3f, 0x34, 0x30, 0x70, 0x78, 0x69, 0x66, 0x20, 0x28,\n  0x73, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x6e, 0x65, 0x74,\n  0x75, 0x62, 0x65, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x65,\n  0x65, 0x64, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x69, 0x66,\n  0x74, 0x68, 0x61, 0x72, 0x6d, 0x31, 0x38, 0x70, 0x78, 0x63, 0x61, 0x6d, 0x65,\n  0x68, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x6c, 0x64, 0x7a, 0x6f, 0x6f, 0x6d, 0x76,\n  0x6f, 0x69, 0x64, 0x65, 0x61, 0x73, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x69,\n  0x6c, 0x6c, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,\n  0x74, 0x33, 0x70, 0x78, 0x3b, 0x6a, 0x61, 0x63, 0x6b, 0x74, 0x61, 0x67, 0x73,\n  0x62, 0x69, 0x74, 0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6b,\n  0x6e, 0x65, 0x77, 0x6e, 0x65, 0x61, 0x72, 0x3c, 0x21, 0x2d, 0x2d, 0x67, 0x72,\n  0x6f, 0x77, 0x4a, 0x53, 0x4f, 0x4e, 0x64, 0x75, 0x74, 0x79, 0x4e, 0x61, 0x6d,\n  0x65, 0x73, 0x61, 0x6c, 0x65, 0x79, 0x6f, 0x75, 0x20, 0x6c, 0x6f, 0x74, 0x73,\n  0x70, 0x61, 0x69, 0x6e, 0x6a, 0x61, 0x7a, 0x7a, 0x63, 0x6f, 0x6c, 0x64, 0x65,\n  0x79, 0x65, 0x73, 0x66, 0x69, 0x73, 0x68, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x69,\n  0x73, 0x6b, 0x74, 0x61, 0x62, 0x73, 0x70, 0x72, 0x65, 0x76, 0x31, 0x30, 0x70,\n  0x78, 0x72, 0x69, 0x73, 0x65, 0x32, 0x35, 0x70, 0x78, 0x42, 0x6c, 0x75, 0x65,\n  0x64, 0x69, 0x6e, 0x67, 0x33, 0x30, 0x30, 0x2c, 0x62, 0x61, 0x6c, 0x6c, 0x66,\n  0x6f, 0x72, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x77, 0x69, 0x6c, 0x64, 0x62, 0x6f,\n  0x78, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x61, 0x63, 0x6b, 0x76, 0x65, 0x72,\n  0x73, 0x70, 0x61, 0x69, 0x72, 0x6a, 0x75, 0x6e, 0x65, 0x74, 0x65, 0x63, 0x68,\n  0x69, 0x66, 0x28, 0x21, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x76, 0x69, 0x6c, 0x24,\n  0x28, 0x22, 0x23, 0x77, 0x61, 0x72, 0x6d, 0x6c, 0x6f, 0x72, 0x64, 0x64, 0x6f,\n  0x65, 0x73, 0x70, 0x75, 0x6c, 0x6c, 0x2c, 0x30, 0x30, 0x30, 0x69, 0x64, 0x65,\n  0x61, 0x64, 0x72, 0x61, 0x77, 0x68, 0x75, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x74,\n  0x66, 0x75, 0x6e, 0x64, 0x62, 0x75, 0x72, 0x6e, 0x68, 0x72, 0x65, 0x66, 0x63,\n  0x65, 0x6c, 0x6c, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x68, 0x6f,\n  0x75, 0x72, 0x6c, 0x6f, 0x73, 0x73, 0x66, 0x75, 0x65, 0x6c, 0x31, 0x32, 0x70,\n  0x78, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x53, 0x53, 0x22,\n  0x61, 0x67, 0x65, 0x64, 0x67, 0x72, 0x65, 0x79, 0x47, 0x45, 0x54, 0x22, 0x65,\n  0x61, 0x73, 0x65, 0x61, 0x69, 0x6d, 0x73, 0x67, 0x69, 0x72, 0x6c, 0x61, 0x69,\n  0x64, 0x73, 0x38, 0x70, 0x78, 0x3b, 0x6e, 0x61, 0x76, 0x79, 0x67, 0x72, 0x69,\n  0x64, 0x74, 0x69, 0x70, 0x73, 0x23, 0x39, 0x39, 0x39, 0x77, 0x61, 0x72, 0x73,\n  0x6c, 0x61, 0x64, 0x79, 0x63, 0x61, 0x72, 0x73, 0x29, 0x3b, 0x20, 0x7d, 0x70,\n  0x68, 0x70, 0x3f, 0x68, 0x65, 0x6c, 0x6c, 0x74, 0x61, 0x6c, 0x6c, 0x77, 0x68,\n  0x6f, 0x6d, 0x7a, 0x68, 0x3a, 0xe5, 0x2a, 0x2f, 0x0d, 0x0a, 0x20, 0x31, 0x30,\n  0x30, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x41, 0x37, 0x70, 0x78, 0x3b,\n  0x70, 0x75, 0x73, 0x68, 0x63, 0x68, 0x61, 0x74, 0x30, 0x70, 0x78, 0x3b, 0x63,\n  0x72, 0x65, 0x77, 0x2a, 0x2f, 0x3c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x37, 0x35,\n  0x70, 0x78, 0x66, 0x6c, 0x61, 0x74, 0x72, 0x61, 0x72, 0x65, 0x20, 0x26, 0x26,\n  0x20, 0x74, 0x65, 0x6c, 0x6c, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x6e, 0x74, 0x6f,\n  0x6c, 0x61, 0x69, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x73, 0x6b, 0x69, 0x70, 0x74,\n  0x65, 0x6e, 0x74, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x67, 0x65,\n  0x74, 0x73, 0x70, 0x6c, 0x6f, 0x74, 0x34, 0x30, 0x30, 0x2c, 0x0d, 0x0a, 0x0d,\n  0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x66, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x68, 0x70,\n  0x3c, 0x62, 0x72, 0x3e, 0x65, 0x72, 0x69, 0x63, 0x6d, 0x6f, 0x73, 0x74, 0x67,\n  0x75, 0x69, 0x64, 0x62, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x73, 0x63, 0x68, 0x61,\n  0x69, 0x72, 0x6d, 0x61, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6d, 0x2f, 0x69, 0x6d,\n  0x67, 0x26, 0x23, 0x38, 0x32, 0x6c, 0x75, 0x63, 0x6b, 0x63, 0x65, 0x6e, 0x74,\n  0x30, 0x30, 0x30, 0x3b, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x6e, 0x65, 0x68,\n  0x74, 0x6d, 0x6c, 0x73, 0x65, 0x6c, 0x6c, 0x64, 0x72, 0x75, 0x67, 0x46, 0x52,\n  0x45, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x69, 0x63, 0x6b, 0x3f, 0x69, 0x64,\n  0x3d, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x73, 0x74,\n  0x77, 0x69, 0x6e, 0x64, 0x52, 0x53, 0x53, 0x20, 0x77, 0x65, 0x61, 0x72, 0x72,\n  0x65, 0x6c, 0x79, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x65, 0x64, 0x75,\n  0x6b, 0x65, 0x6e, 0x61, 0x73, 0x61, 0x63, 0x61, 0x70, 0x65, 0x77, 0x69, 0x73,\n  0x68, 0x67, 0x75, 0x6c, 0x66, 0x54, 0x32, 0x33, 0x3a, 0x68, 0x69, 0x74, 0x73,\n  0x73, 0x6c, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x62,\n  0x6c, 0x75, 0x72, 0x74, 0x68, 0x65, 0x79, 0x31, 0x35, 0x70, 0x78, 0x27, 0x27,\n  0x29, 0x3b, 0x29, 0x3b, 0x22, 0x3e, 0x6d, 0x73, 0x69, 0x65, 0x77, 0x69, 0x6e,\n  0x73, 0x62, 0x69, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x65, 0x74, 0x61,\n  0x73, 0x65, 0x65, 0x6b, 0x54, 0x31, 0x38, 0x3a, 0x6f, 0x72, 0x64, 0x73, 0x74,\n  0x72, 0x65, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x36, 0x30, 0x70, 0x78, 0x66, 0x61,\n  0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x62, 0x6f, 0x79, 0x73, 0x5b, 0x30, 0x5d,\n  0x2e, 0x27, 0x29, 0x3b, 0x22, 0x50, 0x4f, 0x53, 0x54, 0x62, 0x65, 0x61, 0x72,\n  0x6b, 0x69, 0x64, 0x73, 0x29, 0x3b, 0x7d, 0x7d, 0x6d, 0x61, 0x72, 0x79, 0x74,\n  0x65, 0x6e, 0x64, 0x28, 0x55, 0x4b, 0x29, 0x71, 0x75, 0x61, 0x64, 0x7a, 0x68,\n  0x3a, 0xe6, 0x2d, 0x73, 0x69, 0x7a, 0x2d, 0x2d, 0x2d, 0x2d, 0x70, 0x72, 0x6f,\n  0x70, 0x27, 0x29, 0x3b, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x54, 0x31, 0x39, 0x3a,\n  0x76, 0x69, 0x63, 0x65, 0x61, 0x6e, 0x64, 0x79, 0x64, 0x65, 0x62, 0x74, 0x3e,\n  0x52, 0x53, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x65, 0x63, 0x6b, 0x62, 0x6c,\n  0x6f, 0x77, 0x54, 0x31, 0x36, 0x3a, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x76, 0x61,\n  0x6c, 0x54, 0x31, 0x37, 0x3a, 0x6c, 0x65, 0x74, 0x73, 0x66, 0x61, 0x69, 0x6c,\n  0x6f, 0x72, 0x61, 0x6c, 0x70, 0x6f, 0x6c, 0x6c, 0x6e, 0x6f, 0x76, 0x61, 0x63,\n  0x6f, 0x6c, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x20, 0xe2, 0x80, 0x94, 0x73, 0x6f,\n  0x66, 0x74, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6c, 0x6c, 0x72, 0x6f, 0x73,\n  0x73, 0x3c, 0x68, 0x33, 0x3e, 0x70, 0x6f, 0x75, 0x72, 0x66, 0x61, 0x64, 0x65,\n  0x70, 0x69, 0x6e, 0x6b, 0x3c, 0x74, 0x72, 0x3e, 0x6d, 0x69, 0x6e, 0x69, 0x29,\n  0x7c, 0x21, 0x28, 0x6d, 0x69, 0x6e, 0x65, 0x7a, 0x68, 0x3a, 0xe8, 0x62, 0x61,\n  0x72, 0x73, 0x68, 0x65, 0x61, 0x72, 0x30, 0x30, 0x29, 0x3b, 0x6d, 0x69, 0x6c,\n  0x6b, 0x20, 0x2d, 0x2d, 0x3e, 0x69, 0x72, 0x6f, 0x6e, 0x66, 0x72, 0x65, 0x64,\n  0x64, 0x69, 0x73, 0x6b, 0x77, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x69, 0x6c, 0x70,\n  0x75, 0x74, 0x73, 0x2f, 0x6a, 0x73, 0x2f, 0x68, 0x6f, 0x6c, 0x79, 0x54, 0x32,\n  0x32, 0x3a, 0x49, 0x53, 0x42, 0x4e, 0x54, 0x32, 0x30, 0x3a, 0x61, 0x64, 0x61,\n  0x6d, 0x73, 0x65, 0x65, 0x73, 0x3c, 0x68, 0x32, 0x3e, 0x6a, 0x73, 0x6f, 0x6e,\n  0x27, 0x2c, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x54, 0x32, 0x31, 0x3a, 0x20,\n  0x52, 0x53, 0x53, 0x6c, 0x6f, 0x6f, 0x70, 0x61, 0x73, 0x69, 0x61, 0x6d, 0x6f,\n  0x6f, 0x6e, 0x3c, 0x2f, 0x70, 0x3e, 0x73, 0x6f, 0x75, 0x6c, 0x4c, 0x49, 0x4e,\n  0x45, 0x66, 0x6f, 0x72, 0x74, 0x63, 0x61, 0x72, 0x74, 0x54, 0x31, 0x34, 0x3a,\n  0x3c, 0x68, 0x31, 0x3e, 0x38, 0x30, 0x70, 0x78, 0x21, 0x2d, 0x2d, 0x3c, 0x39,\n  0x70, 0x78, 0x3b, 0x54, 0x30, 0x34, 0x3a, 0x6d, 0x69, 0x6b, 0x65, 0x3a, 0x34,\n  0x36, 0x5a, 0x6e, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x59, 0x6f, 0x72,\n  0x6b, 0x72, 0x69, 0x63, 0x65, 0x7a, 0x68, 0x3a, 0xe4, 0x27, 0x29, 0x29, 0x3b,\n  0x70, 0x75, 0x72, 0x65, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,\n  0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x3a, 0x33, 0x37, 0x5a, 0x5f, 0x6f,\n  0x66, 0x5f, 0x27, 0x5d, 0x29, 0x3b, 0x30, 0x30, 0x30, 0x2c, 0x7a, 0x68, 0x3a,\n  0xe7, 0x74, 0x61, 0x6e, 0x6b, 0x79, 0x61, 0x72, 0x64, 0x62, 0x6f, 0x77, 0x6c,\n  0x62, 0x75, 0x73, 0x68, 0x3a, 0x35, 0x36, 0x5a, 0x4a, 0x61, 0x76, 0x61, 0x33,\n  0x30, 0x70, 0x78, 0x0a, 0x7c, 0x7d, 0x0a, 0x25, 0x43, 0x33, 0x25, 0x3a, 0x33,\n  0x34, 0x5a, 0x6a, 0x65, 0x66, 0x66, 0x45, 0x58, 0x50, 0x49, 0x63, 0x61, 0x73,\n  0x68, 0x76, 0x69, 0x73, 0x61, 0x67, 0x6f, 0x6c, 0x66, 0x73, 0x6e, 0x6f, 0x77,\n  0x7a, 0x68, 0x3a, 0xe9, 0x71, 0x75, 0x65, 0x72, 0x2e, 0x63, 0x73, 0x73, 0x73,\n  0x69, 0x63, 0x6b, 0x6d, 0x65, 0x61, 0x74, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x69,\n  0x6e, 0x64, 0x64, 0x65, 0x6c, 0x6c, 0x68, 0x69, 0x72, 0x65, 0x70, 0x69, 0x63,\n  0x73, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x33, 0x36, 0x5a, 0x48, 0x54, 0x54, 0x50,\n  0x2d, 0x32, 0x30, 0x31, 0x66, 0x6f, 0x74, 0x6f, 0x77, 0x6f, 0x6c, 0x66, 0x45,\n  0x4e, 0x44, 0x20, 0x78, 0x62, 0x6f, 0x78, 0x3a, 0x35, 0x34, 0x5a, 0x42, 0x4f,\n  0x44, 0x59, 0x64, 0x69, 0x63, 0x6b, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x78, 0x69,\n  0x74, 0x3a, 0x33, 0x35, 0x5a, 0x76, 0x61, 0x72, 0x73, 0x62, 0x65, 0x61, 0x74,\n  0x27, 0x7d, 0x29, 0x3b, 0x64, 0x69, 0x65, 0x74, 0x39, 0x39, 0x39, 0x3b, 0x61,\n  0x6e, 0x6e, 0x65, 0x7d, 0x7d, 0x3c, 0x2f, 0x5b, 0x69, 0x5d, 0x2e, 0x4c, 0x61,\n  0x6e, 0x67, 0x6b, 0x6d, 0xc2, 0xb2, 0x77, 0x69, 0x72, 0x65, 0x74, 0x6f, 0x79,\n  0x73, 0x61, 0x64, 0x64, 0x73, 0x73, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x65, 0x78,\n  0x3b, 0x0a, 0x09, 0x7d, 0x65, 0x63, 0x68, 0x6f, 0x6e, 0x69, 0x6e, 0x65, 0x2e,\n  0x6f, 0x72, 0x67, 0x30, 0x30, 0x35, 0x29, 0x74, 0x6f, 0x6e, 0x79, 0x6a, 0x65,\n  0x77, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x67, 0x73, 0x72, 0x6f, 0x6f,\n  0x66, 0x30, 0x30, 0x30, 0x29, 0x20, 0x32, 0x30, 0x30, 0x77, 0x69, 0x6e, 0x65,\n  0x67, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x67, 0x73, 0x62, 0x6f, 0x6f, 0x74, 0x67,\n  0x61, 0x72, 0x79, 0x63, 0x75, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x65,\n  0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x6d, 0x6c, 0x63, 0x6f, 0x63,\n  0x6b, 0x67, 0x61, 0x6e, 0x67, 0x24, 0x28, 0x27, 0x2e, 0x35, 0x30, 0x70, 0x78,\n  0x50, 0x68, 0x2e, 0x44, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x6e, 0x6c,\n  0x6f, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x6d, 0x69, 0x6c, 0x65, 0x72, 0x79,\n  0x61, 0x6e, 0x75, 0x6e, 0x69, 0x78, 0x64, 0x69, 0x73, 0x63, 0x29, 0x3b, 0x7d,\n  0x0a, 0x64, 0x75, 0x73, 0x74, 0x63, 0x6c, 0x69, 0x70, 0x29, 0x2e, 0x0a, 0x0a,\n  0x37, 0x30, 0x70, 0x78, 0x2d, 0x32, 0x30, 0x30, 0x44, 0x56, 0x44, 0x73, 0x37,\n  0x5d, 0x3e, 0x3c, 0x74, 0x61, 0x70, 0x65, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x2b,\n  0x2b, 0x29, 0x77, 0x61, 0x67, 0x65, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x68, 0x69,\n  0x6c, 0x6f, 0x70, 0x74, 0x73, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x41, 0x51, 0x73,\n  0x61, 0x73, 0x69, 0x6e, 0x2d, 0x32, 0x36, 0x54, 0x6c, 0x61, 0x62, 0x73, 0x70,\n  0x65, 0x74, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x62, 0x75, 0x6c, 0x6b, 0x63, 0x6f,\n  0x6f, 0x6b, 0x3b, 0x7d, 0x0d, 0x0a, 0x48, 0x45, 0x41, 0x44, 0x5b, 0x30, 0x5d,\n  0x29, 0x61, 0x62, 0x62, 0x72, 0x6a, 0x75, 0x61, 0x6e, 0x28, 0x31, 0x39, 0x38,\n  0x6c, 0x65, 0x73, 0x68, 0x74, 0x77, 0x69, 0x6e, 0x3c, 0x2f, 0x69, 0x3e, 0x73,\n  0x6f, 0x6e, 0x79, 0x67, 0x75, 0x79, 0x73, 0x66, 0x75, 0x63, 0x6b, 0x70, 0x69,\n  0x70, 0x65, 0x7c, 0x2d, 0x0a, 0x21, 0x30, 0x30, 0x32, 0x29, 0x6e, 0x64, 0x6f,\n  0x77, 0x5b, 0x31, 0x5d, 0x3b, 0x5b, 0x5d, 0x3b, 0x0a, 0x4c, 0x6f, 0x67, 0x20,\n  0x73, 0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09, 0x09, 0x62, 0x61, 0x6e, 0x67, 0x74,\n  0x72, 0x69, 0x6d, 0x62, 0x61, 0x74, 0x68, 0x29, 0x7b, 0x0d, 0x0a, 0x30, 0x30,\n  0x70, 0x78, 0x0a, 0x7d, 0x29, 0x3b, 0x6b, 0x6f, 0x3a, 0xec, 0x66, 0x65, 0x65,\n  0x73, 0x61, 0x64, 0x3e, 0x0d, 0x73, 0x3a, 0x2f, 0x2f, 0x20, 0x5b, 0x5d, 0x3b,\n  0x74, 0x6f, 0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x28, 0x29, 0x7b, 0x0a, 0x7b,\n  0x0d, 0x0a, 0x20, 0x2e, 0x6a, 0x73, 0x27, 0x32, 0x30, 0x30, 0x70, 0x64, 0x75,\n  0x61, 0x6c, 0x62, 0x6f, 0x61, 0x74, 0x2e, 0x4a, 0x50, 0x47, 0x29, 0x3b, 0x0a,\n  0x7d, 0x71, 0x75, 0x6f, 0x74, 0x29, 0x3b, 0x0a, 0x0a, 0x27, 0x29, 0x3b, 0x0a,\n  0x0d, 0x0a, 0x7d, 0x0d, 0x32, 0x30, 0x31, 0x34, 0x32, 0x30, 0x31, 0x35, 0x32,\n  0x30, 0x31, 0x36, 0x32, 0x30, 0x31, 0x37, 0x32, 0x30, 0x31, 0x38, 0x32, 0x30,\n  0x31, 0x39, 0x32, 0x30, 0x32, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 0x30, 0x32,\n  0x32, 0x32, 0x30, 0x32, 0x33, 0x32, 0x30, 0x32, 0x34, 0x32, 0x30, 0x32, 0x35,\n  0x32, 0x30, 0x32, 0x36, 0x32, 0x30, 0x32, 0x37, 0x32, 0x30, 0x32, 0x38, 0x32,\n  0x30, 0x32, 0x39, 0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x33, 0x31, 0x32, 0x30,\n  0x33, 0x32, 0x32, 0x30, 0x33, 0x33, 0x32, 0x30, 0x33, 0x34, 0x32, 0x30, 0x33,\n  0x35, 0x32, 0x30, 0x33, 0x36, 0x32, 0x30, 0x33, 0x37, 0x32, 0x30, 0x31, 0x33,\n  0x32, 0x30, 0x31, 0x32, 0x32, 0x30, 0x31, 0x31, 0x32, 0x30, 0x31, 0x30, 0x32,\n  0x30, 0x30, 0x39, 0x32, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x37, 0x32, 0x30,\n  0x30, 0x36, 0x32, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30,\n  0x33, 0x32, 0x30, 0x30, 0x32, 0x32, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30,\n  0x31, 0x39, 0x39, 0x39, 0x31, 0x39, 0x39, 0x38, 0x31, 0x39, 0x39, 0x37, 0x31,\n  0x39, 0x39, 0x36, 0x31, 0x39, 0x39, 0x35, 0x31, 0x39, 0x39, 0x34, 0x31, 0x39,\n  0x39, 0x33, 0x31, 0x39, 0x39, 0x32, 0x31, 0x39, 0x39, 0x31, 0x31, 0x39, 0x39,\n  0x30, 0x31, 0x39, 0x38, 0x39, 0x31, 0x39, 0x38, 0x38, 0x31, 0x39, 0x38, 0x37,\n  0x31, 0x39, 0x38, 0x36, 0x31, 0x39, 0x38, 0x35, 0x31, 0x39, 0x38, 0x34, 0x31,\n  0x39, 0x38, 0x33, 0x31, 0x39, 0x38, 0x32, 0x31, 0x39, 0x38, 0x31, 0x31, 0x39,\n  0x38, 0x30, 0x31, 0x39, 0x37, 0x39, 0x31, 0x39, 0x37, 0x38, 0x31, 0x39, 0x37,\n  0x37, 0x31, 0x39, 0x37, 0x36, 0x31, 0x39, 0x37, 0x35, 0x31, 0x39, 0x37, 0x34,\n  0x31, 0x39, 0x37, 0x33, 0x31, 0x39, 0x37, 0x32, 0x31, 0x39, 0x37, 0x31, 0x31,\n  0x39, 0x37, 0x30, 0x31, 0x39, 0x36, 0x39, 0x31, 0x39, 0x36, 0x38, 0x31, 0x39,\n  0x36, 0x37, 0x31, 0x39, 0x36, 0x36, 0x31, 0x39, 0x36, 0x35, 0x31, 0x39, 0x36,\n  0x34, 0x31, 0x39, 0x36, 0x33, 0x31, 0x39, 0x36, 0x32, 0x31, 0x39, 0x36, 0x31,\n  0x31, 0x39, 0x36, 0x30, 0x31, 0x39, 0x35, 0x39, 0x31, 0x39, 0x35, 0x38, 0x31,\n  0x39, 0x35, 0x37, 0x31, 0x39, 0x35, 0x36, 0x31, 0x39, 0x35, 0x35, 0x31, 0x39,\n  0x35, 0x34, 0x31, 0x39, 0x35, 0x33, 0x31, 0x39, 0x35, 0x32, 0x31, 0x39, 0x35,\n  0x31, 0x31, 0x39, 0x35, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x34,\n  0x31, 0x33, 0x39, 0x34, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x39, 0x39, 0x63,\n  0x6f, 0x6d, 0x6f, 0x6d, 0xc3, 0xa1, 0x73, 0x65, 0x73, 0x74, 0x65, 0x65, 0x73,\n  0x74, 0x61, 0x70, 0x65, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x6f, 0x68, 0x61, 0x63,\n  0x65, 0x63, 0x61, 0x64, 0x61, 0x61, 0xc3, 0xb1, 0x6f, 0x62, 0x69, 0x65, 0x6e,\n  0x64, 0xc3, 0xad, 0x61, 0x61, 0x73, 0xc3, 0xad, 0x76, 0x69, 0x64, 0x61, 0x63,\n  0x61, 0x73, 0x6f, 0x6f, 0x74, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6f,\n  0x6c, 0x6f, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x6a,\n  0x6f, 0x73, 0x69, 0x64, 0x6f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x70, 0x6f,\n  0x74, 0x65, 0x6d, 0x61, 0x64, 0x65, 0x62, 0x65, 0x61, 0x6c, 0x67, 0x6f, 0x71,\n  0x75, 0xc3, 0xa9, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x74, 0x72,\n  0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x63, 0x61, 0x73, 0x61, 0x62, 0x61, 0x6a,\n  0x6f, 0x74, 0x6f, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x61, 0x67, 0x75, 0x61,\n  0x70, 0x75, 0x65, 0x73, 0x75, 0x6e, 0x6f, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x64,\n  0x69, 0x63, 0x65, 0x6c, 0x75, 0x69, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x6d, 0x61,\n  0x79, 0x6f, 0x7a, 0x6f, 0x6e, 0x61, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x69, 0x73,\n  0x6f, 0x6f, 0x62, 0x72, 0x61, 0x63, 0x6c, 0x69, 0x63, 0x65, 0x6c, 0x6c, 0x6f,\n  0x64, 0x69, 0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x63, 0x61, 0x73, 0x69, 0xd0,\n  0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x80,\n  0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,\n  0xb5, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb7,\n  0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,\n  0xb6, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0x9d,\n  0xd0, 0xb0, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbc, 0xd1,\n  0x8b, 0xd0, 0x92, 0xd1, 0x8b, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,\n  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0,\n  0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xa0,\n  0xd0, 0xa4, 0xd0, 0x9d, 0xd0, 0xb5, 0xd0, 0x9c, 0xd1, 0x8b, 0xd1, 0x82, 0xd1,\n  0x8b, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb4, 0xd0, 0xb0,\n  0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0x9d, 0xd1, 0x83, 0xd0,\n  0x9e, 0xd0, 0xb1, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0x98, 0xd0, 0xb7, 0xd0, 0xb5,\n  0xd0, 0xb9, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xa2, 0xd1,\n  0x8b, 0xd1, 0x83, 0xd0, 0xb6, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xa3, 0xd9, 0x86,\n  0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x83, 0xd9, 0x84, 0xd8,\n  0xa3, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x81,\n  0xd9, 0x89, 0xd9, 0x87, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9,\n  0x83, 0xd8, 0xa7, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa8, 0xd8, 0xb3,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x8a, 0xd8,\n  0xa3, 0xd9, 0x8a, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xab,\n  0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x84, 0xd9,\n  0x8a, 0xd8, 0xa8, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x8a, 0xd8, 0xa8, 0xd9, 0x83,\n  0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa3, 0xd9, 0x85, 0xd9,\n  0x86, 0xd8, 0xaa, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x84, 0xd9, 0x86, 0xd8, 0xad,\n  0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xb4, 0xd9, 0x88, 0xd8,\n  0xb4, 0x66, 0x69, 0x72, 0x73, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x69,\n  0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x65, 0x64, 0x69, 0x61,\n  0x77, 0x68, 0x69, 0x74, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6c, 0x61,\n  0x63, 0x6b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62,\n  0x6f, 0x6f, 0x6b, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x75, 0x73, 0x69,\n  0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f,\n  0x69, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,\n  0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x75,\n  0x73, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x79,\n  0x65, 0x61, 0x72, 0x73, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x64, 0x61,\n  0x79, 0x77, 0x61, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x64, 0x65, 0x61, 0x74, 0x68, 0x70, 0x6f, 0x77, 0x65, 0x72,\n  0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x72,\n  0x6f, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x74,\n  0x65, 0x72, 0x6d, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x6f, 0x6f, 0x6c,\n  0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69,\n  0x6d, 0x65, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x73,\n  0x67, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x61,\n  0x63, 0x65, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6d,\n  0x6f, 0x64, 0x65, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x67, 0x75, 0x69, 0x64,\n  0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x77, 0x6f,\n  0x6d, 0x65, 0x6e, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x6f, 0x6e, 0x65, 0x79,\n  0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x79, 0x6f, 0x75,\n  0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x63,\n  0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x72, 0x6f, 0x6e,\n  0x74, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x66, 0x6f,\n  0x72, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73,\n  0x62, 0x65, 0x67, 0x69, 0x6e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x76, 0x69, 0x73,\n  0x69, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x61, 0x72, 0x65, 0x61, 0x73, 0x62,\n  0x65, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x74, 0x6f, 0x74, 0x61,\n  0x6c, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x72,\n  0x69, 0x6e, 0x74, 0x70, 0x72, 0x65, 0x73, 0x73, 0x62, 0x75, 0x69, 0x6c, 0x74,\n  0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x74, 0x75,\n  0x64, 0x79, 0x74, 0x72, 0x61, 0x64, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73,\n  0x65, 0x6e, 0x73, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77,\n  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x64,\n  0x64, 0x65, 0x64, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x6d, 0x6f, 0x76, 0x65, 0x64,\n  0x74, 0x61, 0x6b, 0x65, 0x6e, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x66, 0x6c, 0x61,\n  0x73, 0x68, 0x66, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6f,\n  0x74, 0x68, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x63, 0x68, 0x65, 0x63,\n  0x6b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x72, 0x69, 0x76, 0x65, 0x72, 0x69, 0x74,\n  0x65, 0x6d, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68, 0x61, 0x70, 0x65,\n  0x68, 0x75, 0x6d, 0x61, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x69,\n  0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x68, 0x69, 0x72, 0x64, 0x62,\n  0x61, 0x73, 0x69, 0x63, 0x70, 0x65, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x67,\n  0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x64,\n  0x65, 0x61, 0x73, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,\n  0x75, 0x73, 0x65, 0x72, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,\n  0x72, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x76,\n  0x6f, 0x69, 0x63, 0x65, 0x73, 0x69, 0x74, 0x65, 0x73, 0x6d, 0x6f, 0x6e, 0x74,\n  0x68, 0x77, 0x68, 0x65, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x77, 0x68,\n  0x69, 0x63, 0x68, 0x65, 0x61, 0x72, 0x74, 0x68, 0x66, 0x6f, 0x72, 0x75, 0x6d,\n  0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x61, 0x72,\n  0x74, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x6c,\n  0x69, 0x76, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x79, 0x65,\n  0x72, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x75, 0x73,\n  0x61, 0x67, 0x65, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x74,\n  0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6f, 0x70,\n  0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,\n  0x6d, 0x61, 0x67, 0x65, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x75, 0x70, 0x70, 0x65,\n  0x72, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79, 0x73, 0x68,\n  0x6f, 0x77, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61,\n  0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6b, 0x6e, 0x6f,\n  0x77, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x62, 0x65, 0x67, 0x61, 0x6e, 0x73,\n  0x75, 0x70, 0x65, 0x72, 0x70, 0x61, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x74,\n  0x68, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x6e, 0x61,\n  0x6d, 0x65, 0x64, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73,\n  0x70, 0x61, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x72, 0x61,\n  0x6e, 0x64, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x66,\n  0x61, 0x6c, 0x73, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x61, 0x75, 0x64, 0x69,\n  0x6f, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2e, 0x63,\n  0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x63, 0x61, 0x73, 0x65, 0x73,\n  0x64, 0x61, 0x69, 0x6c, 0x79, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x67, 0x72, 0x65,\n  0x61, 0x74, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x75,\n  0x6e, 0x69, 0x74, 0x73, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72, 0x6f, 0x61,\n  0x64, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x70,\n  0x70, 0x6c, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x63, 0x79, 0x63, 0x6c, 0x65,\n  0x73, 0x63, 0x65, 0x6e, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x69,\n  0x63, 0x6b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x70,\n  0x69, 0x65, 0x63, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x66, 0x72, 0x61, 0x6d,\n  0x65, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6c, 0x69,\n  0x6d, 0x69, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x63, 0x69, 0x76, 0x69, 0x6c,\n  0x73, 0x63, 0x61, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65,\n  0x6d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x62,\n  0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x61, 0x73, 0x6b, 0x65,\n  0x64, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x74,\n  0x6f, 0x63, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x61, 0x69, 0x74, 0x68,\n  0x68, 0x65, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x6f, 0x66, 0x66,\n  0x65, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x6d,\n  0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x74, 0x68, 0x69, 0x6e,\n  0x6b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6d, 0x61,\n  0x6a, 0x6f, 0x72, 0x74, 0x72, 0x75, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x6f, 0x6e,\n  0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x76, 0x61, 0x6c,\n  0x69, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c,\n  0x6f, 0x67, 0x69, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x6f, 0x63, 0x63, 0x75,\n  0x72, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x66, 0x72, 0x65, 0x73, 0x68, 0x71, 0x75,\n  0x69, 0x74, 0x65, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x67, 0x72, 0x61, 0x64, 0x65,\n  0x6e, 0x65, 0x65, 0x64, 0x73, 0x75, 0x72, 0x62, 0x61, 0x6e, 0x66, 0x69, 0x67,\n  0x68, 0x74, 0x62, 0x61, 0x73, 0x69, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x61,\n  0x75, 0x74, 0x6f, 0x3b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x68, 0x74, 0x6d,\n  0x6c, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x59, 0x6f,\n  0x75, 0x72, 0x20, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63,\n  0x62, 0x72, 0x6f, 0x77, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x61,\n  0x77, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52,\n  0x69, 0x67, 0x68, 0x74, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x63,\n  0x68, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69,\n  0x6e, 0x6b, 0x73, 0x64, 0x6f, 0x75, 0x62, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63,\n  0x74, 0x68, 0x75, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x69,\n  0x65, 0x66, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x31,\n  0x30, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x75, 0x6e, 0x74, 0x69,\n  0x6c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70,\n  0x61, 0x63, 0x65, 0x71, 0x75, 0x65, 0x72, 0x79, 0x6a, 0x61, 0x6d, 0x65, 0x73,\n  0x65, 0x71, 0x75, 0x61, 0x6c, 0x74, 0x77, 0x69, 0x63, 0x65, 0x30, 0x2c, 0x30,\n  0x30, 0x30, 0x53, 0x74, 0x61, 0x72, 0x74, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,\n  0x6f, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x69, 0x67, 0x68,\n  0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x70, 0x6f,\n  0x73, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x77, 0x65, 0x65, 0x6b, 0x73,\n  0x61, 0x76, 0x6f, 0x69, 0x64, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x69, 0x6c,\n  0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x61,\n  0x6c, 0x70, 0x68, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b,\n  0x73, 0x72, 0x61, 0x74, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x63, 0x6c,\n  0x61, 0x69, 0x6d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x73,\n  0x73, 0x74, 0x61, 0x72, 0x73, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x3c, 0x2f, 0x68,\n  0x33, 0x3e, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6d,\n  0x75, 0x6c, 0x74, 0x69, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,\n  0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x6f,\n  0x6c, 0x69, 0x64, 0x28, 0x74, 0x68, 0x69, 0x73, 0x62, 0x72, 0x69, 0x6e, 0x67,\n  0x73, 0x68, 0x69, 0x70, 0x73, 0x73, 0x74, 0x61, 0x66, 0x66, 0x74, 0x72, 0x69,\n  0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x66,\n  0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x73,\n  0x20, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x67,\n  0x79, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x35, 0x70, 0x78, 0x3b,\n  0x45, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x65, 0x22, 0x63, 0x72, 0x6f,\n  0x73, 0x73, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x62,\n  0x6f, 0x78, 0x22, 0x3e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6c, 0x65, 0x61, 0x76,\n  0x65, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x67, 0x75,\n  0x65, 0x73, 0x74, 0x3c, 0x2f, 0x68, 0x34, 0x3e, 0x72, 0x6f, 0x62, 0x6f, 0x74,\n  0x68, 0x65, 0x61, 0x76, 0x79, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x73, 0x65, 0x76,\n  0x65, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x73,\n  0x69, 0x67, 0x6e, 0x73, 0x61, 0x77, 0x61, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x63,\n  0x65, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3e, 0x3c, 0x21, 0x2d, 0x2d, 0x65, 0x6e,\n  0x5f, 0x55, 0x53, 0x26, 0x23, 0x33, 0x39, 0x3b, 0x32, 0x30, 0x30, 0x70, 0x78,\n  0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x6a,\n  0x6f, 0x79, 0x61, 0x6a, 0x61, 0x78, 0x2e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x6d, 0x69, 0x74, 0x68, 0x55, 0x2e, 0x53, 0x2e, 0x20, 0x68, 0x6f, 0x6c, 0x64,\n  0x73, 0x70, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61,\n  0x76, 0x22, 0x3e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,\n  0x63, 0x6f, 0x6d, 0x65, 0x73, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x69,\n  0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x31, 0x39, 0x39, 0x30, 0x73, 0x72,\n  0x6f, 0x6d, 0x61, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6a, 0x61, 0x70, 0x61,\n  0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x77,\n  0x6e, 0x65, 0x72, 0x61, 0x67, 0x72, 0x65, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e,\n  0x61, 0x62, 0x75, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70, 0x65,\n  0x72, 0x61, 0x22, 0x2d, 0x2f, 0x2f, 0x57, 0x63, 0x61, 0x72, 0x64, 0x73, 0x68,\n  0x69, 0x6c, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x68, 0x6f, 0x74,\n  0x6f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70,\n  0x68, 0x70, 0x3f, 0x73, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x6c,\n  0x6c, 0x6f, 0x75, 0x69, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x70, 0x72, 0x6f,\n  0x6f, 0x66, 0x62, 0x72, 0x69, 0x65, 0x66, 0x72, 0x6f, 0x77, 0x22, 0x3e, 0x67,\n  0x65, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x6c, 0x6f, 0x6f, 0x6b,\n  0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x6e,\n  0x65, 0x74, 0x2f, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x74, 0x72, 0x79, 0x20, 0x7b,\n  0x0a, 0x76, 0x61, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x63, 0x6f, 0x73,\n  0x74, 0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x71,\n  0x75, 0x65, 0x73, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x62, 0x6f,\n  0x72, 0x68, 0x65, 0x6c, 0x70, 0x73, 0x63, 0x61, 0x75, 0x73, 0x65, 0x6d, 0x61,\n  0x67, 0x69, 0x63, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x69, 0x72,\n  0x32, 0x35, 0x30, 0x70, 0x78, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x73, 0x74, 0x65,\n  0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x67,\n  0x6c, 0x61, 0x73, 0x73, 0x73, 0x69, 0x64, 0x65, 0x73, 0x66, 0x75, 0x6e, 0x64,\n  0x73, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x6f,\n  0x75, 0x74, 0x68, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x61, 0x72, 0x69, 0x73,\n  0x67, 0x69, 0x76, 0x65, 0x73, 0x64, 0x75, 0x74, 0x63, 0x68, 0x74, 0x65, 0x78,\n  0x61, 0x73, 0x66, 0x72, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x7c,\n  0x7c, 0x5b, 0x5d, 0x3b, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,\n  0x2d, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x3c, 0x62,\n  0x72, 0x2f, 0x3e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x70, 0x65, 0x61, 0x6b,\n  0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x61, 0x6e,\n  0x6b, 0x73, 0x63, 0x61, 0x74, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32,\n  0x30, 0x70, 0x78, 0x3b, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x64, 0x65, 0x61, 0x6c,\n  0x73, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x35, 0x30, 0x70, 0x78, 0x3b, 0x75, 0x72,\n  0x6c, 0x3d, 0x22, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x6d, 0x6f, 0x75, 0x73, 0x65,\n  0x4d, 0x6f, 0x73, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x6d, 0x6f,\n  0x6e, 0x67, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e,\n  0x6f, 0x6e, 0x65, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x64, 0x63, 0x61, 0x72, 0x72,\n  0x79, 0x64, 0x72, 0x61, 0x66, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x70, 0x61,\n  0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72,\n  0x64, 0x65, 0x6c, 0x61, 0x79, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x70, 0x72, 0x6f,\n  0x76, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x64,\n  0x72, 0x75, 0x67, 0x73, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x61, 0x70, 0x72, 0x69,\n  0x6c, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x78,\n  0x61, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x73,\n  0x6c, 0x6f, 0x67, 0x69, 0x63, 0x56, 0x69, 0x65, 0x77, 0x20, 0x73, 0x65, 0x65,\n  0x6d, 0x73, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,\n  0x28, 0x32, 0x30, 0x30, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e,\n  0x6b, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x67, 0x72,\n  0x65, 0x65, 0x6b, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x72, 0x69, 0x6e, 0x67, 0x73,\n  0x72, 0x61, 0x74, 0x65, 0x64, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x77, 0x68, 0x6f,\n  0x73, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x42,\n  0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x6a, 0x6f, 0x6e, 0x65,\n  0x73, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x27, 0x29, 0x3b, 0x22, 0x3e, 0x29, 0x3b,\n  0x69, 0x66, 0x28, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x64, 0x61, 0x76, 0x69, 0x64,\n  0x68, 0x6f, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x72, 0x61, 0x69,\n  0x73, 0x65, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,\n  0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x62, 0x61, 0x72, 0x22,\n  0x3e, 0x2e, 0x73, 0x72, 0x63, 0x3d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x6c,\n  0x74, 0x3d, 0x22, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x68, 0x65, 0x6e, 0x72, 0x79,\n  0x32, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x74, 0x61,\n  0x6c, 0x79, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74,\n  0x61, 0x73, 0x74, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x74, 0x68, 0x69, 0x73,\n  0x2e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x67, 0x69,\n  0x72, 0x6c, 0x73, 0x2f, 0x63, 0x73, 0x73, 0x2f, 0x31, 0x30, 0x30, 0x25, 0x3b,\n  0x63, 0x6c, 0x75, 0x62, 0x73, 0x73, 0x74, 0x75, 0x66, 0x66, 0x62, 0x69, 0x62,\n  0x6c, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x31, 0x30, 0x30, 0x30, 0x6b,\n  0x6f, 0x72, 0x65, 0x61, 0x7d, 0x29, 0x3b, 0x0d, 0x0a, 0x62, 0x61, 0x6e, 0x64,\n  0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x38, 0x30,\n  0x70, 0x78, 0x3b, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x7b, 0x0d, 0x0a, 0x09, 0x09,\n  0x61, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x72, 0x69,\n  0x73, 0x68, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73,\n  0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x61, 0x68, 0x6f,\n  0x6f, 0x29, 0x5b, 0x30, 0x5d, 0x3b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x66, 0x69,\n  0x6e, 0x64, 0x73, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x64, 0x65, 0x62, 0x75, 0x67,\n  0x74, 0x61, 0x73, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x3d, 0x63, 0x65, 0x6c,\n  0x6c, 0x73, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x31, 0x32, 0x70, 0x78, 0x3b, 0x70,\n  0x72, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x6c, 0x73, 0x74, 0x75, 0x72, 0x6e,\n  0x73, 0x30, 0x78, 0x36, 0x30, 0x30, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x73, 0x70,\n  0x61, 0x69, 0x6e, 0x62, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x78, 0x65, 0x73,\n  0x6d, 0x69, 0x63, 0x72, 0x6f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x2d, 0x2d, 0x3e,\n  0x3c, 0x2f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x73, 0x74, 0x65, 0x76, 0x65, 0x2d,\n  0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x7d, 0x29, 0x3b, 0x0a,\n  0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x31, 0x39, 0x39, 0x46, 0x41,\n  0x51, 0x3c, 0x2f, 0x72, 0x6f, 0x67, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6e, 0x6b,\n  0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x38, 0x70, 0x78, 0x3b, 0x66, 0x65, 0x65,\n  0x64, 0x73, 0x3c, 0x68, 0x31, 0x3e, 0x3c, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x74,\n  0x65, 0x73, 0x74, 0x73, 0x32, 0x32, 0x70, 0x78, 0x3b, 0x64, 0x72, 0x69, 0x6e,\n  0x6b, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x6c, 0x65, 0x77, 0x69, 0x73, 0x73, 0x68,\n  0x61, 0x6c, 0x6c, 0x23, 0x30, 0x33, 0x39, 0x3b, 0x20, 0x66, 0x6f, 0x72, 0x20,\n  0x6c, 0x6f, 0x76, 0x65, 0x64, 0x77, 0x61, 0x73, 0x74, 0x65, 0x30, 0x30, 0x70,\n  0x78, 0x3b, 0x6a, 0x61, 0x3a, 0xe3, 0x82, 0x73, 0x69, 0x6d, 0x6f, 0x6e, 0x3c,\n  0x66, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x6d, 0x65, 0x65, 0x74,\n  0x73, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x61, 0x70, 0x74, 0x69,\n  0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x29, 0x20, 0x21, 0x3d, 0x20,\n  0x64, 0x72, 0x65, 0x73, 0x73, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x72, 0x6f, 0x6f,\n  0x6d, 0x73, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x6d,\n  0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x74,\n  0x65, 0x66, 0x75, 0x6e, 0x6e, 0x79, 0x74, 0x72, 0x65, 0x65, 0x73, 0x63, 0x6f,\n  0x6d, 0x2f, 0x22, 0x31, 0x2e, 0x6a, 0x70, 0x67, 0x77, 0x6d, 0x6f, 0x64, 0x65,\n  0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x6c, 0x65, 0x66,\n  0x74, 0x20, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x29,\n  0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x69, 0x72, 0x75,\n  0x73, 0x63, 0x68, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x6f,\n  0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x70, 0x61, 0x74, 0x63, 0x68, 0x3c, 0x21, 0x2d, 0x2d, 0x0a, 0x6f, 0x2d, 0x63,\n  0x61, 0x63, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2c,\n  0x30, 0x30, 0x30, 0x20, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x69, 0x2b, 0x2b, 0x29,\n  0x7b, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x27, 0x29, 0x5b, 0x30, 0x5d, 0x69, 0x64,\n  0x3d, 0x31, 0x30, 0x62, 0x6f, 0x74, 0x68, 0x3b, 0x6d, 0x65, 0x6e, 0x75, 0x20,\n  0x2e, 0x32, 0x2e, 0x6d, 0x69, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x6b, 0x65, 0x76,\n  0x69, 0x6e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x62,\n  0x72, 0x75, 0x63, 0x65, 0x32, 0x2e, 0x6a, 0x70, 0x67, 0x55, 0x52, 0x4c, 0x29,\n  0x2b, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x6c,\n  0x69, 0x63, 0x65, 0x68, 0x61, 0x72, 0x72, 0x79, 0x31, 0x32, 0x30, 0x22, 0x20,\n  0x73, 0x77, 0x65, 0x65, 0x74, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x6e, 0x61, 0x6d,\n  0x65, 0x3d, 0x64, 0x69, 0x65, 0x67, 0x6f, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73,\n  0x77, 0x69, 0x73, 0x73, 0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x23, 0x66, 0x66, 0x66,\n  0x3b, 0x22, 0x3e, 0x4c, 0x6f, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x74, 0x72,\n  0x65, 0x61, 0x74, 0x73, 0x68, 0x65, 0x65, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20,\n  0x31, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x6e, 0x74, 0x65,\n  0x6e, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x6a, 0x61, 0x3a, 0xe3, 0x83, 0x69,\n  0x64, 0x3d, 0x22, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x6f, 0x72, 0x73,\n  0x65, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2d, 0x62, 0x6f, 0x78, 0x2d, 0x64, 0x65,\n  0x6c, 0x74, 0x61, 0x0a, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x65, 0x61, 0x72, 0x73,\n  0x3a, 0x34, 0x38, 0x5a, 0x3c, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x75, 0x72,\n  0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x62,\n  0x61, 0x6b, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x3d, 0x20, 0x22, 0x22,\n  0x3b, 0x70, 0x68, 0x70, 0x22, 0x3e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x33,\n  0x70, 0x78, 0x3b, 0x62, 0x72, 0x69, 0x61, 0x6e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,\n  0x73, 0x69, 0x7a, 0x65, 0x3d, 0x6f, 0x3d, 0x25, 0x32, 0x46, 0x20, 0x6a, 0x6f,\n  0x69, 0x6e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x69,\n  0x6d, 0x67, 0x22, 0x3e, 0x2c, 0x20, 0x66, 0x6a, 0x73, 0x69, 0x6d, 0x67, 0x22,\n  0x20, 0x22, 0x29, 0x5b, 0x30, 0x5d, 0x4d, 0x54, 0x6f, 0x70, 0x42, 0x54, 0x79,\n  0x70, 0x65, 0x22, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x44, 0x61, 0x6e, 0x73, 0x6b,\n  0x63, 0x7a, 0x65, 0x63, 0x68, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x6b, 0x6e, 0x6f,\n  0x77, 0x73, 0x3c, 0x2f, 0x68, 0x35, 0x3e, 0x66, 0x61, 0x71, 0x22, 0x3e, 0x7a,\n  0x68, 0x2d, 0x63, 0x6e, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x2d, 0x31, 0x22, 0x29,\n  0x3b, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x62, 0x6c, 0x75, 0x65, 0x73, 0x74, 0x72,\n  0x75, 0x6c, 0x79, 0x64, 0x61, 0x76, 0x69, 0x73, 0x2e, 0x6a, 0x73, 0x27, 0x3b,\n  0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x73, 0x74, 0x65, 0x65, 0x6c, 0x20, 0x79, 0x6f,\n  0x75, 0x20, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6a,\n  0x65, 0x73, 0x75, 0x73, 0x31, 0x30, 0x30, 0x25, 0x20, 0x6d, 0x65, 0x6e, 0x75,\n  0x2e, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x77, 0x61, 0x6c, 0x65, 0x73, 0x72, 0x69,\n  0x73, 0x6b, 0x73, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x67,\n  0x62, 0x2d, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x67, 0x69, 0x66,\n  0x22, 0x20, 0x76, 0x65, 0x67, 0x61, 0x73, 0x64, 0x61, 0x6e, 0x73, 0x6b, 0x65,\n  0x65, 0x73, 0x74, 0x69, 0x73, 0x68, 0x71, 0x69, 0x70, 0x73, 0x75, 0x6f, 0x6d,\n  0x69, 0x73, 0x6f, 0x62, 0x72, 0x65, 0x64, 0x65, 0x73, 0x64, 0x65, 0x65, 0x6e,\n  0x74, 0x72, 0x65, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x70, 0x75, 0x65, 0x64, 0x65,\n  0x61, 0xc3, 0xb1, 0x6f, 0x73, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x74, 0x69, 0x65,\n  0x6e, 0x65, 0x68, 0x61, 0x73, 0x74, 0x61, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x70,\n  0x61, 0x72, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x75, 0x65, 0x76,\n  0x6f, 0x68, 0x61, 0x63, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6d, 0x69,\n  0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x6d, 0x75, 0x6e, 0x64, 0x6f,\n  0x61, 0x71, 0x75, 0xc3, 0xad, 0x64, 0xc3, 0xad, 0x61, 0x73, 0x73, 0xc3, 0xb3,\n  0x6c, 0x6f, 0x61, 0x79, 0x75, 0x64, 0x61, 0x66, 0x65, 0x63, 0x68, 0x61, 0x74,\n  0x6f, 0x64, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x6e, 0x6f,\n  0x73, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x61, 0x73, 0x73, 0x69,\n  0x74, 0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x61, 0x68, 0x6f, 0x72, 0x61,\n  0x6c, 0x75, 0x67, 0x61, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x65, 0x73, 0x74,\n  0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x61,\n  0x6e, 0x74, 0x65, 0x73, 0x66, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61,\n  0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x61,\n  0x6c, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x6f,\n  0x71, 0x75, 0x69, 0x65, 0x6e, 0x6d, 0x65, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x64,\n  0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0xc3, 0xa1, 0x76,\n  0x65, 0x63, 0x65, 0x73, 0x64, 0x65, 0x63, 0x69, 0x72, 0x6a, 0x6f, 0x73, 0xc3,\n  0xa9, 0x65, 0x73, 0x74, 0x61, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x72,\n  0x75, 0x70, 0x6f, 0x68, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x6c, 0x6c, 0x6f, 0x73,\n  0x74, 0x65, 0x6e, 0x67, 0x6f, 0x61, 0x6d, 0x69, 0x67, 0x6f, 0x63, 0x6f, 0x73,\n  0x61, 0x73, 0x6e, 0x69, 0x76, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x6d,\n  0x69, 0x73, 0x6d, 0x61, 0x61, 0x69, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x6c, 0x69,\n  0x6f, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x68, 0x61, 0x63, 0x69, 0x61, 0x66, 0x61,\n  0x76, 0x6f, 0x72, 0x6a, 0x75, 0x6e, 0x69, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x65,\n  0x70, 0x75, 0x6e, 0x74, 0x6f, 0x62, 0x75, 0x65, 0x6e, 0x6f, 0x61, 0x75, 0x74,\n  0x6f, 0x72, 0x61, 0x62, 0x72, 0x69, 0x6c, 0x62, 0x75, 0x65, 0x6e, 0x61, 0x74,\n  0x65, 0x78, 0x74, 0x6f, 0x6d, 0x61, 0x72, 0x7a, 0x6f, 0x73, 0x61, 0x62, 0x65,\n  0x72, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x75, 0x65, 0x67, 0x6f, 0x63, 0xc3,\n  0xb3, 0x6d, 0x6f, 0x65, 0x6e, 0x65, 0x72, 0x6f, 0x6a, 0x75, 0x65, 0x67, 0x6f,\n  0x70, 0x65, 0x72, 0xc3, 0xba, 0x68, 0x61, 0x62, 0x65, 0x72, 0x65, 0x73, 0x74,\n  0x6f, 0x79, 0x6e, 0x75, 0x6e, 0x63, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x76,\n  0x61, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x62, 0x72,\n  0x6f, 0x67, 0x75, 0x73, 0x74, 0x61, 0x69, 0x67, 0x75, 0x61, 0x6c, 0x76, 0x6f,\n  0x74, 0x6f, 0x73, 0x63, 0x61, 0x73, 0x6f, 0x73, 0x67, 0x75, 0xc3, 0xad, 0x61,\n  0x70, 0x75, 0x65, 0x64, 0x6f, 0x73, 0x6f, 0x6d, 0x6f, 0x73, 0x61, 0x76, 0x69,\n  0x73, 0x6f, 0x75, 0x73, 0x74, 0x65, 0x64, 0x64, 0x65, 0x62, 0x65, 0x6e, 0x6e,\n  0x6f, 0x63, 0x68, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61, 0x66, 0x61, 0x6c, 0x74,\n  0x61, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x64, 0x69,\n  0x63, 0x68, 0x6f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x63, 0x6c, 0x61, 0x76, 0x65,\n  0x63, 0x61, 0x73, 0x61, 0x73, 0x6c, 0x65, 0xc3, 0xb3, 0x6e, 0x70, 0x6c, 0x61,\n  0x7a, 0x6f, 0x6c, 0x61, 0x72, 0x67, 0x6f, 0x6f, 0x62, 0x72, 0x61, 0x73, 0x76,\n  0x69, 0x73, 0x74, 0x61, 0x61, 0x70, 0x6f, 0x79, 0x6f, 0x6a, 0x75, 0x6e, 0x74,\n  0x6f, 0x74, 0x72, 0x61, 0x74, 0x61, 0x76, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x72,\n  0x65, 0x61, 0x72, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x68, 0x65, 0x6d, 0x6f, 0x73,\n  0x63, 0x69, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x69, 0x73,\n  0x6f, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x6e, 0xc3,\n  0xa1, 0x72, 0x65, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x72,\n  0x6f, 0x63, 0x65, 0x72, 0x63, 0x61, 0x70, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61,\n  0x70, 0x65, 0x6c, 0x6d, 0x65, 0x6e, 0x6f, 0x72, 0xc3, 0xba, 0x74, 0x69, 0x6c,\n  0x63, 0x6c, 0x61, 0x72, 0x6f, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x63, 0x61, 0x6c,\n  0x6c, 0x65, 0x70, 0x6f, 0x6e, 0x65, 0x72, 0x74, 0x61, 0x72, 0x64, 0x65, 0x6e,\n  0x61, 0x64, 0x69, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x73, 0x69, 0x67, 0x75,\n  0x65, 0x65, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6c, 0x6f, 0x63, 0x6f,\n  0x63, 0x68, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x73, 0x6d, 0x61, 0x64, 0x72, 0x65,\n  0x63, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0xc3,\n  0xb1, 0x6f, 0x71, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61, 0x73, 0x61, 0x72, 0x62,\n  0x61, 0x6e, 0x63, 0x6f, 0x68, 0x69, 0x6a, 0x6f, 0x73, 0x76, 0x69, 0x61, 0x6a,\n  0x65, 0x70, 0x61, 0x62, 0x6c, 0x6f, 0xc3, 0xa9, 0x73, 0x74, 0x65, 0x76, 0x69,\n  0x65, 0x6e, 0x65, 0x72, 0x65, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x61, 0x72,\n  0x66, 0x6f, 0x6e, 0x64, 0x6f, 0x63, 0x61, 0x6e, 0x61, 0x6c, 0x6e, 0x6f, 0x72,\n  0x74, 0x65, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x61, 0x75, 0x73, 0x61, 0x74,\n  0x6f, 0x6d, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x73, 0x6c, 0x75, 0x6e, 0x65,\n  0x73, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x76, 0x65,\n  0x6e, 0x64, 0x6f, 0x70, 0x65, 0x73, 0x61, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x73,\n  0x74, 0x65, 0x6e, 0x67, 0x61, 0x6d, 0x61, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x65,\n  0x76, 0x61, 0x70, 0x61, 0x64, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x76,\n  0x61, 0x6d, 0x6f, 0x73, 0x7a, 0x6f, 0x6e, 0x61, 0x73, 0x61, 0x6d, 0x62, 0x6f,\n  0x73, 0x62, 0x61, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x61, 0x62,\n  0x75, 0x73, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x75, 0x62, 0x69, 0x72,\n  0x72, 0x69, 0x6f, 0x6a, 0x61, 0x76, 0x69, 0x76, 0x69, 0x72, 0x67, 0x72, 0x61,\n  0x64, 0x6f, 0x63, 0x68, 0x69, 0x63, 0x61, 0x61, 0x6c, 0x6c, 0xc3, 0xad, 0x6a,\n  0x6f, 0x76, 0x65, 0x6e, 0x64, 0x69, 0x63, 0x68, 0x61, 0x65, 0x73, 0x74, 0x61,\n  0x6e, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x72, 0x73, 0x75,\n  0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x6f, 0x73, 0x66, 0x69, 0x6e, 0x65, 0x73,\n  0x6c, 0x6c, 0x61, 0x6d, 0x61, 0x62, 0x75, 0x73, 0x63, 0x6f, 0xc3, 0xa9, 0x73,\n  0x74, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x70,\n  0x6c, 0x61, 0x7a, 0x61, 0x68, 0x75, 0x6d, 0x6f, 0x72, 0x70, 0x61, 0x67, 0x61,\n  0x72, 0x6a, 0x75, 0x6e, 0x74, 0x61, 0x64, 0x6f, 0x62, 0x6c, 0x65, 0x69, 0x73,\n  0x6c, 0x61, 0x73, 0x62, 0x6f, 0x6c, 0x73, 0x61, 0x62, 0x61, 0xc3, 0xb1, 0x6f,\n  0x68, 0x61, 0x62, 0x6c, 0x61, 0x6c, 0x75, 0x63, 0x68, 0x61, 0xc3, 0x81, 0x72,\n  0x65, 0x61, 0x64, 0x69, 0x63, 0x65, 0x6e, 0x6a, 0x75, 0x67, 0x61, 0x72, 0x6e,\n  0x6f, 0x74, 0x61, 0x73, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0xc3,\n  0xa1, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x61, 0x62,\n  0x61, 0x6a, 0x6f, 0x65, 0x73, 0x74, 0xc3, 0xa9, 0x67, 0x75, 0x73, 0x74, 0x6f,\n  0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x61, 0x72, 0x69, 0x6f, 0x66, 0x69, 0x72,\n  0x6d, 0x61, 0x63, 0x6f, 0x73, 0x74, 0x6f, 0x66, 0x69, 0x63, 0x68, 0x61, 0x70,\n  0x6c, 0x61, 0x74, 0x61, 0x68, 0x6f, 0x67, 0x61, 0x72, 0x61, 0x72, 0x74, 0x65,\n  0x73, 0x6c, 0x65, 0x79, 0x65, 0x73, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6d, 0x75,\n  0x73, 0x65, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x73,\n  0x6d, 0x69, 0x74, 0x61, 0x64, 0x63, 0x69, 0x65, 0x6c, 0x6f, 0x63, 0x68, 0x69,\n  0x63, 0x6f, 0x6d, 0x69, 0x65, 0x64, 0x6f, 0x67, 0x61, 0x6e, 0x61, 0x72, 0x73,\n  0x61, 0x6e, 0x74, 0x6f, 0x65, 0x74, 0x61, 0x70, 0x61, 0x64, 0x65, 0x62, 0x65,\n  0x73, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x72, 0x65, 0x64, 0x65, 0x73, 0x73, 0x69,\n  0x65, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x61,\n  0x64, 0x75, 0x64, 0x61, 0x73, 0x64, 0x65, 0x73, 0x65, 0x6f, 0x76, 0x69, 0x65,\n  0x6a, 0x6f, 0x64, 0x65, 0x73, 0x65, 0x61, 0x61, 0x67, 0x75, 0x61, 0x73, 0x26,\n  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6f,\n  0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x76, 0x65,\n  0x6e, 0x74, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74,\n  0x65, 0x6d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65,\n  0x72, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,\n  0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6d,\n  0x65, 0x64, 0x69, 0x75, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x75,\n  0x6d, 0x62, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x73,\n  0x75, 0x6c, 0x74, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73, 0x63, 0x72, 0x65,\n  0x65, 0x6e, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61,\n  0x6c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,\n  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,\n  0x70, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x6d, 0x6f,\n  0x62, 0x69, 0x6c, 0x65, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x68, 0x6f,\n  0x74, 0x6f, 0x73, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69,\n  0x6f, 0x6e, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x73, 0x6f, 0x63, 0x69, 0x61,\n  0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,\n  0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x74,\n  0x69, 0x74, 0x6c, 0x65, 0x3e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x65,\n  0x6e, 0x67, 0x74, 0x68, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x66, 0x72, 0x69,\n  0x65, 0x6e, 0x64, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x61, 0x75, 0x74, 0x68,\n  0x6f, 0x72, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x65, 0x76, 0x69, 0x65,\n  0x77, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,\n  0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65,\n  0x78, 0x70, 0x61, 0x6e, 0x64, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x6f,\n  0x72, 0x6d, 0x61, 0x74, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x70, 0x6f, 0x69,\n  0x6e, 0x74, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73,\n  0x6f, 0x6e, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67,\n  0x6e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73,\n  0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x6e, 0x61,\n  0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x66, 0x69, 0x67,\n  0x75, 0x72, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x63, 0x75, 0x73, 0x74,\n  0x6f, 0x6d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x74, 0x74, 0x65,\n  0x72, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,\n  0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75,\n  0x70, 0x6c, 0x6f, 0x61, 0x64, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6d, 0x65,\n  0x74, 0x68, 0x6f, 0x64, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x73, 0x63, 0x68,\n  0x6f, 0x6f, 0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x61, 0x64,\n  0x6f, 0x77, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65,\n  0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,\n  0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x63,\n  0x68, 0x72, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6e, 0x6f,\n  0x74, 0x69, 0x63, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x64,\n  0x69, 0x6e, 0x67, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f,\n  0x72, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x71, 0x75, 0x61, 0x72,\n  0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,\n  0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6c,\n  0x61, 0x74, 0x65, 0x73, 0x74, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72,\n  0x61, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x74, 0x72,\n  0x6f, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x64,\n  0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,\n  0x64, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,\n  0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x70,\n  0x6c, 0x61, 0x63, 0x65, 0x73, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,\n  0x61, 0x74, 0x69, 0x63, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72,\n  0x65, 0x61, 0x6d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x61,\n  0x63, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68,\n  0x74, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3e,\n  0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x76,\n  0x61, 0x6c, 0x6c, 0x65, 0x79, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x65,\n  0x61, 0x64, 0x65, 0x72, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x65, 0x63,\n  0x6f, 0x6e, 0x64, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x72,\n  0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e,\n  0x67, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,\n  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x73,\n  0x74, 0x61, 0x74, 0x65, 0x73, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x76, 0x69,\n  0x73, 0x75, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x76, 0x6f, 0x6c,\n  0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65,\n  0x75, 0x6d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,\n  0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79,\n  0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6d,\n  0x61, 0x72, 0x6b, 0x65, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x68,\n  0x61, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x65, 0x66,\n  0x6f, 0x72, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6d, 0x6f, 0x6d, 0x65,\n  0x6e, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6d, 0x6f, 0x74, 0x69, 0x6f,\n  0x6e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,\n  0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x65,\n  0x78, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x45, 0x75,\n  0x72, 0x6f, 0x70, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x6c, 0x65, 0x67,\n  0x61, 0x63, 0x79, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x65, 0x6e, 0x6f, 0x75,\n  0x67, 0x68, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x65,\n  0x72, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,\n  0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,\n  0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,\n  0x70, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x74,\n  0x68, 0x65, 0x72, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x70,\n  0x6c, 0x79, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x65, 0x73, 0x63, 0x61, 0x70,\n  0x65, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x63, 0x68, 0x75, 0x72, 0x63, 0x68,\n  0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x63,\n  0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x6d, 0x65,\n  0x6d, 0x6f, 0x72, 0x79, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x6c,\n  0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62,\n  0x65, 0x72, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72,\n  0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,\n  0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73,\n  0x69, 0x6c, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x64, 0x65,\n  0x6c, 0x65, 0x74, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x62, 0x72, 0x6f,\n  0x77, 0x73, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,\n  0x61, 0x6c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x77, 0x69, 0x64, 0x67, 0x65,\n  0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,\n  0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63,\n  0x6c, 0x61, 0x69, 0x6d, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x61,\n  0x66, 0x65, 0x74, 0x79, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x70, 0x69,\n  0x72, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x65,\n  0x61, 0x64, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x65, 0x64, 0x65,\n  0x64, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65,\n  0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x62,\n  0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x63, 0x68,\n  0x61, 0x72, 0x67, 0x65, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x66, 0x61, 0x63,\n  0x74, 0x6f, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x62, 0x61, 0x73,\n  0x65, 0x64, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69,\n  0x67, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64,\n  0x68, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x69,\n  0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6c,\n  0x77, 0x61, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x6f, 0x74,\n  0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x29, 0x7b, 0x76, 0x61,\n  0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6f, 0x72, 0x61, 0x6e, 0x67,\n  0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x28,\n  0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x62,\n  0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,\n  0x76, 0x69, 0x65, 0x77, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x69, 0x73,\n  0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x69,\n  0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x62, 0x65, 0x61, 0x75, 0x74,\n  0x79, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74,\n  0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x61,\n  0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x68,\n  0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x72,\n  0x69, 0x6e, 0x67, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x62, 0x69,\n  0x6c, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6c,\n  0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,\n  0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x63,\n  0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x73,\n  0x6c, 0x61, 0x6e, 0x64, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x63, 0x6f, 0x6f,\n  0x6b, 0x69, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6d, 0x61, 0x7a,\n  0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x64, 0x76, 0x69, 0x63,\n  0x65, 0x69, 0x6e, 0x3c, 0x2f, 0x61, 0x3e, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20,\n  0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x42,\n  0x45, 0x47, 0x49, 0x4e, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x73, 0x74,\n  0x61, 0x72, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x68, 0x65, 0x69,\n  0x67, 0x68, 0x74, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x6c, 0x61,\n  0x6e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x69, 0x72,\n  0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,\n  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x6d,\n  0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x0a,\n  0x0a, 0x4f, 0x6e, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x6d, 0x65, 0x6e,\n  0x75, 0x22, 0x3e, 0x50, 0x68, 0x69, 0x6c, 0x69, 0x70, 0x61, 0x77, 0x61, 0x72,\n  0x64, 0x73, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x6d, 0x70, 0x6f, 0x72,\n  0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,\n  0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,\n  0x70, 0x6f, 0x72, 0x74, 0x73, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x77, 0x65,\n  0x65, 0x6b, 0x6c, 0x79, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x62, 0x65, 0x68,\n  0x69, 0x6e, 0x64, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x6c, 0x6f, 0x67, 0x67,\n  0x65, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x3c,\n  0x2f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,\n  0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69,\n  0x73, 0x73, 0x75, 0x65, 0x64, 0x33, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x63, 0x61,\n  0x6e, 0x61, 0x64, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x63, 0x68,\n  0x65, 0x6d, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x7a,\n  0x69, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x22,\n  0x3e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x65,\n  0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6d,\n  0x61, 0x72, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x63, 0x61,\n  0x6d, 0x65, 0x72, 0x61, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x5f, 0x66, 0x6f,\n  0x72, 0x6d, 0x22, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x73, 0x74, 0x72, 0x65,\n  0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x2e, 0x67, 0x69, 0x66, 0x22,\n  0x20, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,\n  0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73,\n  0x75, 0x72, 0x76, 0x69, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x66, 0x65,\n  0x6d, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x69, 0x7a,\n  0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x74, 0x65, 0x78, 0x74,\n  0x22, 0x3e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x74, 0x68, 0x61, 0x6e, 0x6b,\n  0x73, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,\n  0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x61, 0x6e, 0x79, 0x6f, 0x6e, 0x65, 0x41,\n  0x66, 0x72, 0x69, 0x63, 0x61, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x72, 0x65,\n  0x63, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3c, 0x62, 0x72,\n  0x20, 0x2f, 0x3e, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x72, 0x69, 0x63,\n  0x65, 0x73, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x7c, 0x7c, 0x20, 0x7b, 0x7d,\n  0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,\n  0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x77, 0x72, 0x61, 0x70, 0x22, 0x3e, 0x66,\n  0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x6d, 0x69,\n  0x6e, 0x75, 0x74, 0x65, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x6f,\n  0x74, 0x65, 0x73, 0x31, 0x35, 0x30, 0x70, 0x78, 0x7c, 0x65, 0x73, 0x74, 0x61,\n  0x74, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c,\n  0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b,\n  0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x31,\n  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x70, 0x72,\n  0x69, 0x6e, 0x63, 0x65, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x2e, 0x70, 0x6e,\n  0x67, 0x22, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x65,\n  0x73, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x73, 0x6f, 0x75, 0x6e, 0x64,\n  0x73, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,\n  0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x26,\n  0x61, 0x6d, 0x70, 0x3b, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2e, 0x20,\n  0x57, 0x69, 0x74, 0x68, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x6f, 0x77, 0x6e,\n  0x65, 0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x66,\n  0x69, 0x74, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x61, 0x6e, 0x6e, 0x75, 0x61,\n  0x6c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74,\n  0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6c,\n  0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x69, 0x73,\n  0x72, 0x61, 0x65, 0x6c, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63,\n  0x69, 0x64, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64,\n  0x65, 0x72, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x62, 0x72, 0x61, 0x6e, 0x63,\n  0x68, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b,\n  0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x3c, 0x72,\n  0x61, 0x63, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x2d,\n  0x26, 0x67, 0x74, 0x3b, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x65, 0x78,\n  0x75, 0x61, 0x6c, 0x62, 0x75, 0x72, 0x65, 0x61, 0x75, 0x2e, 0x6a, 0x70, 0x67,\n  0x22, 0x20, 0x31, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x6f, 0x62, 0x74, 0x61, 0x69,\n  0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,\n  0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x6d,\n  0x65, 0x6e, 0x75, 0x22, 0x20, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x74, 0x6f,\n  0x64, 0x61, 0x79, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x63, 0x6f, 0x75,\n  0x6e, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,\n  0x6c, 0x79, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,\n  0x74, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,\n  0x74, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x29, 0x3b, 0x76, 0x61, 0x72, 0x20, 0x66,\n  0x6f, 0x72, 0x65, 0x73, 0x74, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x65, 0x72,\n  0x72, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x65, 0x6c,\n  0x73, 0x65, 0x7b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x67,\n  0x3c, 0x2f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x6e,\n  0x2e, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,\n  0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x31, 0x30, 0x70, 0x78, 0x20, 0x30, 0x70,\n  0x72, 0x61, 0x67, 0x6d, 0x61, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x6a, 0x75,\n  0x6e, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x70, 0x6c, 0x61,\n  0x63, 0x65, 0x64, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x75, 0x67,\n  0x69, 0x6e, 0x35, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x70, 0x61, 0x67, 0x65, 0x22,\n  0x3e, 0x62, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x28,\n  0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,\n  0x63, 0x6f, 0x75, 0x6e, 0x74, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x73, 0x63,\n  0x68, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x66, 0x69, 0x6c,\n  0x6c, 0x65, 0x64, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x72, 0x65, 0x61, 0x64,\n  0x65, 0x72, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x28, 0x61, 0x70, 0x70, 0x65, 0x61,\n  0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3e,\n  0x62, 0x6f, 0x64, 0x79, 0x22, 0x3e, 0x0a, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x54,\n  0x68, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x65, 0x65, 0x69, 0x6e, 0x67, 0x6a, 0x65,\n  0x72, 0x73, 0x65, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x3c, 0x2f, 0x76, 0x65, 0x72,\n  0x69, 0x66, 0x79, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6a, 0x75,\n  0x72, 0x79, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,\n  0x65, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73,\n  0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x6e,\n  0x61, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x6f,\n  0x78, 0x22, 0x3e, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x44, 0x61,\n  0x76, 0x69, 0x64, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x62, 0x6c,\n  0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70, 0x72, 0x69, 0x6c,\n  0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,\n  0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x62,\n  0x6f, 0x61, 0x72, 0x64, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x61,\n  0x6d, 0x70, 0x75, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x7c, 0x7c, 0x20,\n  0x5b, 0x5d, 0x3b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x67, 0x75, 0x69, 0x74,\n  0x61, 0x72, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x77, 0x69, 0x64, 0x74, 0x68,\n  0x3a, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20,\n  0x2e, 0x70, 0x68, 0x70, 0x22, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x6c,\n  0x61, 0x79, 0x65, 0x72, 0x73, 0x77, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x73, 0x74,\n  0x6f, 0x72, 0x65, 0x73, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x77, 0x65,\n  0x64, 0x65, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x69,\n  0x6c, 0x79, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e,\n  0x67, 0x0a, 0x0a, 0x57, 0x68, 0x69, 0x6c, 0x74, 0x61, 0x79, 0x6c, 0x6f, 0x72,\n  0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x66,\n  0x72, 0x65, 0x6e, 0x63, 0x68, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x29,\n  0x20, 0x2b, 0x20, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x62, 0x75, 0x79,\n  0x69, 0x6e, 0x67, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x6d, 0x62,\n  0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x6f, 0x70, 0x70, 0x69, 0x6e,\n  0x67, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e,\n  0x76, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x6d,\n  0x61, 0x6a, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x6d, 0x61,\n  0x72, 0x74, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x68, 0x61, 0x70,\n  0x70, 0x65, 0x6e, 0x3c, 0x2f, 0x6e, 0x61, 0x76, 0x3e, 0x6b, 0x61, 0x6e, 0x73,\n  0x61, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x49, 0x6d, 0x61, 0x67, 0x65,\n  0x73, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,\n  0x68, 0x73, 0x70, 0x61, 0x63, 0x65, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x20,\n  0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f,\n  0x6c, 0x73, 0x6b, 0x69, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6a, 0x6f, 0x72,\n  0x64, 0x61, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72,\n  0x74, 0x20, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2e, 0x68, 0x74, 0x6d,\n  0x6c, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x3e, 0x30, 0x31, 0x2e, 0x6a, 0x70, 0x67,\n  0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6d,\n  0x69, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x49, 0x53,\n  0x42, 0x4e, 0x20, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x67, 0x75, 0x69,\n  0x64, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x65, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x78, 0x6d, 0x6c, 0x22,\n  0x20, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c,\n  0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x45, 0x78, 0x70, 0x3a,\n  0x68, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x76, 0x69,\n  0x72, 0x67, 0x69, 0x6e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x74,\n  0x72, 0x3e, 0x0d, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x76, 0x61,\n  0x72, 0x20, 0x3e, 0x27, 0x29, 0x3b, 0x0a, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,\n  0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0a, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61,\n  0x62, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x67, 0x61, 0x6c, 0x65, 0x67, 0x6f, 0x6d,\n  0x61, 0x67, 0x79, 0x61, 0x72, 0x70, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x73, 0x72,\n  0x70, 0x73, 0x6b, 0x69, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xe4, 0xb8, 0xad,\n  0xe6, 0x96, 0x87, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe7, 0xb9, 0x81, 0xe9,\n  0xab, 0x94, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe5, 0x9b,\n  0xbd, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa,\n  0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8,\n  0xae, 0xba, 0xe5, 0x9d, 0x9b, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9c,\n  0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0xaa,\n  0xe4, 0xba, 0xba, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0x87, 0xaa, 0xe5,\n  0xb7, 0xb1, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c,\n  0x8b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb,\n  0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xab, 0x99, 0xe6,\n  0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0xe4, 0xb8,\n  0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x94, 0xa8,\n  0xe6, 0x88, 0xb7, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe4, 0xbd, 0x9c, 0xe8,\n  0x80, 0x85, 0xe6, 0x8a, 0x80, 0xe6, 0x9c, 0xaf, 0xe9, 0x97, 0xae, 0xe9, 0xa2,\n  0x98, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd,\n  0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8,\n  0xbd, 0xaf, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe4, 0xb8,\n  0xbb, 0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe8, 0xa7, 0x86,\n  0xe9, 0xa2, 0x91, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0xb3, 0xa8, 0xe5,\n  0x86, 0x8c, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x94, 0xb6, 0xe8, 0x97,\n  0x8f, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90,\n  0xe5, 0xb8, 0x82, 0xe5, 0x9c, 0xba, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe7,\n  0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xbb,\n  0x80, 0xe4, 0xb9, 0x88, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe7, 0x94, 0x9f,\n  0xe6, 0xb4, 0xbb, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x8f, 0x91, 0xe5,\n  0xb1, 0x95, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c,\n  0xba, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xbb, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0,\n  0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe6,\n  0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x85, 0xb3, 0xe4, 0xba, 0x8e, 0xe6, 0x9b,\n  0xb4, 0xe5, 0xa4, 0x9a, 0xe8, 0xbf, 0x99, 0xe4, 0xb8, 0xaa, 0xe7, 0xb3, 0xbb,\n  0xe7, 0xbb, 0x9f, 0xe7, 0x9f, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0xb8, 0xb8, 0xe6,\n  0x88, 0x8f, 0xe5, 0xb9, 0xbf, 0xe5, 0x91, 0x8a, 0xe5, 0x85, 0xb6, 0xe4, 0xbb,\n  0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8,\n  0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xbc, 0x9a, 0xe5, 0x91, 0x98, 0xe8,\n  0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe7, 0x89,\n  0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xb5, 0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x96,\n  0xe7, 0x95, 0x8c, 0xe8, 0xae, 0xbe, 0xe8, 0xae, 0xa1, 0xe5, 0x85, 0x8d, 0xe8,\n  0xb4, 0xb9, 0xe6, 0x95, 0x99, 0xe8, 0x82, 0xb2, 0xe5, 0x8a, 0xa0, 0xe5, 0x85,\n  0xa5, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbb, 0x96, 0xe4, 0xbb, 0xac,\n  0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x8d, 0x9a, 0xe5, 0xae, 0xa2, 0xe7,\n  0x8e, 0xb0, 0xe5, 0x9c, 0xa8, 0xe4, 0xb8, 0x8a, 0xe6, 0xb5, 0xb7, 0xe5, 0xa6,\n  0x82, 0xe4, 0xbd, 0x95, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe7, 0x95, 0x99,\n  0xe8, 0xa8, 0x80, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xa4, 0xbe, 0xe5,\n  0x8c, 0xba, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe6, 0x9c, 0xac, 0xe7, 0xab,\n  0x99, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,\n  0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x9b, 0xbd, 0xe9, 0x99, 0x85, 0xe9,\n  0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6, 0xe5, 0xbb,\n  0xba, 0xe8, 0xae, 0xbe, 0xe6, 0x9c, 0x8b, 0xe5, 0x8f, 0x8b, 0xe9, 0x98, 0x85,\n  0xe8, 0xaf, 0xbb, 0xe6, 0xb3, 0x95, 0xe5, 0xbe, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7,\n  0xbd, 0xae, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe9, 0x80, 0x89, 0xe6, 0x8b,\n  0xa9, 0xe8, 0xbf, 0x99, 0xe6, 0xa0, 0xb7, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,\n  0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe5,\n  0x9b, 0xa0, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x9c,\n  0x80, 0xe5, 0x90, 0x8e, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe4, 0xb8, 0x8d,\n  0xe8, 0x83, 0xbd, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xa1, 0x8c, 0xe4,\n  0xb8, 0x9a, 0xe7, 0xa7, 0x91, 0xe6, 0x8a, 0x80, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,\n  0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x88, 0xe4, 0xbd, 0x9c,\n  0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0xb6, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc, 0x9a, 0xe7,\n  0xa0, 0x94, 0xe7, 0xa9, 0xb6, 0xe4, 0xb8, 0x93, 0xe4, 0xb8, 0x9a, 0xe5, 0x85,\n  0xa8, 0xe9, 0x83, 0xa8, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xbf, 0x99,\n  0xe9, 0x87, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x98, 0xaf, 0xe5, 0xbc, 0x80, 0xe5,\n  0xa7, 0x8b, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xb5, 0xe8, 0x84,\n  0x91, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c,\n  0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x96, 0x87, 0xe5, 0x8c, 0x96, 0xe8,\n  0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe5, 0xad,\n  0xa6, 0xe4, 0xb9, 0xa0, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb5, 0x8f,\n  0xe8, 0xa7, 0x88, 0xe6, 0x8a, 0x95, 0xe8, 0xb5, 0x84, 0xe5, 0xb7, 0xa5, 0xe7,\n  0xa8, 0x8b, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe6, 0x80, 0x8e, 0xe4, 0xb9,\n  0x88, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,\n  0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe8,\n  0xb5, 0x84, 0xe8, 0xae, 0xaf, 0xe5, 0x9f, 0x8e, 0xe5, 0xb8, 0x82, 0xe6, 0x96,\n  0xb9, 0xe6, 0xb3, 0x95, 0xe7, 0x94, 0xb5, 0xe5, 0xbd, 0xb1, 0xe6, 0x8b, 0x9b,\n  0xe8, 0x81, 0x98, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xbb, 0xbb, 0xe4,\n  0xbd, 0x95, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,\n  0xae, 0xe7, 0xbe, 0x8e, 0xe5, 0x9b, 0xbd, 0xe6, 0xb1, 0xbd, 0xe8, 0xbd, 0xa6,\n  0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe4,\n  0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x89,\n  0x80, 0xe4, 0xbb, 0xa5, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe6, 0x98, 0xbe,\n  0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x8d, 0x95, 0xe4,\n  0xbd, 0x8d, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x9e,\n  0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0x97, 0x85, 0xe6, 0xb8, 0xb8,\n  0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0xb7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe7,\n  0xb3, 0xbb, 0xe5, 0x88, 0x97, 0xe7, 0xbd, 0x91, 0xe5, 0x8f, 0x8b, 0xe5, 0xb8,\n  0x96, 0xe5, 0xad, 0x90, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe9, 0xa2, 0x91,\n  0xe9, 0x81, 0x93, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5,\n  0x8c, 0xba, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0x85, 0xa8, 0xe5, 0x9b,\n  0xbd, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x87, 0x8d, 0xe8, 0xa6, 0x81,\n  0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe8,\n  0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x8b, 0xe6, 0x83, 0x85, 0xe8, 0xbf,\n  0x99, 0xe4, 0xba, 0x9b, 0xe8, 0x80, 0x83, 0xe8, 0xaf, 0x95, 0xe5, 0x8f, 0x91,\n  0xe7, 0x8e, 0xb0, 0xe5, 0x9f, 0xb9, 0xe8, 0xae, 0xad, 0xe4, 0xbb, 0xa5, 0xe4,\n  0xb8, 0x8a, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe6, 0x88, 0x90, 0xe4, 0xb8,\n  0xba, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0xa6, 0x99, 0xe6, 0xb8, 0xaf,\n  0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,\n  0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe5, 0xbc,\n  0x80, 0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0xa0, 0x87,\n  0xe5, 0x87, 0x86, 0xe6, 0xac, 0xa2, 0xe8, 0xbf, 0x8e, 0xe8, 0xa7, 0xa3, 0xe5,\n  0x86, 0xb3, 0xe5, 0x9c, 0xb0, 0xe6, 0x96, 0xb9, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,\n  0x8b, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe8, 0xb4, 0xa3, 0xe4, 0xbb, 0xbb,\n  0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe4,\n  0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe5, 0xa5,\n  0xb3, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe7, 0xa0, 0x81, 0xe9, 0x94, 0x80,\n  0xe5, 0x94, 0xae, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0xb0, 0xe7, 0xa6, 0xbb, 0xe7,\n  0xba, 0xbf, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1,\n  0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91,\n  0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,\n  0xb8, 0x8d, 0xe8, 0xa6, 0x81, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb3, 0xe6, 0x9c,\n  0xba, 0xe6, 0x9e, 0x84, 0xe5, 0xbe, 0x88, 0xe5, 0xa4, 0x9a, 0xe6, 0x92, 0xad,\n  0xe6, 0x94, 0xbe, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0xe6, 0x94, 0xbf, 0xe7,\n  0xad, 0x96, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe8, 0x83, 0xbd, 0xe5, 0x8a,\n  0x9b, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe6, 0x99, 0x82, 0xe9, 0x96, 0x93,\n  0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0xb0, 0xe7, 0x83, 0xad, 0xe9, 0x97, 0xa8, 0xe5,\n  0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe4, 0xb8, 0x93, 0xe5, 0x8c, 0xba, 0xe9, 0x9d,\n  0x9e, 0xe5, 0xb8, 0xb8, 0xe8, 0x8b, 0xb1, 0xe8, 0xaf, 0xad, 0xe7, 0x99, 0xbe,\n  0xe5, 0xba, 0xa6, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0xbe, 0x8e, 0xe5,\n  0xa5, 0xb3, 0xe6, 0xaf, 0x94, 0xe8, 0xbe, 0x83, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf,\n  0x86, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0x9a, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae,\n  0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe6, 0x84, 0x8f, 0xe8, 0xa7, 0x81, 0xe7,\n  0xb2, 0xbe, 0xe5, 0xbd, 0xa9, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe6, 0x8f,\n  0x90, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0x91, 0xe8, 0xa8, 0x80, 0xe6, 0x96, 0xb9,\n  0xe9, 0x9d, 0xa2, 0xe5, 0x9f, 0xba, 0xe9, 0x87, 0x91, 0xe5, 0xa4, 0x84, 0xe7,\n  0x90, 0x86, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0xbd, 0xb1, 0xe7, 0x89,\n  0x87, 0xe9, 0x93, 0xb6, 0xe8, 0xa1, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0x89,\n  0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7,\n  0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4, 0xb8,\n  0x93, 0xe5, 0xae, 0xb6, 0xe8, 0xbf, 0x99, 0xe7, 0xa7, 0x8d, 0xe8, 0xaf, 0x9d,\n  0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0xb7, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5,\n  0x8a, 0xa1, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,\n  0x95, 0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe8, 0xb4, 0xa8, 0xe9, 0x87, 0x8f,\n  0xe7, 0x94, 0xb7, 0xe4, 0xba, 0xba, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5,\n  0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xe9, 0x83,\n  0xa8, 0xe5, 0x88, 0x86, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe5, 0x92, 0xa8,\n  0xe8, 0xaf, 0xa2, 0xe6, 0x97, 0xb6, 0xe5, 0xb0, 0x9a, 0xe6, 0xb3, 0xa8, 0xe6,\n  0x84, 0x8f, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xad, 0xa6, 0xe6, 0xa0,\n  0xa1, 0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xa5, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2,\n  0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8,\n  0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8,\n  0xba, 0xe4, 0xba, 0x86, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0xaf, 0xb4,\n  0xe6, 0x98, 0x8e, 0xe4, 0xbe, 0x9b, 0xe5, 0xba, 0x94, 0xe5, 0xad, 0xa9, 0xe5,\n  0xad, 0x90, 0xe4, 0xb8, 0x93, 0xe9, 0xa2, 0x98, 0xe7, 0xa8, 0x8b, 0xe5, 0xba,\n  0x8f, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe6, 0x9c, 0x83, 0xe5, 0x93, 0xa1,\n  0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe4,\n  0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe8, 0x80, 0x8c, 0xe4, 0xb8, 0x94, 0xe4, 0xbb,\n  0x8a, 0xe5, 0xa4, 0xa9, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe5, 0x8a, 0xa8,\n  0xe6, 0x80, 0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x89, 0xb9, 0xe5,\n  0x88, 0xab, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,\n  0xbb, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb0, 0x8f, 0xe8, 0xaf, 0xb4,\n  0xe6, 0x88, 0x91, 0xe5, 0x80, 0x91, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe5,\n  0xaa, 0x92, 0xe4, 0xbd, 0x93, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe9, 0x82,\n  0xa3, 0xe4, 0xb9, 0x88, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0xb7, 0xe5, 0x9b, 0xbd,\n  0xe5, 0x86, 0x85, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xa0, 0xb9, 0xe6,\n  0x8d, 0xae, 0xe7, 0x94, 0xb5, 0xe8, 0xa7, 0x86, 0xe5, 0xad, 0xa6, 0xe9, 0x99,\n  0xa2, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0x89, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b,\n  0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x8e, 0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8d, 0xe5,\n  0x87, 0xba, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xbf, 0x87, 0xe6, 0xad,\n  0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0x9f, 0xe6, 0x95, 0x85,\n  0xe4, 0xba, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0xa0, 0x87, 0xe9,\n  0xa2, 0x98, 0xe5, 0x95, 0x86, 0xe5, 0x8a, 0xa1, 0xe8, 0xbe, 0x93, 0xe5, 0x85,\n  0xa5, 0xe4, 0xb8, 0x80, 0xe7, 0x9b, 0xb4, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,\n  0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0xe4, 0xba, 0x86, 0xe8, 0xa7, 0xa3, 0xe5,\n  0xbb, 0xba, 0xe7, 0xad, 0x91, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe5, 0x85,\n  0xa8, 0xe7, 0x90, 0x83, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xae, 0xa1,\n  0xe5, 0x88, 0x92, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0xe8, 0x89, 0xba, 0xe6,\n  0x9c, 0xaf, 0xe7, 0x9b, 0xb8, 0xe5, 0x86, 0x8c, 0xe5, 0x8f, 0x91, 0xe7, 0x94,\n  0x9f, 0xe7, 0x9c, 0x9f, 0xe7, 0x9a, 0x84, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b,\n  0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7,\n  0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe5, 0x88,\n  0xb6, 0xe4, 0xbd, 0x9c, 0xe6, 0x9d, 0xa5, 0xe8, 0x87, 0xaa, 0xe6, 0xa0, 0x87,\n  0xe7, 0xad, 0xbe, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8b, 0xe5, 0x8e, 0x9f, 0xe5,\n  0x88, 0x9b, 0xe6, 0x97, 0xa0, 0xe6, 0xb3, 0x95, 0xe5, 0x85, 0xb6, 0xe4, 0xb8,\n  0xad, 0xe5, 0x80, 0x8b, 0xe4, 0xba, 0xba, 0xe4, 0xb8, 0x80, 0xe5, 0x88, 0x87,\n  0xe6, 0x8c, 0x87, 0xe5, 0x8d, 0x97, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe9,\n  0x9b, 0x86, 0xe5, 0x9b, 0xa2, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe5, 0x85,\n  0xb3, 0xe6, 0xb3, 0xa8, 0xe5, 0x9b, 0xa0, 0xe6, 0xad, 0xa4, 0xe7, 0x85, 0xa7,\n  0xe7, 0x89, 0x87, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0x95, 0x86, 0xe4,\n  0xb8, 0x9a, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,\n  0x9f, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91,\n  0xe7, 0xbb, 0xbc, 0xe5, 0x90, 0x88, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4,\n  0xb8, 0x93, 0xe8, 0xbe, 0x91, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xba,\n  0xa4, 0xe9, 0x80, 0x9a, 0xe8, 0xaf, 0x84, 0xe4, 0xbb, 0xb7, 0xe8, 0xa7, 0x89,\n  0xe5, 0xbe, 0x97, 0xe7, 0xb2, 0xbe, 0xe5, 0x8d, 0x8e, 0xe5, 0xae, 0xb6, 0xe5,\n  0xba, 0xad, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x84, 0x9f, 0xe8, 0xa7,\n  0x89, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xb0,\n  0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0xb6, 0xe5, 0xba, 0xa6, 0xe9,\n  0xa3, 0x9f, 0xe5, 0x93, 0x81, 0xe8, 0x99, 0xbd, 0xe7, 0x84, 0xb6, 0xe8, 0xbd,\n  0xac, 0xe8, 0xbd, 0xbd, 0xe6, 0x8a, 0xa5, 0xe4, 0xbb, 0xb7, 0xe8, 0xae, 0xb0,\n  0xe8, 0x80, 0x85, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0x8c, 0xe6,\n  0x94, 0xbf, 0xe4, 0xba, 0xba, 0xe6, 0xb0, 0x91, 0xe7, 0x94, 0xa8, 0xe5, 0x93,\n  0x81, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe6, 0x8f, 0x90, 0xe5, 0x87, 0xba,\n  0xe9, 0x85, 0x92, 0xe5, 0xba, 0x97, 0xe7, 0x84, 0xb6, 0xe5, 0x90, 0x8e, 0xe4,\n  0xbb, 0x98, 0xe6, 0xac, 0xbe, 0xe7, 0x83, 0xad, 0xe7, 0x82, 0xb9, 0xe4, 0xbb,\n  0xa5, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x8c, 0xe5, 0x85, 0xa8, 0xe5, 0x8f, 0x91,\n  0xe5, 0xb8, 0x96, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0xa2, 0x86, 0xe5,\n  0xaf, 0xbc, 0xe5, 0xb7, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5, 0x8c, 0xbb, 0xe9, 0x99,\n  0xa2, 0xe7, 0x9c, 0x8b, 0xe7, 0x9c, 0x8b, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8,\n  0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5,\n  0x90, 0x84, 0xe7, 0xa7, 0x8d, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9d,\n  0x90, 0xe6, 0x96, 0x99, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe4, 0xb9, 0x8b,\n  0xe5, 0x90, 0x8e, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0x88, 0xe6,\n  0x9e, 0x9c, 0xe4, 0xbb, 0x8a, 0xe5, 0xb9, 0xb4, 0xe8, 0xae, 0xba, 0xe6, 0x96,\n  0x87, 0xe6, 0x88, 0x91, 0xe5, 0x9b, 0xbd, 0xe5, 0x91, 0x8a, 0xe8, 0xaf, 0x89,\n  0xe7, 0x89, 0x88, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5,\n  0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x89, 0x93, 0xe5, 0x8d, 0xb0, 0xe5, 0xbf,\n  0xab, 0xe4, 0xb9, 0x90, 0xe6, 0x9c, 0xba, 0xe6, 0xa2, 0xb0, 0xe8, 0xa7, 0x82,\n  0xe7, 0x82, 0xb9, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0xb2, 0xbe, 0xe7,\n  0xa5, 0x9e, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xa9, 0xe7, 0x94,\n  0xa8, 0xe7, 0xbb, 0xa7, 0xe7, 0xbb, 0xad, 0xe4, 0xbd, 0xa0, 0xe4, 0xbb, 0xac,\n  0xe8, 0xbf, 0x99, 0xe4, 0xb9, 0x88, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe8,\n  0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xa4, 0x9f, 0xe9, 0x9b,\n  0x85, 0xe8, 0x99, 0x8e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe9, 0xa3, 0x8e,\n  0xe6, 0xa0, 0xbc, 0xe4, 0xb8, 0x80, 0xe8, 0xb5, 0xb7, 0xe7, 0xa7, 0x91, 0xe5,\n  0xad, 0xa6, 0xe4, 0xbd, 0x93, 0xe8, 0x82, 0xb2, 0xe7, 0x9f, 0xad, 0xe4, 0xbf,\n  0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97,\n  0xe8, 0xbf, 0x90, 0xe5, 0x8a, 0xa8, 0xe4, 0xba, 0xa7, 0xe4, 0xb8, 0x9a, 0xe4,\n  0xbc, 0x9a, 0xe8, 0xae, 0xae, 0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe5, 0x85,\n  0x88, 0xe7, 0x94, 0x9f, 0xe8, 0x81, 0x94, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0xaf,\n  0xe6, 0x98, 0xaf, 0xe5, 0x95, 0x8f, 0xe9, 0xa1, 0x8c, 0xe7, 0xbb, 0x93, 0xe6,\n  0x9e, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe8, 0xb0, 0x83, 0xe6, 0x9f,\n  0xa5, 0xe8, 0xb3, 0x87, 0xe6, 0x96, 0x99, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,\n  0xe8, 0xb4, 0x9f, 0xe8, 0xb4, 0xa3, 0xe5, 0x86, 0x9c, 0xe4, 0xb8, 0x9a, 0xe8,\n  0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe5, 0xae, 0x9e, 0xe6, 0x96, 0xbd, 0xe6, 0x8e,\n  0xa5, 0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe9, 0x82, 0xa3,\n  0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe5, 0x8a, 0xa0, 0xe5,\n  0xbc, 0xba, 0xe5, 0xa5, 0xb3, 0xe6, 0x80, 0xa7, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,\n  0xb4, 0xe6, 0x9c, 0x8d, 0xe5, 0x8b, 0x99, 0xe4, 0xbc, 0x91, 0xe9, 0x97, 0xb2,\n  0xe4, 0xbb, 0x8a, 0xe6, 0x97, 0xa5, 0xe5, 0xae, 0xa2, 0xe6, 0x9c, 0x8d, 0xe8,\n  0xa7, 0x80, 0xe7, 0x9c, 0x8b, 0xe5, 0x8f, 0x82, 0xe5, 0x8a, 0xa0, 0xe7, 0x9a,\n  0x84, 0xe8, 0xaf, 0x9d, 0xe4, 0xb8, 0x80, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0x9d,\n  0xe8, 0xaf, 0x81, 0xe5, 0x9b, 0xbe, 0xe4, 0xb9, 0xa6, 0xe6, 0x9c, 0x89, 0xe6,\n  0x95, 0x88, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a,\n  0xa8, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe5, 0x86, 0xb3, 0xe5, 0xae, 0x9a,\n  0xe8, 0x82, 0xa1, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0x8d, 0xe6, 0x96, 0xad, 0xe9,\n  0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x8a,\n  0x9e, 0xe6, 0xb3, 0x95, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe9, 0x87, 0x87,\n  0xe7, 0x94, 0xa8, 0xe8, 0x90, 0xa5, 0xe9, 0x94, 0x80, 0xe6, 0x8a, 0x95, 0xe8,\n  0xaf, 0x89, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0x88, 0xb1, 0xe6, 0x83,\n  0x85, 0xe6, 0x91, 0x84, 0xe5, 0xbd, 0xb1, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x9b,\n  0xe8, 0xa4, 0x87, 0xe8, 0xa3, 0xbd, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0xa6, 0xe6,\n  0x9c, 0xba, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xa3,\n  0x85, 0xe4, 0xbf, 0xae, 0xe8, 0xb4, 0xad, 0xe7, 0x89, 0xa9, 0xe5, 0x86, 0x9c,\n  0xe6, 0x9d, 0x91, 0xe5, 0x85, 0xa8, 0xe9, 0x9d, 0xa2, 0xe7, 0xb2, 0xbe, 0xe5,\n  0x93, 0x81, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x9e, 0xe4, 0xba, 0x8b, 0xe6, 0x83,\n  0x85, 0xe6, 0xb0, 0xb4, 0xe5, 0xb9, 0xb3, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,\n  0xe4, 0xb8, 0x8a, 0xe5, 0xb8, 0x82, 0xe8, 0xb0, 0xa2, 0xe8, 0xb0, 0xa2, 0xe6,\n  0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x95, 0x99, 0xe5, 0xb8, 0x88, 0xe4, 0xb8,\n  0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe6, 0xad, 0x8c,\n  0xe6, 0x9b, 0xb2, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe5, 0x88, 0x9b, 0xe6,\n  0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xaa, 0xe8, 0xa6,\n  0x81, 0xe6, 0x97, 0xb6, 0xe4, 0xbb, 0xa3, 0xe8, 0xb3, 0x87, 0xe8, 0xa8, 0x8a,\n  0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0x9f, 0xe8,\n  0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe5, 0xb1,\n  0x95, 0xe7, 0xa4, 0xba, 0xe5, 0xbf, 0x83, 0xe7, 0x90, 0x86, 0xe8, 0xb4, 0xb4,\n  0xe5, 0xad, 0x90, 0xe7, 0xb6, 0xb2, 0xe7, 0xab, 0x99, 0xe4, 0xb8, 0xbb, 0xe9,\n  0xa1, 0x8c, 0xe8, 0x87, 0xaa, 0xe7, 0x84, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88,\n  0xab, 0xe7, 0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe6, 0x94, 0xb9, 0xe9, 0x9d, 0xa9,\n  0xe9, 0x82, 0xa3, 0xe4, 0xba, 0x9b, 0xe6, 0x9d, 0xa5, 0xe8, 0xaf, 0xb4, 0xe6,\n  0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xe5, 0x88,\n  0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0x88, 0xb8, 0xe8, 0x8a, 0x82,\n  0xe7, 0x9b, 0xae, 0xe9, 0x87, 0x8d, 0xe7, 0x82, 0xb9, 0xe6, 0xac, 0xa1, 0xe6,\n  0x95, 0xb8, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe8, 0xa7, 0x84, 0xe5, 0x88,\n  0x92, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x89, 0xbe, 0xe5, 0x88, 0xb0,\n  0xe4, 0xbb, 0xa5, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0xa7, 0xe5, 0x85, 0xa8, 0xe4,\n  0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0xb3, 0xe5, 0x9b,\n  0x9e, 0xe7, 0xad, 0x94, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0x8b, 0xe4, 0xbf, 0x9d,\n  0xe9, 0x9a, 0x9c, 0xe7, 0x8e, 0xb0, 0xe4, 0xbb, 0xa3, 0xe6, 0xa3, 0x80, 0xe6,\n  0x9f, 0xa5, 0xe6, 0x8a, 0x95, 0xe7, 0xa5, 0xa8, 0xe5, 0xb0, 0x8f, 0xe6, 0x97,\n  0xb6, 0xe6, 0xb2, 0x92, 0xe6, 0x9c, 0x89, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8,\n  0xe7, 0x94, 0x9a, 0xe8, 0x87, 0xb3, 0xe4, 0xbb, 0xa3, 0xe7, 0x90, 0x86, 0xe7,\n  0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe5, 0xa4,\n  0x8d, 0xe5, 0x88, 0xb6, 0xe9, 0x87, 0x91, 0xe8, 0x9e, 0x8d, 0xe5, 0xb9, 0xb8,\n  0xe7, 0xa6, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe6,\n  0x88, 0x90, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0x8c, 0xe6, 0x83,\n  0x85, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb0, 0xe6, 0x80, 0x9d, 0xe6, 0x83, 0xb3,\n  0xe6, 0x80, 0x8e, 0xe6, 0xa0, 0xb7, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0xe8,\n  0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x80, 0xe5, 0xa5, 0xbd, 0xe4, 0xba,\n  0xa7, 0xe7, 0x94, 0x9f, 0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe6, 0x9c, 0x8d,\n  0xe8, 0xa3, 0x85, 0xe5, 0xb9, 0xbf, 0xe4, 0xb8, 0x9c, 0xe5, 0x8a, 0xa8, 0xe6,\n  0xbc, 0xab, 0xe9, 0x87, 0x87, 0xe8, 0xb4, 0xad, 0xe6, 0x96, 0xb0, 0xe6, 0x89,\n  0x8b, 0xe7, 0xbb, 0x84, 0xe5, 0x9b, 0xbe, 0xe9, 0x9d, 0xa2, 0xe6, 0x9d, 0xbf,\n  0xe5, 0x8f, 0x82, 0xe8, 0x80, 0x83, 0xe6, 0x94, 0xbf, 0xe6, 0xb2, 0xbb, 0xe5,\n  0xae, 0xb9, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xa9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8a,\n  0xaa, 0xe5, 0x8a, 0x9b, 0xe4, 0xba, 0xba, 0xe4, 0xbb, 0xac, 0xe5, 0x8d, 0x87,\n  0xe7, 0xba, 0xa7, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0xe4, 0xba, 0xba, 0xe7,\n  0x89, 0xa9, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe6, 0xb5, 0x81, 0xe8, 0xa1,\n  0x8c, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97,\n  0xe9, 0x9f, 0xa9, 0xe5, 0x9b, 0xbd, 0xe8, 0xb4, 0xb8, 0xe6, 0x98, 0x93, 0xe5,\n  0xbc, 0x80, 0xe5, 0xb1, 0x95, 0xe7, 0x9b, 0xb8, 0xe9, 0x97, 0x9c, 0xe8, 0xa1,\n  0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0xbd, 0xb1, 0xe8, 0xa7, 0x86, 0xe5, 0xa6, 0x82,\n  0xe6, 0xad, 0xa4, 0xe7, 0xbe, 0x8e, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xa7, 0xe5,\n  0xb0, 0x8f, 0xe6, 0x8a, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0x9d, 0xa1, 0xe6, 0xac,\n  0xbe, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0xe8, 0xae, 0xb8, 0xe5, 0xa4, 0x9a,\n  0xe6, 0xb3, 0x95, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0xb6, 0xe5, 0xb1, 0x85, 0xe4,\n  0xb9, 0xa6, 0xe5, 0xba, 0x97, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0xab,\n  0x8b, 0xe5, 0x8d, 0xb3, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0x8a, 0x80,\n  0xe5, 0xb7, 0xa7, 0xe5, 0xa5, 0xa5, 0xe8, 0xbf, 0x90, 0xe7, 0x99, 0xbb, 0xe5,\n  0x85, 0xa5, 0xe4, 0xbb, 0xa5, 0xe6, 0x9d, 0xa5, 0xe7, 0x90, 0x86, 0xe8, 0xae,\n  0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0x87, 0xaa, 0xe7, 0x94, 0xb1,\n  0xe4, 0xb8, 0xad, 0xe5, 0x8d, 0x8e, 0xe5, 0x8a, 0x9e, 0xe5, 0x85, 0xac, 0xe5,\n  0xa6, 0x88, 0xe5, 0xa6, 0x88, 0xe7, 0x9c, 0x9f, 0xe6, 0xad, 0xa3, 0xe4, 0xb8,\n  0x8d, 0xe9, 0x94, 0x99, 0xe5, 0x85, 0xa8, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x88,\n  0xe5, 0x90, 0x8c, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0xab, 0xe4,\n  0xba, 0xba, 0xe7, 0x9b, 0x91, 0xe7, 0x9d, 0xa3, 0xe5, 0x85, 0xb7, 0xe4, 0xbd,\n  0x93, 0xe4, 0xb8, 0x96, 0xe7, 0xba, 0xaa, 0xe5, 0x9b, 0xa2, 0xe9, 0x98, 0x9f,\n  0xe5, 0x88, 0x9b, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xbf, 0xe6, 0x8b, 0x85, 0xe5,\n  0xa2, 0x9e, 0xe9, 0x95, 0xbf, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4, 0xbf,\n  0x9d, 0xe6, 0x8c, 0x81, 0xe5, 0x95, 0x86, 0xe5, 0xae, 0xb6, 0xe7, 0xbb, 0xb4,\n  0xe4, 0xbf, 0xae, 0xe5, 0x8f, 0xb0, 0xe6, 0xb9, 0xbe, 0xe5, 0xb7, 0xa6, 0xe5,\n  0x8f, 0xb3, 0xe8, 0x82, 0xa1, 0xe4, 0xbb, 0xbd, 0xe7, 0xad, 0x94, 0xe6, 0xa1,\n  0x88, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe7, 0x94, 0xb5, 0xe4, 0xbf, 0xa1,\n  0xe7, 0xbb, 0x8f, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,\n  0xae, 0xa3, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad,\n  0xa3, 0xe5, 0xbc, 0x8f, 0xe7, 0x89, 0xb9, 0xe8, 0x89, 0xb2, 0xe4, 0xb8, 0x8b,\n  0xe6, 0x9d, 0xa5, 0xe5, 0x8d, 0x8f, 0xe4, 0xbc, 0x9a, 0xe5, 0x8f, 0xaa, 0xe8,\n  0x83, 0xbd, 0xe5, 0xbd, 0x93, 0xe7, 0x84, 0xb6, 0xe9, 0x87, 0x8d, 0xe6, 0x96,\n  0xb0, 0xe5, 0x85, 0xa7, 0xe5, 0xae, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xaf, 0xbc,\n  0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8,\n  0xb3, 0xa3, 0xe5, 0xae, 0xb6, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe5, 0x9c,\n  0x9f, 0xe5, 0x9c, 0xb0, 0xe6, 0xb5, 0x99, 0xe6, 0xb1, 0x9f, 0xe6, 0x94, 0xaf,\n  0xe4, 0xbb, 0x98, 0xe6, 0x8e, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0xab, 0x99, 0xe9,\n  0x95, 0xbf, 0xe6, 0x9d, 0xad, 0xe5, 0xb7, 0x9e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,\n  0x8c, 0xe5, 0x88, 0xb6, 0xe9, 0x80, 0xa0, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x80,\n  0xe6, 0x8e, 0xa8, 0xe5, 0xb9, 0xbf, 0xe7, 0x8e, 0xb0, 0xe5, 0x9c, 0xba, 0xe6,\n  0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0xe4, 0xbc,\n  0xa0, 0xe7, 0xbb, 0x9f, 0xe6, 0xad, 0x8c, 0xe6, 0x89, 0x8b, 0xe4, 0xbf, 0x9d,\n  0xe9, 0x99, 0xa9, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c, 0xbb, 0xe7,\n  0x96, 0x97, 0xe7, 0xbb, 0x8f, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x87, 0xe5, 0x8e,\n  0xbb, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xb6, 0xe5, 0x85, 0xa5,\n  0xe5, 0xb9, 0xb4, 0xe5, 0xba, 0xa6, 0xe6, 0x9d, 0x82, 0xe5, 0xbf, 0x97, 0xe7,\n  0xbe, 0x8e, 0xe4, 0xb8, 0xbd, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe7, 0x99,\n  0xbb, 0xe9, 0x99, 0x86, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d, 0xa5, 0xe5, 0x8a, 0xa0,\n  0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xa3, 0xe6, 0x95, 0x99, 0xe7,\n  0xa8, 0x8b, 0xe7, 0x89, 0x88, 0xe5, 0x9d, 0x97, 0xe8, 0xba, 0xab, 0xe4, 0xbd,\n  0x93, 0xe9, 0x87, 0x8d, 0xe5, 0xba, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae,\n  0xe6, 0x88, 0x90, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe5, 0xbc, 0x8f, 0xe5,\n  0x9c, 0x9f, 0xe8, 0xb1, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x83, 0xb9, 0xe4, 0xb8,\n  0x9c, 0xe6, 0x96, 0xb9, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x8d, 0x97,\n  0xe4, 0xba, 0xac, 0xe6, 0xb1, 0x82, 0xe8, 0x81, 0x8c, 0xe5, 0x8f, 0x96, 0xe5,\n  0xbe, 0x97, 0xe8, 0x81, 0x8c, 0xe4, 0xbd, 0x8d, 0xe7, 0x9b, 0xb8, 0xe4, 0xbf,\n  0xa1, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f,\n  0xe7, 0xbd, 0x91, 0xe9, 0xa1, 0xb5, 0xe7, 0xa1, 0xae, 0xe5, 0xae, 0x9a, 0xe5,\n  0x9b, 0xbe, 0xe4, 0xbe, 0x8b, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0xe7, 0xa7,\n  0xaf, 0xe6, 0x9e, 0x81, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xae,\n  0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x9d, 0xe8, 0xb4, 0x9d, 0xe6, 0x9c, 0xba, 0xe5,\n  0x85, 0xb3, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,\n  0x83, 0xe7, 0x97, 0x85, 0xe6, 0xaf, 0x92, 0xe5, 0xae, 0xa0, 0xe7, 0x89, 0xa9,\n  0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x86, 0xe8, 0xa9, 0x95, 0xe8, 0xab, 0x96, 0xe7,\n  0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x8f, 0x8a, 0xe6, 0x97, 0xb6, 0xe6, 0xb1,\n  0x82, 0xe8, 0xb4, 0xad, 0xe7, 0xab, 0x99, 0xe7, 0x82, 0xb9, 0xe5, 0x84, 0xbf,\n  0xe7, 0xab, 0xa5, 0xe6, 0xaf, 0x8f, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0xad, 0xe5,\n  0xa4, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x86, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8,\n  0xaa, 0xe5, 0xa4, 0xa9, 0xe6, 0xb4, 0xa5, 0xe5, 0xad, 0x97, 0xe4, 0xbd, 0x93,\n  0xe5, 0x8f, 0xb0, 0xe7, 0x81, 0xa3, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0xe6,\n  0x9c, 0xac, 0xe9, 0xa1, 0xb5, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0xae,\n  0x98, 0xe6, 0x96, 0xb9, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x81, 0xe7, 0x9b, 0xb8,\n  0xe6, 0x9c, 0xba, 0xe6, 0x88, 0x98, 0xe7, 0x95, 0xa5, 0xe5, 0xba, 0x94, 0xe5,\n  0xbd, 0x93, 0xe5, 0xbe, 0x8b, 0xe5, 0xb8, 0x88, 0xe6, 0x96, 0xb9, 0xe4, 0xbe,\n  0xbf, 0xe6, 0xa0, 0xa1, 0xe5, 0x9b, 0xad, 0xe8, 0x82, 0xa1, 0xe5, 0xb8, 0x82,\n  0xe6, 0x88, 0xbf, 0xe5, 0xb1, 0x8b, 0xe6, 0xa0, 0x8f, 0xe7, 0x9b, 0xae, 0xe5,\n  0x91, 0x98, 0xe5, 0xb7, 0xa5, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0xe7, 0xaa,\n  0x81, 0xe7, 0x84, 0xb6, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0xac,\n  0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x93, 0xe5, 0x90, 0x88, 0xe6, 0xa1, 0xa3, 0xe6,\n  0xa1, 0x88, 0xe5, 0x8a, 0xb3, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0xa6, 0xe5, 0xa4,\n  0x96, 0xe7, 0xbe, 0x8e, 0xe5, 0x85, 0x83, 0xe5, 0xbc, 0x95, 0xe8, 0xb5, 0xb7,\n  0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe4,\n  0xbc, 0x9a, 0xe8, 0xae, 0xa1, 0xe8, 0xaa, 0xaa, 0xe6, 0x98, 0x8e, 0xe9, 0x9a,\n  0x90, 0xe7, 0xa7, 0x81, 0xe5, 0xae, 0x9d, 0xe5, 0xae, 0x9d, 0xe8, 0xa7, 0x84,\n  0xe8, 0x8c, 0x83, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb1, 0xe5,\n  0x90, 0x8c, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0, 0xe4, 0xbd, 0x93, 0xe7, 0xb3,\n  0xbb, 0xe5, 0xb8, 0xa6, 0xe6, 0x9d, 0xa5, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,\n  0xe7, 0x99, 0xbc, 0xe8, 0xa1, 0xa8, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe5,\n  0x8a, 0xa0, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4, 0xba,\n  0x8c, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe6, 0x88, 0x90,\n  0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe5, 0x85, 0xb1, 0xe4,\n  0xba, 0xab, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0xa5, 0xb3, 0xe5, 0xad,\n  0xa9, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,\n  0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x80, 0x9a, 0xe4, 0xbf, 0xa1, 0xe8,\n  0xb6, 0x85, 0xe7, 0xba, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xbd,\n  0x93, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x98, 0xe7, 0xa7, 0x80, 0xe6, 0x80, 0xa7,\n  0xe6, 0x84, 0x9f, 0xe6, 0x88, 0xbf, 0xe4, 0xba, 0xa7, 0xe9, 0x81, 0x8a, 0xe6,\n  0x88, 0xb2, 0xe5, 0x87, 0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x8f, 0x90, 0xe4, 0xba,\n  0xa4, 0xe5, 0xb0, 0xb1, 0xe4, 0xb8, 0x9a, 0xe4, 0xbf, 0x9d, 0xe5, 0x81, 0xa5,\n  0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,\n  0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe5, 0xb1,\n  0xb1, 0xe4, 0xb8, 0x9c, 0xe6, 0x83, 0x85, 0xe6, 0x84, 0x9f, 0xe7, 0x89, 0xb9,\n  0xe6, 0xae, 0x8a, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0x9e, 0xe6, 0x90, 0x9c, 0xe5,\n  0xb0, 0x8b, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe9, 0x97, 0xa8, 0xe6, 0x88,\n  0xb7, 0xe8, 0xb4, 0xa2, 0xe5, 0x8a, 0xa1, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3,\n  0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xb6, 0xe8, 0xb4, 0xa2, 0xe7, 0xbb, 0x8f, 0xe5,\n  0x9d, 0x9a, 0xe6, 0x8c, 0x81, 0xe5, 0xb9, 0xb2, 0xe9, 0x83, 0xa8, 0xe6, 0x88,\n  0x90, 0xe7, 0xab, 0x8b, 0xe5, 0x88, 0xa9, 0xe7, 0x9b, 0x8a, 0xe8, 0x80, 0x83,\n  0xe8, 0x99, 0x91, 0xe6, 0x88, 0x90, 0xe9, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe8,\n  0xa3, 0x85, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb6, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,\n  0x9b, 0xe6, 0x96, 0x87, 0xe6, 0x98, 0x8e, 0xe6, 0x8b, 0x9b, 0xe5, 0x95, 0x86,\n  0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9c, 0x9f, 0xe6, 0x98, 0xaf, 0xe7,\n  0x9c, 0xbc, 0xe7, 0x9d, 0x9b, 0xe4, 0xbc, 0x99, 0xe4, 0xbc, 0xb4, 0xe5, 0xa8,\n  0x81, 0xe6, 0x9c, 0x9b, 0xe9, 0xa2, 0x86, 0xe5, 0x9f, 0x9f, 0xe5, 0x8d, 0xab,\n  0xe7, 0x94, 0x9f, 0xe4, 0xbc, 0x98, 0xe6, 0x83, 0xa0, 0xe8, 0xab, 0x96, 0xe5,\n  0xa3, 0x87, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe8, 0x89, 0xaf, 0xe5, 0xa5,\n  0xbd, 0xe5, 0x85, 0x85, 0xe5, 0x88, 0x86, 0xe7, 0xac, 0xa6, 0xe5, 0x90, 0x88,\n  0xe9, 0x99, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0xb9, 0xe7, 0x82, 0xb9, 0xe4,\n  0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe8, 0xb5,\n  0x84, 0xe4, 0xba, 0xa7, 0xe6, 0xa0, 0xb9, 0xe6, 0x9c, 0xac, 0xe6, 0x98, 0x8e,\n  0xe6, 0x98, 0xbe, 0xe5, 0xaf, 0x86, 0xe7, 0xa2, 0xbc, 0xe5, 0x85, 0xac, 0xe4,\n  0xbc, 0x97, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0xe6, 0x9b, 0xb4, 0xe5, 0x8a,\n  0xa0, 0xe4, 0xba, 0xab, 0xe5, 0x8f, 0x97, 0xe5, 0x90, 0x8c, 0xe5, 0xad, 0xa6,\n  0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x82, 0xe5, 0x90, 0x88, 0xe5,\n  0x8e, 0x9f, 0xe6, 0x9d, 0xa5, 0xe9, 0x97, 0xae, 0xe7, 0xad, 0x94, 0xe6, 0x9c,\n  0xac, 0xe6, 0x96, 0x87, 0xe7, 0xbe, 0x8e, 0xe9, 0xa3, 0x9f, 0xe7, 0xbb, 0xbf,\n  0xe8, 0x89, 0xb2, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0xbb, 0x88, 0xe4,\n  0xba, 0x8e, 0xe7, 0x94, 0x9f, 0xe7, 0x89, 0xa9, 0xe4, 0xbe, 0x9b, 0xe6, 0xb1,\n  0x82, 0xe6, 0x90, 0x9c, 0xe7, 0x8b, 0x90, 0xe5, 0x8a, 0x9b, 0xe9, 0x87, 0x8f,\n  0xe4, 0xb8, 0xa5, 0xe9, 0x87, 0x8d, 0xe6, 0xb0, 0xb8, 0xe8, 0xbf, 0x9c, 0xe5,\n  0x86, 0x99, 0xe7, 0x9c, 0x9f, 0xe6, 0x9c, 0x89, 0xe9, 0x99, 0x90, 0xe7, 0xab,\n  0x9e, 0xe4, 0xba, 0x89, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xb4, 0xb9,\n  0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0xa5, 0xbd, 0xe7, 0xbb, 0x9d, 0xe5,\n  0xaf, 0xb9, 0xe5, 0x8d, 0x81, 0xe5, 0x88, 0x86, 0xe4, 0xbf, 0x83, 0xe8, 0xbf,\n  0x9b, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0x84, 0xe5, 0xbd, 0xb1, 0xe9, 0x9f, 0xb3,\n  0xe4, 0xbc, 0x98, 0xe5, 0x8a, 0xbf, 0xe4, 0xb8, 0x8d, 0xe5, 0xb0, 0x91, 0xe6,\n  0xac, 0xa3, 0xe8, 0xb5, 0x8f, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe6, 0x9c,\n  0x89, 0xe7, 0x82, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe5, 0x85, 0xa8,\n  0xe6, 0x96, 0xb0, 0xe4, 0xbf, 0xa1, 0xe7, 0x94, 0xa8, 0xe8, 0xae, 0xbe, 0xe6,\n  0x96, 0xbd, 0xe5, 0xbd, 0xa2, 0xe8, 0xb1, 0xa1, 0xe8, 0xb5, 0x84, 0xe6, 0xa0,\n  0xbc, 0xe7, 0xaa, 0x81, 0xe7, 0xa0, 0xb4, 0xe9, 0x9a, 0x8f, 0xe7, 0x9d, 0x80,\n  0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xe6, 0x98, 0xaf, 0xe6,\n  0xaf, 0x95, 0xe4, 0xb8, 0x9a, 0xe6, 0x99, 0xba, 0xe8, 0x83, 0xbd, 0xe5, 0x8c,\n  0x96, 0xe5, 0xb7, 0xa5, 0xe5, 0xae, 0x8c, 0xe7, 0xbe, 0x8e, 0xe5, 0x95, 0x86,\n  0xe5, 0x9f, 0x8e, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0x87, 0xba, 0xe7,\n  0x89, 0x88, 0xe6, 0x89, 0x93, 0xe9, 0x80, 0xa0, 0xe7, 0x94, 0xa2, 0xe5, 0x93,\n  0x81, 0xe6, 0xa6, 0x82, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,\n  0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0x9b, 0xa0, 0xe7, 0xb4, 0xa0, 0xe4,\n  0xb8, 0xad, 0xe5, 0x9c, 0x8b, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe8, 0xb4,\n  0xb4, 0xe5, 0x9b, 0xbe, 0xe6, 0x9c, 0x80, 0xe6, 0x84, 0x9b, 0xe9, 0x95, 0xbf,\n  0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0xb7, 0xe7, 0x90, 0x86, 0xe8,\n  0xb4, 0xa2, 0xe5, 0x9f, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0xae, 0x89, 0xe6, 0x8e,\n  0x92, 0xe6, 0xad, 0xa6, 0xe6, 0xb1, 0x89, 0xe9, 0x87, 0x8c, 0xe9, 0x9d, 0xa2,\n  0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xa9, 0xe7, 0xa9, 0xba, 0xe9,\n  0xa6, 0x96, 0xe5, 0x85, 0x88, 0xe5, 0xae, 0x8c, 0xe5, 0x96, 0x84, 0xe9, 0xa9,\n  0xb1, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0xa2, 0xe4, 0xb8, 0x8d,\n  0xe5, 0x86, 0x8d, 0xe8, 0xaf, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x84, 0x8f, 0xe4,\n  0xb9, 0x89, 0xe9, 0x98, 0xb3, 0xe5, 0x85, 0x89, 0xe8, 0x8b, 0xb1, 0xe5, 0x9b,\n  0xbd, 0xe6, 0xbc, 0x82, 0xe4, 0xba, 0xae, 0xe5, 0x86, 0x9b, 0xe4, 0xba, 0x8b,\n  0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xbe, 0xa4, 0xe4, 0xbc, 0x97, 0xe5,\n  0x86, 0x9c, 0xe6, 0xb0, 0x91, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0xe5, 0x90,\n  0x8d, 0xe7, 0xa8, 0xb1, 0xe5, 0xae, 0xb6, 0xe5, 0x85, 0xb7, 0xe5, 0x8a, 0xa8,\n  0xe7, 0x94, 0xbb, 0xe6, 0x83, 0xb3, 0xe5, 0x88, 0xb0, 0xe6, 0xb3, 0xa8, 0xe6,\n  0x98, 0x8e, 0xe5, 0xb0, 0x8f, 0xe5, 0xad, 0xa6, 0xe6, 0x80, 0xa7, 0xe8, 0x83,\n  0xbd, 0xe8, 0x80, 0x83, 0xe7, 0xa0, 0x94, 0xe7, 0xa1, 0xac, 0xe4, 0xbb, 0xb6,\n  0xe8, 0xa7, 0x82, 0xe7, 0x9c, 0x8b, 0xe6, 0xb8, 0x85, 0xe6, 0xa5, 0x9a, 0xe6,\n  0x90, 0x9e, 0xe7, 0xac, 0x91, 0xe9, 0xa6, 0x96, 0xe9, 0xa0, 0x81, 0xe9, 0xbb,\n  0x84, 0xe9, 0x87, 0x91, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe6, 0xb1, 0x9f,\n  0xe8, 0x8b, 0x8f, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4, 0xb8, 0xbb, 0xe7,\n  0xae, 0xa1, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe8, 0xa8, 0xbb, 0xe5, 0x86,\n  0x8a, 0xe7, 0xbf, 0xbb, 0xe8, 0xaf, 0x91, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9,\n  0xe5, 0x81, 0x9a, 0xe5, 0xa5, 0xbd, 0xe4, 0xbc, 0xbc, 0xe4, 0xb9, 0x8e, 0xe9,\n  0x80, 0x9a, 0xe8, 0xae, 0xaf, 0xe6, 0x96, 0xbd, 0xe5, 0xb7, 0xa5, 0xe7, 0x8b,\n  0x80, 0xe6, 0x85, 0x8b, 0xe4, 0xb9, 0x9f, 0xe8, 0xae, 0xb8, 0xe7, 0x8e, 0xaf,\n  0xe4, 0xbf, 0x9d, 0xe5, 0x9f, 0xb9, 0xe5, 0x85, 0xbb, 0xe6, 0xa6, 0x82, 0xe5,\n  0xbf, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe7, 0xa5,\n  0xa8, 0xe7, 0x90, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d,\n  0x63, 0x75, 0x61, 0x6e, 0x64, 0x6f, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x6d,\n  0x61, 0x64, 0x72, 0x69, 0x64, 0x62, 0x75, 0x73, 0x63, 0x61, 0x72, 0x69, 0x6e,\n  0x69, 0x63, 0x69, 0x6f, 0x74, 0x69, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x6f, 0x72,\n  0x71, 0x75, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x61, 0x65, 0x73, 0x74, 0x61,\n  0x64, 0x6f, 0x70, 0x75, 0x65, 0x64, 0x65, 0x6e, 0x6a, 0x75, 0x65, 0x67, 0x6f,\n  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x6e,\n  0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x6e, 0x70,\n  0x65, 0x72, 0x66, 0x69, 0x6c, 0x6d, 0x61, 0x6e, 0x65, 0x72, 0x61, 0x61, 0x6d,\n  0x69, 0x67, 0x6f, 0x73, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64, 0x63, 0x65, 0x6e,\n  0x74, 0x72, 0x6f, 0x61, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x70, 0x75, 0x65, 0x64,\n  0x65, 0x73, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,\n  0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73, 0x65, 0x67, 0xc3, 0xba, 0x6e,\n  0x62, 0x75, 0x65, 0x6e, 0x6f, 0x73, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x70,\n  0x75, 0x6e, 0x74, 0x6f, 0x73, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x68, 0x61,\n  0x62, 0xc3, 0xad, 0x61, 0x61, 0x67, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x75, 0x65,\n  0x76, 0x6f, 0x73, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x6c,\n  0x6f, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6f, 0x6e, 0x69, 0xc3, 0xb1, 0x6f,\n  0x73, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e, 0x61,\n  0x63, 0x6f, 0x72, 0x72, 0x65, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x70,\n  0x61, 0x72, 0x74, 0x69, 0x72, 0x61, 0x72, 0x72, 0x69, 0x62, 0x61, 0x6d, 0x61,\n  0x72, 0xc3, 0xad, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x65, 0x6d, 0x70,\n  0x6c, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x61, 0x64, 0x63, 0x61, 0x6d, 0x62,\n  0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x66, 0x75, 0x65, 0x72, 0x6f,\n  0x6e, 0x70, 0x61, 0x73, 0x61, 0x64, 0x6f, 0x6c, 0xc3, 0xad, 0x6e, 0x65, 0x61,\n  0x70, 0x61, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x63,\n  0x75, 0x72, 0x73, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62, 0x61, 0x71, 0x75,\n  0x69, 0x65, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x63, 0x75, 0x61,\n  0x6e, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x6d, 0x69, 0x67, 0x75,\n  0x65, 0x6c, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x63, 0x75, 0x61, 0x74, 0x72,\n  0x6f, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x67, 0x72, 0x75, 0x70, 0x6f, 0x73,\n  0x73, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x6d,\n  0x65, 0x64, 0x69, 0x6f, 0x73, 0x66, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63,\n  0x65, 0x72, 0x63, 0x61, 0x64, 0x65, 0x6d, 0xc3, 0xa1, 0x73, 0x6f, 0x66, 0x65,\n  0x72, 0x74, 0x61, 0x63, 0x6f, 0x63, 0x68, 0x65, 0x73, 0x6d, 0x6f, 0x64, 0x65,\n  0x6c, 0x6f, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6c, 0x65, 0x74, 0x72, 0x61,\n  0x73, 0x61, 0x6c, 0x67, 0xc3, 0xba, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x61,\n  0x63, 0x75, 0x61, 0x6c, 0x65, 0x73, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x63,\n  0x75, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x65, 0x6e, 0x64, 0x6f, 0x70, 0x72,\n  0x65, 0x6e, 0x73, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x76, 0x69, 0x61,\n  0x6a, 0x65, 0x73, 0x64, 0x69, 0x6e, 0x65, 0x72, 0x6f, 0x6d, 0x75, 0x72, 0x63,\n  0x69, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xa1, 0x70, 0x75, 0x65, 0x73, 0x74,\n  0x6f, 0x64, 0x69, 0x61, 0x72, 0x69, 0x6f, 0x70, 0x75, 0x65, 0x62, 0x6c, 0x6f,\n  0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x65, 0x6c, 0x70,\n  0x72, 0x6f, 0x70, 0x69, 0x6f, 0x63, 0x72, 0x69, 0x73, 0x69, 0x73, 0x63, 0x69,\n  0x65, 0x72, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75, 0x72, 0x6f, 0x6d, 0x75, 0x65,\n  0x72, 0x74, 0x65, 0x66, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x63, 0x65, 0x72, 0x72,\n  0x61, 0x72, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x65, 0x66, 0x65, 0x63, 0x74,\n  0x6f, 0x70, 0x61, 0x72, 0x74, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x64, 0x61,\n  0x70, 0x72, 0x6f, 0x70, 0x69, 0x61, 0x6f, 0x66, 0x72, 0x65, 0x63, 0x65, 0x74,\n  0x69, 0x65, 0x72, 0x72, 0x61, 0x65, 0x2d, 0x6d, 0x61, 0x69, 0x6c, 0x76, 0x61,\n  0x72, 0x69, 0x61, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x73, 0x66, 0x75, 0x74,\n  0x75, 0x72, 0x6f, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75,\n  0x69, 0x72, 0x72, 0x69, 0x65, 0x73, 0x67, 0x6f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,\n  0x73, 0x6d, 0x69, 0x73, 0x6d, 0x6f, 0x73, 0xc3, 0xba, 0x6e, 0x69, 0x63, 0x6f,\n  0x63, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x73, 0x72,\n  0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x62, 0x69, 0x64, 0x6f, 0x70, 0x72,\n  0x75, 0x65, 0x62, 0x61, 0x74, 0x6f, 0x6c, 0x65, 0x64, 0x6f, 0x74, 0x65, 0x6e,\n  0xc3, 0xad, 0x61, 0x6a, 0x65, 0x73, 0xc3, 0xba, 0x73, 0x65, 0x73, 0x70, 0x65,\n  0x72, 0x6f, 0x63, 0x6f, 0x63, 0x69, 0x6e, 0x61, 0x6f, 0x72, 0x69, 0x67, 0x65,\n  0x6e, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6f,\n  0x63, 0xc3, 0xa1, 0x64, 0x69, 0x7a, 0x68, 0x61, 0x62, 0x6c, 0x61, 0x72, 0x73,\n  0x65, 0x72, 0xc3, 0xad, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x61, 0x66, 0x75,\n  0x65, 0x72, 0x7a, 0x61, 0x65, 0x73, 0x74, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65,\n  0x72, 0x72, 0x61, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x72, 0xc3, 0xa9, 0x78, 0x69,\n  0x74, 0x6f, 0x6c, 0xc3, 0xb3, 0x70, 0x65, 0x7a, 0x61, 0x67, 0x65, 0x6e, 0x64,\n  0x61, 0x76, 0xc3, 0xad, 0x64, 0x65, 0x6f, 0x65, 0x76, 0x69, 0x74, 0x61, 0x72,\n  0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x6a,\n  0x61, 0x76, 0x69, 0x65, 0x72, 0x70, 0x61, 0x64, 0x72, 0x65, 0x73, 0x66, 0xc3,\n  0xa1, 0x63, 0x69, 0x6c, 0x63, 0x61, 0x62, 0x65, 0x7a, 0x61, 0xc3, 0xa1, 0x72,\n  0x65, 0x61, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x65, 0x6e, 0x76, 0xc3,\n  0xad, 0x6f, 0x6a, 0x61, 0x70, 0xc3, 0xb3, 0x6e, 0x61, 0x62, 0x75, 0x73, 0x6f,\n  0x73, 0x62, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x6f, 0x73,\n  0x6c, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x70, 0x75, 0x65, 0x64, 0x61, 0x6e, 0x66,\n  0x75, 0x65, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x6d, 0xc3, 0xba, 0x6e, 0x63, 0x6c,\n  0x61, 0x73, 0x65, 0x73, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x74, 0x65, 0x6e,\n  0x69, 0x64, 0x6f, 0x62, 0x69, 0x6c, 0x62, 0x61, 0x6f, 0x75, 0x6e, 0x69, 0x64,\n  0x61, 0x64, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x73, 0x65, 0x64, 0x69, 0x74, 0x61,\n  0x72, 0x63, 0x72, 0x65, 0x61, 0x64, 0x6f, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,\n  0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,\n  0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2,\n  0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1,\n  0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb5, 0xd1, 0x89,\n  0xd0, 0xb5, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0x9a, 0xd0, 0xb0, 0xd0,\n  0xba, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb,\n  0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0x92, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,\n  0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82,\n  0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0,\n  0xb5, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,\n  0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0,\n  0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0x94, 0xd0, 0xbb, 0xd1, 0x8f,\n  0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0,\n  0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xba,\n  0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0,\n  0xbe, 0xd1, 0x82, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xa1, 0xd0, 0xa8,\n  0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xa7, 0xd1, 0x82, 0xd0,\n  0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbc,\n  0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xa2, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,\n  0xb4, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8d,\n  0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0x92, 0xd0,\n  0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80,\n  0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,\n  0xb4, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0x92, 0xd0, 0xbe, 0xd1, 0x82,\n  0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0,\n  0x92, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81,\n  0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x80, 0xd1,\n  0x83, 0xd0, 0xb1, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb8,\n  0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0x9e, 0xd0, 0x9e, 0xd0,\n  0x9e, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb0,\n  0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,\n  0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb4,\n  0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,\n  0x83, 0xd0, 0xb4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0,\n  0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b,\n  0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87,\n  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,\n  0xa5, 0x8b, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0x6a, 0x61, 0x67, 0x72, 0x61, 0x6e, 0xe0, 0xa4,\n  0x86, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x85,\n  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,\n  0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,\n  0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xa5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0x98, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6,\n  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0,\n  0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0x88, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x93, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0x86, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa5, 0x80, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa5, 0xd9,\n  0x84, 0xd9, 0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xa2, 0xd8, 0xae,\n  0xd8, 0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd9, 0x87, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1,\n  0xd8, 0xba, 0xd9, 0x8a, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd9,\n  0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xb9,\n  0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xb0, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x87, 0xd9,\n  0x86, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x86, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xad, 0xd8, 0xaa, 0xd9, 0x89,\n  0xd9, 0x82, 0xd8, 0xa8, 0xd9, 0x84, 0xd9, 0x88, 0xd8, 0xad, 0xd8, 0xa9, 0xd8,\n  0xa7, 0xd8, 0xae, 0xd8, 0xb1, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb9,\n  0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xa5, 0xd8,\n  0xb0, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xad,\n  0xd8, 0xaf, 0xd8, 0xa5, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9,\n  0x87, 0xd8, 0xa8, 0xd8, 0xb9, 0xd8, 0xb6, 0xd9, 0x83, 0xd9, 0x8a, 0xd9, 0x81,\n  0xd8, 0xa8, 0xd8, 0xad, 0xd8, 0xab, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x86, 0xd9,\n  0x88, 0xd9, 0x87, 0xd9, 0x88, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xac,\n  0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,\n  0x84, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a,\n  0xd8, 0xb3, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xb5, 0xd9, 0x84, 0xd9,\n  0x89, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb0, 0xd8, 0xa8, 0xd9, 0x87, 0xd8, 0xa7,\n  0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xab, 0xd9, 0x84, 0xd9,\n  0x83, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xad,\n  0xd9, 0x8a, 0xd8, 0xab, 0xd9, 0x85, 0xd8, 0xb5, 0xd8, 0xb1, 0xd8, 0xb4, 0xd8,\n  0xb1, 0xd8, 0xad, 0xd8, 0xad, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x81,\n  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9,\n  0x84, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa3, 0xd8, 0xa8, 0xd9, 0x88, 0xd8,\n  0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,\n  0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8,\n  0xb6, 0xd9, 0x88, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xa8,\n  0xd9, 0x86, 0xd8, 0xae, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x86, 0xd8,\n  0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xa1,\n  0xd9, 0x88, 0xd9, 0x87, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x88, 0xd9,\n  0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb1,\n  0xd9, 0x82, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x86, 0xd8,\n  0xad, 0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xaf, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3,\n  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xaa, 0xd8,\n  0xa8, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa8,\n  0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaa, 0xd8,\n  0xac, 0xd9, 0x87, 0xd8, 0xa9, 0xd8, 0xb3, 0xd9, 0x86, 0xd8, 0xa9, 0xd9, 0x8a,\n  0xd8, 0xaa, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xba, 0xd8,\n  0xb2, 0xd8, 0xa9, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd8, 0xa8, 0xd9, 0x8a,\n  0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x86, 0xd8,\n  0xa7, 0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8,\n  0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x87, 0xd8,\n  0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa1, 0xd9, 0x86,\n  0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x81, 0xd9,\n  0x8a, 0xd9, 0x83, 0xd8, 0xa8, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xb0, 0xd8, 0xa7,\n  0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa8, 0xd8, 0xa3, 0xd9,\n  0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x83,\n  0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xaf, 0xd8,\n  0xad, 0xd8, 0xb3, 0xd9, 0x86, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb4,\n  0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,\n  0x87, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb1, 0xd8, 0xb7, 0xd9, 0x84,\n  0xd8, 0xa8, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76,\n  0x69, 0x63, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x68, 0x69, 0x6d,\n  0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x6f,\n  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,\n  0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,\n  0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,\n  0x6e, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x63, 0x6f, 0x75, 0x6e, 0x74,\n  0x72, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x72, 0x65, 0x61,\n  0x74, 0x65, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x72, 0x65, 0x73,\n  0x75, 0x6c, 0x74, 0x73, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72,\n  0x6f, 0x63, 0x65, 0x73, 0x73, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f,\n  0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,\n  0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,\n  0x65, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x6e, 0x65, 0x74, 0x77, 0x6f,\n  0x72, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x64, 0x79, 0x6e, 0x61,\n  0x6d, 0x69, 0x63, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x70, 0x72, 0x69,\n  0x76, 0x61, 0x63, 0x79, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65,\n  0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x64,\n  0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n  0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n  0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,\n  0x64, 0x73, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x6f, 0x72, 0x6b,\n  0x69, 0x6e, 0x67, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6d, 0x69, 0x6c,\n  0x6c, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x77, 0x69,\n  0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x76,\n  0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,\n  0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,\n  0x74, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,\n  0x72, 0x64, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x72, 0x65, 0x6d, 0x6f,\n  0x76, 0x65, 0x64, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e,\n  0x74, 0x72, 0x6f, 0x6c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x63, 0x75,\n  0x72, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c,\n  0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,\n  0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,\n  0x72, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69,\n  0x6e, 0x65, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76,\n  0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f,\n  0x67, 0x72, 0x61, 0x6d, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x6e, 0x75,\n  0x6d, 0x62, 0x65, 0x72, 0x73, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x65,\n  0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,\n  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,\n  0x67, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x6e,\n  0x65, 0x72, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x65, 0x72, 0x66,\n  0x65, 0x63, 0x74, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73,\n  0x74, 0x65, 0x6d, 0x73, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x75,\n  0x6c, 0x74, 0x75, 0x72, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2c, 0x6a,\n  0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,\n  0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x26, 0x71, 0x75, 0x6f, 0x74,\n  0x3b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x72, 0x65, 0x76, 0x69, 0x65,\n  0x77, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x6c,\n  0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72,\n  0x6f, 0x75, 0x67, 0x68, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x70,\n  0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,\n  0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,\n  0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,\n  0x68, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x64, 0x65, 0x63, 0x6c, 0x69,\n  0x6e, 0x65, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73,\n  0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x71, 0x75, 0x61,\n  0x6c, 0x69, 0x74, 0x79, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x67, 0x65,\n  0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x73,\n  0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,\n  0x72, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x72,\n  0x74, 0x73, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x6d, 0x62,\n  0x65, 0x72, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73,\n  0x70, 0x75, 0x74, 0x65, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x65, 0x78,\n  0x70, 0x72, 0x65, 0x73, 0x73, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x70,\n  0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,\n  0x6d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,\n  0x63, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67,\n  0x65, 0x64, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x76, 0x69, 0x63, 0x74,\n  0x6f, 0x72, 0x79, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x61,\n  0x73, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x66, 0x65,\n  0x61, 0x74, 0x75, 0x72, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x6d,\n  0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73,\n  0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c,\n  0x79, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69,\n  0x6e, 0x67, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6f, 0x62, 0x76, 0x69,\n  0x6f, 0x75, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x65,\n  0x73, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f,\n  0x75, 0x6c, 0x3e, 0x0d, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x61,\n  0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,\n  0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,\n  0x65, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x73, 0x6b, 0x74,\n  0x6f, 0x70, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x70, 0x61, 0x74, 0x74,\n  0x65, 0x72, 0x6e, 0x75, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x67,\n  0x69, 0x74, 0x61, 0x6c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x65,\n  0x62, 0x73, 0x69, 0x74, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x63,\n  0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,\n  0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65,\n  0x73, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x26, 0x61, 0x6d, 0x70,\n  0x3b, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x72, 0x65, 0x6c, 0x65,\n  0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x67, 0x65, 0x74,\n  0x74, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x6e, 0x6f,\n  0x74, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x63,\n  0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,\n  0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63,\n  0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67,\n  0x65, 0x73, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x3d, 0x31, 0x26, 0x61,\n  0x6d, 0x70, 0x3b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x3d, 0x20,\n  0x6e, 0x65, 0x77, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x75, 0x70,\n  0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4e,\n  0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,\n  0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,\n  0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x74, 0x6f, 0x6f, 0x6c, 0x62,\n  0x61, 0x72, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x63, 0x61,\n  0x75, 0x73, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x75,\n  0x74, 0x73, 0x63, 0x68, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x77, 0x6f,\n  0x72, 0x6b, 0x65, 0x72, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x79, 0x62,\n  0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79,\n  0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,\n  0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x77, 0x65, 0x61, 0x70, 0x6f,\n  0x6e, 0x73, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x26, 0x6c, 0x74, 0x3b,\n  0x21, 0x2d, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x65, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x75,\n  0x74, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x64,\n  0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,\n  0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d,\n  0x22, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x69,\n  0x6e, 0x67, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x61, 0x6c,\n  0x69, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x68, 0x65, 0x61,\n  0x76, 0x69, 0x6c, 0x79, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x31,\n  0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,\n  0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,\n  0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,\n  0x67, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x62, 0x69, 0x6c, 0x6c, 0x69,\n  0x6f, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x72, 0x6d,\n  0x61, 0x6e, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x66,\n  0x6f, 0x72, 0x6d, 0x3e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x77, 0x68,\n  0x65, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,\n  0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,\n  0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,\n  0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x69, 0x66, 0x6f,\n  0x72, 0x6d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x69, 0x64, 0x65,\n  0x62, 0x61, 0x72, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 0x6f, 0x68, 0x6f, 0x6c,\n  0x69, 0x64, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70, 0x61,\n  0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61,\n  0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67,\n  0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e,\n  0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x6f, 0x75, 0x67, 0x68,\n  0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x20,\n  0x6e, 0x6f, 0x74, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x72, 0x69,\n  0x74, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x6c, 0x61,\n  0x63, 0x6b, 0x20, 0x6f, 0x66, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,\n  0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d,\n  0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,\n  0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61,\n  0x72, 0x79, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x20, 0x66,\n  0x61, 0x63, 0x74, 0x61, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x43, 0x68, 0x61,\n  0x72, 0x6c, 0x65, 0x73, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x72,\n  0x6f, 0x75, 0x67, 0x68, 0x74, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x6c,\n  0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,\n  0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,\n  0x73, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x70, 0x72, 0x65, 0x6d, 0x69,\n  0x75, 0x6d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x65, 0x72,\n  0x69, 0x63, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x65,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x63,\n  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,\n  0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,\n  0x65, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x62, 0x69,\n  0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x77, 0x61, 0x6e, 0x74,\n  0x20, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x46, 0x69, 0x72,\n  0x65, 0x66, 0x6f, 0x78, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x73, 0x69,\n  0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x64, 0x6d,\n  0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,\n  0x72, 0x61, 0x70, 0x69, 0x64, 0x6c, 0x79, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74,\n  0x65, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x65, 0x6d, 0x65, 0x72, 0x67,\n  0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x66, 0x6f, 0x75, 0x6e,\n  0x64, 0x65, 0x64, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x66, 0x6f, 0x72,\n  0x6d, 0x75, 0x6c, 0x61, 0x64, 0x79, 0x6e, 0x61, 0x73, 0x74, 0x79, 0x68, 0x6f,\n  0x77, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x72,\n  0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,\n  0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,\n  0x72, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x6c, 0x61, 0x72, 0x67, 0x65,\n  0x6c, 0x79, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x26, 0x71, 0x75,\n  0x6f, 0x74, 0x3b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x64, 0x77,\n  0x61, 0x72, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,\n  0x62, 0x65, 0x72, 0x74, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x50,\n  0x61, 0x63, 0x69, 0x66, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,\n  0x75, 0x70, 0x20, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,\n  0x3a, 0x77, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x65, 0x6c,\n  0x65, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x61,\n  0x72, 0x63, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x61, 0x63, 0x71,\n  0x75, 0x69, 0x72, 0x65, 0x6d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x67, 0x72,\n  0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x74,\n  0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74,\n  0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,\n  0x67, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x69, 0x6d,\n  0x75, 0x6d, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x6d, 0x6f, 0x72, 0x6e,\n  0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20,\n  0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x76, 0x61,\n  0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x6d,\n  0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,\n  0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,\n  0x74, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x65, 0x78, 0x74, 0x72, 0x65,\n  0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x74, 0x74,\n  0x6f, 0x6d, 0x3a, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x61, 0x6c, 0x6c,\n  0x20, 0x74, 0x68, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x6e,\n  0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x20,\n  0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,\n  0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,\n  0x73, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x67, 0x61, 0x69, 0x6e,\n  0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x29, 0x28, 0x29,\n  0x3b, 0x0d, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x6f,\n  0x75, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f,\n  0x6d, 0x70, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x70,\n  0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,\n  0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x27, 0x27, 0x54, 0x68, 0x65,\n  0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f,\n  0x72, 0x65, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6c, 0x6c,\n  0x65, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x61, 0x62, 0x69,\n  0x6c, 0x69, 0x74, 0x79, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x61,\n  0x72, 0x65, 0x65, 0x72, 0x73, 0x29, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63,\n  0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,\n  0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,\n  0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,\n  0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73,\n  0x6f, 0x6c, 0x65, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x70,\n  0x6f, 0x72, 0x74, 0x73, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x68,\n  0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6e,\n  0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,\n  0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,\n  0x67, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x73, 0x65, 0x74, 0x74, 0x6c,\n  0x65, 0x64, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x63, 0x61, 0x75, 0x73,\n  0x69, 0x6e, 0x67, 0x2d, 0x77, 0x65, 0x62, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x61,\n  0x69, 0x6d, 0x65, 0x64, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x65, 0x63, 0x68,\n  0x61, 0x70, 0x74, 0x65, 0x72, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x73, 0x54,\n  0x68, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61,\n  0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,\n  0x73, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,\n  0x64, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x68, 0x75, 0x6e, 0x64,\n  0x72, 0x65, 0x64, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x5f, 0x62, 0x75,\n  0x74, 0x74, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x72, 0x65,\n  0x61, 0x63, 0x68, 0x65, 0x64, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x64,\n  0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,\n  0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,\n  0x64, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x69, 0x74, 0x68,\n  0x65, 0x72, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6c, 0x79, 0x67, 0x72, 0x65, 0x61,\n  0x74, 0x65, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70,\n  0x72, 0x6f, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x70,\n  0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x77,\n  0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,\n  0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,\n  0x74, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69,\n  0x74, 0x79, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x43, 0x75, 0x6c, 0x74,\n  0x75, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65,\n  0x61, 0x72, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x72,\n  0x6f, 0x77, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x6c, 0x7d,\n  0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,\n  0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x68, 0x69, 0x64, 0x65, 0x28, 0x29,\n  0x3b, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x61, 0x61, 0x6e, 0x73, 0x77, 0x65,\n  0x72, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x65,\n  0x72, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x65, 0x72,\n  0x69, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x53, 0x65,\n  0x76, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46,\n  0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,\n  0x64, 0x44, 0x65, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x76, 0x6f, 0x69, 0x64, 0x28,\n  0x30, 0x29, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x6a, 0x73, 0x70, 0x72, 0x65, 0x76,\n  0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,\n  0x70, 0x68, 0x65, 0x6e, 0x0a, 0x0a, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x62,\n  0x73, 0x65, 0x72, 0x76, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x4d,\n  0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,\n  0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x73, 0x2e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x0a, 0x0a, 0x4d, 0x61, 0x6e,\n  0x79, 0x20, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x70, 0x6f, 0x77, 0x65,\n  0x72, 0x65, 0x64, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x69, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x6d, 0x65,\n  0x64, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x6f,\n  0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,\n  0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63,\n  0x65, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x65, 0x20, 0x42, 0x65, 0x6c, 0x67, 0x69,\n  0x75, 0x6d, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x3e, 0x74, 0x77, 0x69, 0x74,\n  0x74, 0x65, 0x72, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x77, 0x61, 0x69,\n  0x74, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x72, 0x66, 0x61, 0x72, 0x65, 0x20, 0x4f,\n  0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x70,\n  0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61,\n  0x72, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74,\n  0x72, 0x79, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6c, 0x6f, 0x73, 0x73,\n  0x20, 0x6f, 0x66, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61, 0x73, 0x47, 0x65, 0x6f,\n  0x72, 0x67, 0x69, 0x61, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3c, 0x68,\n  0x65, 0x61, 0x64, 0x3e, 0x3c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x31,\n  0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,\n  0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x72, 0x72, 0x69,\n  0x65, 0x64, 0x31, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x3c, 0x2f, 0x68, 0x33,\n  0x3e, 0x0a, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x63,\n  0x6f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x77, 0x65,\n  0x64, 0x64, 0x69, 0x6e, 0x67, 0x30, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6d,\n  0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x6f, 0x66, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79,\n  0x20, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20,\n  0x6f, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x72, 0x69, 0x73, 0x65,\n  0x20, 0x6f, 0x66, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x70, 0x6c, 0x75,\n  0x73, 0x6f, 0x6e, 0x65, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x28, 0x74,\n  0x68, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x6f, 0x75, 0x67, 0x6c, 0x61, 0x73, 0x6a,\n  0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73,\n  0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e,\n  0x74, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x76, 0x65, 0x68, 0x69, 0x63,\n  0x6c, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x63, 0x72, 0x79, 0x73,\n  0x74, 0x61, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x57, 0x69, 0x6e,\n  0x64, 0x6f, 0x77, 0x73, 0x65, 0x6e, 0x6a, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x20,\n  0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x3c,\n  0x61, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,\n  0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68,\n  0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x74, 0x69, 0x72,\n  0x65, 0x64, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x68, 0x69, 0x64, 0x64,\n  0x65, 0x6e, 0x3b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x65,\n  0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x77, 0x61,\n  0x73, 0x20, 0x6e, 0x6f, 0x74, 0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61, 0x74, 0x63,\n  0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,\n  0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e,\n  0x73, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x61, 0x3a, 0x68, 0x6f, 0x76,\n  0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x72, 0x65, 0x6e,\n  0x63, 0x68, 0x20, 0x6c, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70,\n  0x69, 0x63, 0x61, 0x6c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x6e,\n  0x65, 0x6d, 0x69, 0x65, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x67,\n  0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64,\n  0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,\n  0x68, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2d, 0x69, 0x6d, 0x61, 0x67,\n  0x65, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x74,\n  0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6e,\n  0x76, 0x65, 0x72, 0x74, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x6e,\n  0x74, 0x65, 0x72, 0x65, 0x64, 0x66, 0x69, 0x72, 0x73, 0x74, 0x22, 0x3e, 0x63,\n  0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x6c, 0x61, 0x6e, 0x64,\n  0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x68, 0x65, 0x20, 0x77, 0x61,\n  0x73, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x73, 0x20, 0x73, 0x75,\n  0x63, 0x68, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70,\n  0x61, 0x6e, 0x3e, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6e,\n  0x65, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x79,\n  0x73, 0x74, 0x65, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x66,\n  0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,\n  0x72, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67,\n  0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x65, 0x73, 0x63, 0x65,\n  0x6e, 0x74, 0x69, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x75, 0x63, 0x6c,\n  0x65, 0x61, 0x72, 0x4a, 0x65, 0x77, 0x69, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f,\n  0x74, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x66, 0x6c,\n  0x6f, 0x77, 0x65, 0x72, 0x73, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x72,\n  0x65, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20,\n  0x77, 0x68, 0x6f, 0x20, 0x77, 0x61, 0x73, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,\n  0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x69, 0x63, 0x69,\n  0x64, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x70, 0x65, 0x72, 0x69,\n  0x6f, 0x64, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x6f, 0x63,\n  0x69, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f,\n  0x6d, 0x62, 0x69, 0x6e, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x77,\n  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x3c,\n  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,\n  0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x6f, 0x6f, 0x6b, 0x69,\n  0x65, 0x73, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x65, 0x73, 0x6f,\n  0x6c, 0x76, 0x65, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x62, 0x72, 0x69,\n  0x65, 0x66, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x6f,\n  0x20, 0x6d, 0x75, 0x63, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x64,\n  0x65, 0x70, 0x69, 0x63, 0x74, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,\n  0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x73, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x61, 0x72, 0x69,\n  0x6e, 0x67, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x76, 0x69,\n  0x73, 0x65, 0x64, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x2d, 0x77, 0x69,\n  0x64, 0x74, 0x68, 0x3a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x74, 0x6f,\n  0x6f, 0x6c, 0x74, 0x69, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64,\n  0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68,\n  0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,\n  0x28, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x69,\n  0x6e, 0x67, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x67, 0x72,\n  0x65, 0x65, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x52, 0x69, 0x63,\n  0x68, 0x61, 0x72, 0x64, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x70, 0x6c,\n  0x61, 0x73, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c,\n  0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,\n  0x75, 0x6c, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,\n  0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x79, 0x73, 0x69,\n  0x63, 0x73, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x65, 0x63,\n  0x75, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e,\n  0x6b, 0x20, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3c, 0x62,\n  0x72, 0x20, 0x2f, 0x3e, 0x0a, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x63,\n  0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x6d,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65,\n  0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x3c, 0x2f, 0x68, 0x31, 0x3e,\n  0x0d, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x3f, 0x78, 0x6d, 0x6c,\n  0x20, 0x76, 0x65, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x61,\n  0x6d, 0x6f, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x69,\n  0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x20, 0x2d, 0x2d, 0x3e, 0x29,\n  0x2e, 0x61, 0x74, 0x74, 0x72, 0x28, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,\n  0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66,\n  0x66, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x56, 0x69, 0x6e, 0x63, 0x65,\n  0x6e, 0x74, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x73, 0x72, 0x63,\n  0x3d, 0x22, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x64, 0x65, 0x73,\n  0x70, 0x69, 0x74, 0x65, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,\n  0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x68,\n  0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20,\n  0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,\n  0x73, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x61, 0x20, 0x6c, 0x61, 0x72,\n  0x67, 0x65, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x6c, 0x61, 0x74, 0x65,\n  0x72, 0x2c, 0x20, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x66, 0x61, 0x76,\n  0x69, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x75,\n  0x6e, 0x67, 0x61, 0x72, 0x79, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,\n  0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74,\n  0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,\n  0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x61, 0x6e,\n  0x64, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x65, 0x26, 0x71, 0x75,\n  0x6f, 0x74, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x66,\n  0x74, 0x22, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x47, 0x6f,\n  0x6c, 0x64, 0x65, 0x6e, 0x20, 0x41, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x67,\n  0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67,\n  0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f,\n  0x66, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x73,\n  0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x2e, 0x73, 0x72, 0x63,\n  0x20, 0x3d, 0x20, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x72, 0x65, 0x67,\n  0x69, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x75,\n  0x73, 0x6c, 0x69, 0x6d, 0x73, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x69,\n  0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,\n  0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x65, 0x64,\n  0x2c, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x73, 0x68, 0x6f, 0x77,\n  0x5f, 0x61, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x73, 0x63, 0x61,\n  0x70, 0x65, 0x28, 0x41, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x6e,\n  0x65, 0x74, 0x69, 0x63, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2c, 0x49, 0x6e,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48,\n  0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,\n  0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x0a, 0x09, 0x09, 0x3c, 0x21, 0x2d,\n  0x2d, 0x44, 0x61, 0x6e, 0x69, 0x65, 0x6c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69,\n  0x6e, 0x67, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3e, 0x69, 0x6d, 0x70, 0x6f,\n  0x73, 0x65, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x62, 0x72,\n  0x61, 0x68, 0x61, 0x6d, 0x28, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x7b, 0x77,\n  0x69, 0x64, 0x74, 0x68, 0x3a, 0x70, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x29,\n  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x28, 0x7c, 0x7c, 0x20, 0x5b, 0x5d, 0x3b, 0x0a,\n  0x44, 0x41, 0x54, 0x41, 0x5b, 0x20, 0x2a, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,\n  0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61,\n  0x6c, 0x20, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x69, 0x6e,\n  0x6c, 0x79, 0x20, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x27, 0x69, 0x6e, 0x73,\n  0x74, 0x61, 0x6c, 0x6c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x69, 0x66,\n  0x28, 0x74, 0x79, 0x70, 0x65, 0x49, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x26,\n  0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x22, 0x3e, 0x54, 0x65, 0x72, 0x6d, 0x73,\n  0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x69,\n  0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x67, 0x61, 0x69, 0x6e,\n  0x65, 0x64, 0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6a, 0x75, 0x73,\n  0x74, 0x69, 0x66, 0x79, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x73, 0x66, 0x61,\n  0x63, 0x74, 0x6f, 0x72, 0x79, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x61,\n  0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,\n  0x6c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x77,\n  0x6e, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c,\n  0x3d, 0x22, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x63, 0x6f, 0x6e, 0x63,\n  0x65, 0x72, 0x74, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x64, 0x6f, 0x6c,\n  0x6c, 0x61, 0x72, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x68,\n  0x70, 0x3f, 0x69, 0x64, 0x3d, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x29,\n  0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61,\n  0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,\n  0x73, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,\n  0x73, 0x73, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x72,\n  0x6f, 0x69, 0x64, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x69, 0x6c, 0x6c,\n  0x6e, 0x65, 0x73, 0x73, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x65,\n  0x6e, 0x74, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x6d,\n  0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,\n  0x65, 0x78, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,\n  0x65, 0x64, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x0a, 0x09, 0x3c, 0x21, 0x2d,\n  0x2d, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x6c, 0x69, 0x6e, 0x6b,\n  0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x42, 0x6f, 0x6f,\n  0x6b, 0x20, 0x6f, 0x66, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x6d, 0x69,\n  0x6e, 0x2e, 0x6a, 0x73, 0x3f, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6b,\n  0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x27, 0x73,\n  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,\n  0x3d, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x20, 0x52,\n  0x69, 0x67, 0x3b, 0x0a, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x72, 0x61, 0x69, 0x73,\n  0x69, 0x6e, 0x67, 0x20, 0x41, 0x6c, 0x73, 0x6f, 0x2c, 0x20, 0x63, 0x72, 0x75,\n  0x63, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x3e, 0x64, 0x65,\n  0x63, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x66,\n  0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x61, 0x73, 0x20, 0x6d, 0x75, 0x63, 0x68,\n  0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c,\n  0x20, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,\n  0x3d, 0x20, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x74, 0x6f, 0x77, 0x61,\n  0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x69,\n  0x76, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x50, 0x72,\n  0x65, 0x6d, 0x69, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x56,\n  0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,\n  0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65,\n  0x64, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x70, 0x6f, 0x76, 0x65, 0x72,\n  0x74, 0x79, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x69,\n  0x6e, 0x67, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x74,\n  0x68, 0x6f, 0x6e, 0x79, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x20, 0x52, 0x65,\n  0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x72,\n  0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x63, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,\n  0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20, 0x69,\n  0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x64,\n  0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x64,\n  0x3e, 0x0d, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61,\n  0x64, 0x69, 0x75, 0x6d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x76, 0x61,\n  0x72, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x73, 0x68,\n  0x65, 0x6c, 0x64, 0x20, 0x62, 0x79, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x72, 0x65,\n  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74,\n  0x79, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x77, 0x68, 0x6f, 0x20, 0x68,\n  0x61, 0x64, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x77, 0x6e,\n  0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x27, 0x63, 0x6c,\n  0x69, 0x63, 0x6b, 0x27, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x6b, 0x65,\n  0x79, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x63,\n  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x3b,\n  0x41, 0x6e, 0x64, 0x72, 0x65, 0x77, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,\n  0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x6f, 0x72, 0x20, 0x6d, 0x6f,\n  0x72, 0x65, 0x33, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75,\n  0x72, 0x6e, 0x3b, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x70, 0x6c, 0x75,\n  0x67, 0x69, 0x6e, 0x73, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x68, 0x65,\n  0x72, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,\n  0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,\n  0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74,\n  0x6f, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x72, 0x65,\n  0x73, 0x73, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x66, 0x69, 0x6e, 0x67,\n  0x65, 0x72, 0x73, 0x44, 0x75, 0x6b, 0x65, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f,\n  0x70, 0x6c, 0x65, 0x2c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x77, 0x68,\n  0x61, 0x74, 0x20, 0x69, 0x73, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x61,\n  0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x3e,\n  0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63,\n  0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x67, 0x61, 0x69, 0x6e,\n  0x69, 0x6e, 0x67, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x53, 0x75, 0x6d,\n  0x6d, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x6c, 0x6f,\n  0x79, 0x61, 0x6c, 0x74, 0x79, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61,\n  0x6e, 0x64, 0x20, 0x77, 0x61, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72,\n  0x73, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,\n  0x20, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x73, 0x73, 0x69,\n  0x61, 0x6e, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x65,\n  0x72, 0x74, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x65, 0x74,\n  0x20, 0x6f, 0x66, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x2e, 0x61,\n  0x70, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x6f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x66,\n  0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6f, 0x66,\n  0x62, 0x65, 0x6e, 0x65, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74,\n  0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x6e,\n  0x64, 0x73, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x72, 0x63,\n  0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x63, 0x6c, 0x6f,\n  0x73, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x6e,\n  0x73, 0x74, 0x65, 0x61, 0x64, 0x66, 0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x61,\n  0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2e, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x2e,\n  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,\n  0x72, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65,\n  0x63, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x3d, 0x20, 0x4d, 0x61,\n  0x74, 0x68, 0x2e, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x6c,\n  0x69, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x20,\n  0x77, 0x68, 0x6f, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x79,\n  0x65, 0x61, 0x72, 0x20, 0x6f, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,\n  0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,\n  0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20,\n  0x6f, 0x66, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x72, 0x65, 0x6e, 0x61,\n  0x6d, 0x65, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x68, 0x65, 0x61,\n  0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6c,\n  0x6f, 0x75, 0x64, 0x66, 0x72, 0x77, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x4d,\n  0x61, 0x72, 0x63, 0x68, 0x20, 0x31, 0x6b, 0x6e, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,\n  0x6e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,\n  0x73, 0x74, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x6b,\n  0x73, 0x22, 0x3e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x45, 0x4e, 0x44,\n  0x20, 0x2d, 0x2d, 0x3e, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x61, 0x77,\n  0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48,\n  0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x79, 0x20,\n  0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,\n  0x6c, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65,\n  0x74, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3e, 0x73, 0x69, 0x6e, 0x67,\n  0x69, 0x6e, 0x67, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x72, 0x61,\n  0x73, 0x69, 0x6c, 0x29, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x72, 0x65,\n  0x70, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x72, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x66,\n  0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x64,\n  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x75,\n  0x70, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x62, 0x6f, 0x74, 0x68, 0x20,\n  0x6f, 0x66, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x61, 0x77, 0x20,\n  0x74, 0x68, 0x65, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6c,\n  0x6f, 0x75, 0x72, 0x73, 0x69, 0x66, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x77, 0x68,\n  0x65, 0x6e, 0x20, 0x68, 0x65, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x70,\n  0x75, 0x73, 0x68, 0x28, 0x66, 0x75, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x20,\n  0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,\n  0x79, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x6a, 0x75, 0x72,\n  0x65, 0x64, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x72, 0x6d,\n  0x69, 0x6e, 0x67, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x6f, 0x62, 0x6a,\n  0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x75, 0x73,\n  0x65, 0x20, 0x6f, 0x66, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x3c,\n  0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,\n  0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64,\n  0x65, 0x73, 0x69, 0x78, 0x74, 0x65, 0x65, 0x6e, 0x49, 0x73, 0x6c, 0x61, 0x6d,\n  0x69, 0x63, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x65, 0x6e, 0x74, 0x69,\n  0x72, 0x65, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74,\n  0x69, 0x76, 0x65, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6f, 0x6e,\n  0x65, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x73,\n  0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73,\n  0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69,\n  0x6e, 0x3c, 0x74, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x66, 0x75, 0x6e, 0x65, 0x72,\n  0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64,\n  0x6c, 0x65, 0x20, 0x63, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x70, 0x72, 0x6f,\n  0x70, 0x68, 0x65, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x64, 0x6f,\n  0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x20,\n  0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,\n  0x61, 0x6c, 0x67, 0x65, 0x62, 0x72, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,\n  0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6e, 0x20, 0x61,\n  0x6e, 0x64, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0a, 0x20, 0x68, 0x65, 0x20, 0x6c,\n  0x65, 0x66, 0x74, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x28, 0x29, 0x66, 0x61, 0x6c,\n  0x73, 0x65, 0x29, 0x3b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x61,\n  0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6e,\n  0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x61,\n  0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x29, 0x3b,\n  0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x74, 0x75,\n  0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x66, 0x6f,\n  0x72, 0x65, 0x20, 0x42, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x68, 0x61,\n  0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x43, 0x61,\n  0x70, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x67,\n  0x6f, 0x64, 0x64, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x20, 0x2d, 0x2d, 0x3e,\n  0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x62, 0x75, 0x74, 0x20, 0x77, 0x61,\n  0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65,\n  0x6e, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x3d, 0x66, 0x61, 0x6c,\n  0x73, 0x65, 0x26, 0x4c, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x6e, 0x77, 0x65, 0x20,\n  0x6b, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x75,\n  0x64, 0x61, 0x69, 0x73, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x61,\n  0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20,\n  0x68, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x61,\n  0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x27, 0x2c, 0x62, 0x6f, 0x74, 0x68, 0x20,\n  0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x0a, 0x0a, 0x3c, 0x21,\n  0x2d, 0x2d, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x68, 0x61, 0x72,\n  0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x6f,\n  0x72, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x73,\n  0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x42, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x64,\n  0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74,\n  0x6f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x64, 0x6f, 0x77, 0x6e, 0x20,\n  0x69, 0x6e, 0x68, 0x61, 0x72, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x65, 0x65,\n  0x64, 0x6f, 0x6d, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x72, 0x79, 0x2f, 0x61, 0x62,\n  0x6f, 0x75, 0x74, 0x2e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x65,\n  0x67, 0x65, 0x6e, 0x64, 0x73, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6d,\n  0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,\n  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,\n  0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x70, 0x61, 0x69, 0x6e, 0x74,\n  0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x61, 0x72, 0x65,\n  0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65, 0x6c,\n  0x69, 0x76, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x30, 0x30,\n  0x26, 0x61, 0x6d, 0x70, 0x3b, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x77,\n  0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2f, 0x2a, 0x20, 0x3c, 0x21, 0x5b, 0x43,\n  0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x3d, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65,\n  0x64, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x75, 0x73, 0x65, 0x73,\n  0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x50, 0x75,\n  0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77, 0x74, 0x61,\n  0x63, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x77,\n  0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x73, 0x20, 0x6f, 0x66,\n  0x65, 0x61, 0x73, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f,\n  0x77, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x20, 0x73, 0x69, 0x6d, 0x70,\n  0x6c, 0x65, 0x7d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x73, 0x65, 0x76, 0x65,\n  0x6e, 0x74, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x77, 0x65, 0x6e,\n  0x74, 0x20, 0x74, 0x6f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x69,\n  0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x72,\n  0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20,\n  0x77, 0x77, 0x2e, 0x22, 0x29, 0x3b, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x69, 0x6e,\n  0x67, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x6f, 0x3a, 0x6d, 0x61, 0x64, 0x65, 0x20,\n  0x69, 0x6e, 0x2e, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x61, 0x72, 0x72,\n  0x69, 0x65, 0x73, 0x7c, 0x7c, 0x7b, 0x7d, 0x3b, 0x77, 0x69, 0x77, 0x6f, 0x72,\n  0x6b, 0x20, 0x6f, 0x66, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65,\n  0x66, 0x65, 0x61, 0x74, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x6f,\n  0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,\n  0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e,\n  0x67, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x3e, 0x3c, 0x63, 0x6f, 0x6d, 0x53, 0x63,\n  0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x51, 0x75, 0x65,\n  0x72, 0x79, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61,\n  0x73, 0x73, 0x69, 0x63, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x20, 0x57, 0x69,\n  0x6c, 0x68, 0x65, 0x6c, 0x6d, 0x73, 0x75, 0x62, 0x75, 0x72, 0x62, 0x73, 0x67,\n  0x65, 0x6e, 0x75, 0x69, 0x6e, 0x65, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x73,\n  0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,\n  0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x62, 0x6f, 0x64, 0x79, 0x20,\n  0x6f, 0x66, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,\n  0x61, 0x63, 0x74, 0x73, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x65, 0x66,\n  0x74, 0x20, 0x74, 0x6f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x68,\n  0x69, 0x64, 0x64, 0x65, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3c,\n  0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x0a, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20,\n  0x69, 0x6e, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,\n  0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x61, 0x79,\n  0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x61, 0xc3,\n  0xb1, 0x6f, 0x6c, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x72, 0x75, 0x6c,\n  0x69, 0x6e, 0x67, 0x20, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x61,\n  0x70, 0x74, 0x61, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x72,\n  0x75, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6b,\n  0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2c, 0x3d, 0x30, 0x26, 0x61, 0x6d, 0x70,\n  0x3b, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x61, 0x6d, 0x70, 0x6c,\n  0x65, 0x73, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x2f,\n  0x70, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e,\n  0x6e, 0x65, 0x64, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x66, 0x75,\n  0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42,\n  0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x3c, 0x2f,\n  0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,\n  0x73, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x68, 0x69, 0x6d, 0x20, 0x74,\n  0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d,\n  0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x6f, 0x20,\n  0x74, 0x61, 0x6b, 0x65, 0x77, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x73, 0x2e,\n  0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x70,\n  0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x3a,\n  0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,\n  0x73, 0x61, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x72, 0x62, 0x65,\n  0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f,\n  0x75, 0x70, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x66, 0x6c, 0x69,\n  0x67, 0x68, 0x74, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x6c,\n  0x6f, 0x77, 0x6c, 0x79, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x20, 0x73,\n  0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x09, 0x09,\n  0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,\n  0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x75, 0x6c, 0x3e, 0x0d, 0x0a,\n  0x20, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x70, 0x61, 0x69, 0x72,\n  0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x69, 0x74, 0x4b, 0x6f, 0x6e,\n  0x74, 0x61, 0x6b, 0x74, 0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x68, 0x61,\n  0x76, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20,\n  0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,\n  0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x29, 0x2e, 0x63, 0x73, 0x73,\n  0x28, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6c, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20,\n  0x74, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,\n  0x70, 0x73, 0x2c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x2d, 0x3e,\n  0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x20, 0x6f,\n  0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3c,\n  0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,\n  0x3e, 0x3c, 0x5c, 0x2f, 0x73, 0x63, 0x72, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e,\n  0x67, 0x43, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x6c, 0x61, 0x76, 0x65,\n  0x72, 0x79, 0x77, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x77, 0x68, 0x65, 0x72,\n  0x65, 0x61, 0x73, 0x21, 0x3d, 0x20, 0x27, 0x75, 0x6e, 0x64, 0x66, 0x6f, 0x72,\n  0x20, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x2d, 0x72,\n  0x69, 0x67, 0x68, 0x74, 0x3a, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x62,\n  0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,\n  0x75, 0x6e, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,\n  0x2d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2c, 0x69, 0x73, 0x20, 0x68, 0x6f,\n  0x6d, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x73, 0x69,\n  0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6f, 0x73,\n  0x74, 0x20, 0x6f, 0x66, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65,\n  0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x70,\n  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,\n  0x65, 0x61, 0x64, 0x27, 0x29, 0x5b, 0x30, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,\n  0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x3e, 0x26, 0x63, 0x6f, 0x70,\n  0x79, 0x3b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3e, 0x61, 0x73, 0x73, 0x65,\n  0x6d, 0x62, 0x6c, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65,\n  0x73, 0x73, 0x65, 0x64, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x73,\n  0x3a, 0x22, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x62,\n  0x79, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20,\n  0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65,\n  0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x64, 0x20, 0x74,\n  0x68, 0x65, 0x70, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x20, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72,\n  0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x62, 0x6f,\n  0x74, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,\n  0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65,\n  0x41, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,\n  0x73, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x64, 0x65, 0x6e, 0x6f, 0x74,\n  0x65, 0x73, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73,\n  0x74, 0x6f, 0x6e, 0x32, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x63, 0x63,\n  0x75, 0x73, 0x65, 0x64, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x67, 0x6f,\n  0x61, 0x6c, 0x20, 0x6f, 0x66, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x29,\n  0x2e, 0x62, 0x69, 0x6e, 0x64, 0x28, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74, 0x73,\n  0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6c,\n  0x79, 0x73, 0x74, 0x20, 0x2b, 0x20, 0x22, 0x67, 0x63, 0x6f, 0x6e, 0x73, 0x75,\n  0x6c, 0x74, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x68, 0x65, 0x6c, 0x70,\n  0x66, 0x75, 0x6c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x64, 0x69, 0x73, 0x20,\n  0x76, 0x65, 0x72, 0x79, 0x72, 0x27, 0x2b, 0x27, 0x69, 0x70, 0x74, 0x6c, 0x6f,\n  0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x69,\n  0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,\n  0x64, 0x61, 0x79, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,\n  0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3c, 0x6f, 0x62, 0x6a, 0x65,\n  0x63, 0x74, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,\n  0x6e, 0x67, 0x28, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x68, 0x65, 0x72,\n  0x65, 0x20, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x20,\n  0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x64,\n  0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,\n  0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x66,\n  0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61, 0x61, 0x76, 0x6f, 0x69, 0x64,\n  0x65, 0x64, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x32, 0x70, 0x78, 0x20,\n  0x33, 0x70, 0x78, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x61, 0x66, 0x74,\n  0x65, 0x72, 0x20, 0x61, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x65,\n  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x2d, 0x3d,\n  0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,\n  0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e,\n  0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x3d, 0x66, 0x61, 0x6d, 0x69, 0x6c,\n  0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x26, 0x6e, 0x62,\n  0x73, 0x70, 0x3b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,\n  0x72, 0x6e, 0x61, 0x6c, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x6e, 0x6f,\n  0x74, 0x69, 0x63, 0x65, 0x64, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x7d,\n  0x29, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65,\n  0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x69, 0x73, 0x20, 0x6a, 0x75,\n  0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x61,\n  0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x77, 0x68, 0x79,\n  0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x62, 0x72,\n  0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x68,\n  0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x6f, 0x66,\n  0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61,\n  0x74, 0x61, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x72,\n  0x61, 0x6c, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x3b, 0x6e, 0x6f, 0x72, 0x6d,\n  0x61, 0x6c, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,\n  0x73, 0x73, 0x2c, 0x20, 0x6f, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x63, 0x68,\n  0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x69,\n  0x6e, 0x76, 0x61, 0x64, 0x65, 0x64, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,\n  0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x73,\n  0x74, 0x61, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c,\n  0x6c, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x7d, 0x29, 0x3b, 0x0d,\n  0x0a, 0x20, 0x20, 0x69, 0x6d, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x74, 0x69, 0x6d,\n  0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x61,\n  0x74, 0x69, 0x73, 0x66, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x64,\n  0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6e,\n  0x65, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x6e, 0x6f, 0x74, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x73, 0x74,\n  0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x72, 0x63,\n  0x20, 0x3d, 0x20, 0x28, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x68, 0x65,\n  0x6c, 0x70, 0x20, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c,\n  0x61, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,\n  0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,\n  0x67, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64, 0x65,\n  0x72, 0x2d, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e,\n  0x6c, 0x65, 0x79, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x6c,\n  0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x61, 0x74, 0x69, 0x61, 0x20, 0x41,\n  0x62, 0x6f, 0x75, 0x74, 0x20, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x69,\n  0x74, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,\n  0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x29, 0x7b, 0x74, 0x68, 0x72, 0x6f,\n  0x77, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6c, 0x69, 0x67, 0x68, 0x74,\n  0x65, 0x72, 0x65, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x46, 0x46, 0x46,\n  0x46, 0x46, 0x22, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x6c, 0x69, 0x6b,\n  0x65, 0x20, 0x61, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x6c, 0x69,\n  0x76, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x70,\n  0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66,\n  0x75, 0x62, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,\n  0x73, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,\n  0x22, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x66, 0x65, 0x65, 0x64,\n  0x69, 0x6e, 0x67, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x66,\n  0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x57, 0x6f,\n  0x6d, 0x65, 0x6e, 0x27, 0x73, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x4d,\n  0x65, 0x78, 0x69, 0x63, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,\n  0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x61, 0x6e,\n  0x79, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6c, 0x61, 0x77, 0x73, 0x75,\n  0x69, 0x74, 0x64, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x75, 0x73,\n  0x68, 0x28, 0x7b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x73, 0x69, 0x6d,\n  0x70, 0x6c, 0x79, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x2e, 0x63,\n  0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x28, 0x6f,\n  0x6c, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x75, 0x73, 0x2e, 0x6a, 0x73, 0x22, 0x3e,\n  0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,\n  0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20,\n  0x74, 0x6f, 0x21, 0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x65, 0x73,\n  0x20, 0x69, 0x6e, 0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x6d, 0x61,\n  0x72, 0x6b, 0x65, 0x74, 0x77, 0x68, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x28, 0x22,\n  0x44, 0x4f, 0x4d, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6f,\n  0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x20,\n  0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,\n  0x73, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x6f, 0x20, 0x73, 0x68,\n  0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6d, 0x61, 0x64, 0x65,\n  0x20, 0x69, 0x74, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x77, 0x65, 0x72,\n  0x65, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72,\n  0x65, 0x63, 0x69, 0x73, 0x65, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x73,\n  0x72, 0x63, 0x20, 0x3d, 0x20, 0x27, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20,\n  0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x42, 0x61, 0x70, 0x74, 0x69, 0x73,\n  0x74, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x09, 0x76, 0x61,\n  0x72, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x32, 0x67, 0x72, 0x65, 0x77,\n  0x20, 0x75, 0x70, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x65,\n  0x6d, 0x6f, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x77, 0x61,\n  0x79, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x66,\n  0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20,\n  0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72,\n  0x6b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x73, 0x68, 0x61, 0x73, 0x20, 0x68,\n  0x61, 0x64, 0x65, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77,\n  0x28, 0x29, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x62, 0x6f, 0x6f,\n  0x6b, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x3d, 0x3d,\n  0x20, 0x22, 0x68, 0x74, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x0a,\n  0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,\n  0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,\n  0x2e, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x65,\n  0x64, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x68, 0x65, 0x20, 0x77,\n  0x65, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x73, 0x70, 0x72,\n  0x65, 0x61, 0x64, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x61, 0x20,\n  0x6d, 0x65, 0x61, 0x6e, 0x73, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x66,\n  0x6f, 0x72, 0x75, 0x6d, 0x73, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65,\n  0x22, 0x3e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x43, 0x6c, 0x65, 0x6d, 0x65, 0x6e,\n  0x74, 0x73, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x68, 0x69,\n  0x67, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x2d, 0x3e, 0x3c,\n  0x21, 0x2d, 0x2d, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20,\n  0x73, 0x65, 0x65, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x73, 0x65,\n  0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x61,\n  0x6e, 0x64, 0x20, 0x68, 0x69, 0x73, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74,\n  0x62, 0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,\n  0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x69, 0x6d,\n  0x67, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x65, 0x76, 0x65, 0x6e,\n  0x74, 0x73, 0x2c, 0x61, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x61, 0x6e, 0x64,\n  0x20, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x63, 0x68,\n  0x65, 0x61, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x61,\n  0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,\n  0x77, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x28, 0x6d, 0x6f, 0x73, 0x74, 0x6c,\n  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x20,\n  0x61, 0x20, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e,\n  0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72,\n  0x65, 0x20, 0x6f, 0x66, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6e, 0x61,\n  0x74, 0x75, 0x72, 0x65, 0x2c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x70,\n  0x65, 0x72, 0x69, 0x6f, 0x64, 0x2c, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66,\n  0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65,\n  0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73, 0x69,\n  0x6c, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x67, 0x61, 0x69,\n  0x6e, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x79, 0x6b, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x70, 0x75,\n  0x73, 0x68, 0x65, 0x64, 0x20, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x6e,\n  0x75, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,\n  0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,\n  0x6e, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20,\n  0x69, 0x73, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x6f, 0x77,\n  0x6e, 0x65, 0x64, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30, 0x2d, 0x63, 0x72, 0x65,\n  0x61, 0x74, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x6d, 0x61,\n  0x79, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6c,\n  0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65,\n  0x65, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x77, 0x69, 0x73, 0x68, 0x20, 0x74,\n  0x6f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x6c, 0x79, 0x63, 0x6f, 0x6f, 0x6c, 0x69,\n  0x6e, 0x67, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x69, 0x74, 0x2e, 0x20,\n  0x54, 0x68, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,\n  0x62, 0x65, 0x72, 0x73, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x73,\n  0x73, 0x75, 0x6d, 0x65, 0x73, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20,\n  0x3d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,\n  0x5f, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x72, 0x65, 0x6b, 0x6c, 0x61,\n  0x6d, 0x61, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x2c, 0x74, 0x6f, 0x20, 0x74,\n  0x68, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x70, 0x61, 0x6e,\n  0x65, 0x6c, 0x22, 0x3e, 0x4c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x2c, 0x64, 0x65,\n  0x66, 0x69, 0x6e, 0x65, 0x73, 0x63, 0x72, 0x75, 0x73, 0x68, 0x65, 0x64, 0x62,\n  0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x61, 0x6c,\n  0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,\n  0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x73, 0x74, 0x20,\n  0x69, 0x6e, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c,\n  0x69, 0x65, 0x73, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x73, 0x65, 0x72,\n  0x76, 0x65, 0x72, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65,\n  0x72, 0x68, 0x61, 0x70, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,\n  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x6c, 0x61, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x69, 0x73, 0x65, 0x20, 0x69,\n  0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x76, 0x69, 0x65, 0x77, 0x20,\n  0x6f, 0x66, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x65, 0x6d,\n  0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x61, 0x63,\n  0x6b, 0x69, 0x6e, 0x67, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x67, 0x69,\n  0x76, 0x65, 0x6e, 0x20, 0x61, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x63,\n  0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6f, 0x66,\n  0x20, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x75,\n  0x74, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x6f, 0x6e, 0x6c, 0x79, 0x20,\n  0x62, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x64,\n  0x6f, 0x65, 0x73, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x62, 0x61, 0x74,\n  0x74, 0x65, 0x72, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6c, 0x61, 0x73, 0x69,\n  0x6e, 0x67, 0x6c, 0x65, 0x73, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x69,\n  0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e,\n  0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,\n  0x20, 0x3d, 0x55, 0x53, 0x26, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x65, 0x20, 0x74,\n  0x68, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x62, 0x79, 0x20, 0x74,\n  0x68, 0x69, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x68, 0x65, 0x61,\n  0x64, 0x20, 0x6f, 0x66, 0x3a, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x6c, 0x65,\n  0x73, 0x62, 0x69, 0x61, 0x6e, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x61,\n  0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,\n  0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,\n  0x73, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72, 0x64, 0x2f, 0x70, 0x69, 0x78, 0x65,\n  0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6c,\n  0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x6a, 0x6f, 0x69,\n  0x6e, 0x74, 0x6c, 0x79, 0x73, 0x6b, 0x79, 0x73, 0x63, 0x72, 0x61, 0x55, 0x6e,\n  0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x41,\n  0x74, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73,\n  0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x2c, 0x70, 0x75, 0x72, 0x65, 0x6c, 0x79,\n  0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x65, 0x61, 0x73, 0x69, 0x6c,\n  0x79, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x61, 0x6f, 0x6e, 0x63, 0x6c,\n  0x69, 0x63, 0x6b, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x70, 0x6f, 0x69,\n  0x6e, 0x74, 0x65, 0x72, 0x68, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x76,\n  0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x64,\n  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65,\n  0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x77, 0x68,\n  0x6f, 0x6f, 0x72, 0x67, 0x2f, 0x57, 0x65, 0x62, 0x6f, 0x6e, 0x65, 0x20, 0x61,\n  0x6e, 0x64, 0x63, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x48, 0x65, 0x20, 0x64,\n  0x69, 0x65, 0x64, 0x73, 0x65, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x30, 0x30, 0x2c,\n  0x30, 0x30, 0x30, 0x20, 0x7b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x68, 0x61,\n  0x76, 0x65, 0x20, 0x74, 0x6f, 0x69, 0x66, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x61,\n  0x6e, 0x64, 0x20, 0x69, 0x74, 0x73, 0x73, 0x6f, 0x6c, 0x65, 0x6c, 0x79, 0x20,\n  0x6d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,\n  0x64, 0x44, 0x65, 0x74, 0x72, 0x6f, 0x69, 0x74, 0x61, 0x6d, 0x6f, 0x6e, 0x67,\n  0x73, 0x74, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d,\n  0x20, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x3c,\n  0x2f, 0x61, 0x3e, 0x3c, 0x4b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x46, 0x72,\n  0x61, 0x6e, 0x63, 0x69, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x68,\n  0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64,\n  0x68, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,\n  0x79, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x20, 0x68, 0x6f,\n  0x6d, 0x65, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x61,\n  0x74, 0x65, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x61, 0x6c, 0x6f, 0x6c, 0x69,\n  0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x77, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x66,\n  0x72, 0x65, 0x65, 0x20, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,\n  0x63, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,\n  0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x64,\n  0x61, 0x79, 0x6e, 0x65, 0x72, 0x76, 0x6f, 0x75, 0x73, 0x73, 0x71, 0x75, 0x61,\n  0x72, 0x65, 0x20, 0x7d, 0x3b, 0x69, 0x66, 0x28, 0x67, 0x6f, 0x69, 0x6e, 0x20,\n  0x77, 0x68, 0x61, 0x74, 0x69, 0x6d, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x73,\n  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74,\n  0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x6c, 0x79,\n  0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c,\n  0x20, 0x2d, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x75,\n  0x6d, 0x22, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x46, 0x72, 0x61, 0x6e,\n  0x63, 0x65, 0x2c, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x77, 0x61, 0x72,\n  0x20, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x61,\n  0x6b, 0x65, 0x20, 0x61, 0x20, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x6d,\n  0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79,\n  0x64, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,\n  0x79, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x3e, 0x6f, 0x62, 0x6c, 0x69, 0x67,\n  0x65, 0x64, 0x72, 0x69, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x22, 0x75, 0x6e, 0x64,\n  0x65, 0x66, 0x69, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x61,\n  0x72, 0x6c, 0x79, 0x20, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x69, 0x6e,\n  0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x73, 0x61,\n  0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72,\n  0x59, 0x61, 0x68, 0x6f, 0x6f, 0x21, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,\n  0x20, 0x73, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x65, 0x61, 0x6c, 0x6c,\n  0x79, 0x20, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f,\n  0x6d, 0x61, 0x6e, 0x3f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x64, 0x69, 0x72,\n  0x65, 0x63, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x62, 0x69,\n  0x63, 0x79, 0x63, 0x6c, 0x65, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x64,\n  0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67,\n  0x52, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,\n  0x20, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e,\n  0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x6e,\n  0x20, 0x61, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6f, 0x6e, 0x20,\n  0x74, 0x68, 0x69, 0x73, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x3b, 0x62,\n  0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61,\n  0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x77,\n  0x70, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20,\n  0x74, 0x61, 0x6b, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x62, 0x72, 0x69,\n  0x65, 0x66, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x6f, 0x75,\n  0x70, 0x73, 0x2e, 0x3b, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x65, 0x6e, 0x7a,\n  0x79, 0x6d, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e,\n  0x20, 0x6c, 0x61, 0x74, 0x65, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x74,\n  0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,\n  0x62, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e,\n  0x0a, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x72, 0x65, 0x61, 0x20, 0x70, 0x6c, 0x61,\n  0x63, 0x65, 0x5c, 0x75, 0x30, 0x30, 0x33, 0x43, 0x61, 0x61, 0x62, 0x6f, 0x75,\n  0x74, 0x20, 0x61, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x63, 0x6f,\n  0x75, 0x6e, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x3c, 0x53,\n  0x43, 0x52, 0x49, 0x50, 0x54, 0x52, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x74,\n  0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x78,\n  0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x78, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x73,\n  0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x69, 0x6e, 0x20, 0x73, 0x6f,\n  0x6d, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x77, 0x69, 0x63, 0x6f, 0x6d, 0x69,\n  0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x20, 0x55, 0x6e,\n  0x64, 0x65, 0x72, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x61, 0x73, 0x68, 0x61,\n  0x6e, 0x64, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x62, 0x79, 0x74,\n  0x68, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x72, 0x20, 0x6f, 0x66,\n  0x64, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d,\n  0x65, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x74, 0x61,\n  0x67, 0x65, 0x69, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x61, 0x26, 0x71, 0x75,\n  0x6f, 0x74, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x20,\n  0x6d, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x6f, 0x72, 0x65,\n  0x67, 0x69, 0x6d, 0x65, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3c,\n  0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x3c, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,\n  0x3b, 0x26, 0x67, 0x74, 0x3b, 0x3c, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,\n  0x73, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x6c,\n  0x79, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x72, 0x65, 0x20, 0x73, 0x69, 0x7a,\n  0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x68, 0x61, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x6f,\n  0x73, 0x74, 0x20, 0x3d, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x66,\n  0x65, 0x72, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73,\n  0x3d, 0x5b, 0x5d, 0x3b, 0x28, 0x66, 0x75, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,\n  0x73, 0x2f, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x61, 0x63, 0x74, 0x73, 0x20,\n  0x61, 0x73, 0x49, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3e, 0x0d, 0x0a, 0x0d,\n  0x0a, 0x3c, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x3c, 0x62,\n  0x72, 0x20, 0x2f, 0x3e, 0x42, 0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x63, 0x61,\n  0x74, 0x61, 0x6c, 0xc3, 0xa0, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65,\n  0x75, 0x72, 0x6f, 0x70, 0x65, 0x75, 0x65, 0x75, 0x73, 0x6b, 0x61, 0x72, 0x61,\n  0x67, 0x61, 0x65, 0x69, 0x6c, 0x67, 0x65, 0x73, 0x76, 0x65, 0x6e, 0x73, 0x6b,\n  0x61, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x6d, 0x65, 0x6e, 0x73, 0x61,\n  0x6a, 0x65, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x74, 0x72, 0x61, 0x62,\n  0x61, 0x6a, 0x6f, 0x6d, 0xc3, 0xa9, 0x78, 0x69, 0x63, 0x6f, 0x70, 0xc3, 0xa1,\n  0x67, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69,\n  0x73, 0x74, 0x65, 0x6d, 0x61, 0x6f, 0x63, 0x74, 0x75, 0x62, 0x72, 0x65, 0x64,\n  0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x61, 0xc3, 0xb1, 0x61, 0x64, 0x69, 0x72,\n  0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,\n  0x6f, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,\n  0x72, 0x61, 0x74, 0x72, 0x61, 0x76, 0xc3, 0xa9, 0x73, 0x67, 0x72, 0x61, 0x63,\n  0x69, 0x61, 0x73, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72, 0x6f,\n  0x63, 0x65, 0x73, 0x6f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x73, 0x63, 0x61,\n  0x6c, 0x69, 0x64, 0x61, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6e,\n  0xc3, 0xba, 0x6d, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x75, 0x65, 0x72, 0x64, 0x6f,\n  0x6d, 0xc3, 0xba, 0x73, 0x69, 0x63, 0x61, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,\n  0x6f, 0x6f, 0x66, 0x65, 0x72, 0x74, 0x61, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e,\n  0x6f, 0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x65, 0x73, 0x65, 0x6a, 0x65, 0x6d,\n  0x70, 0x6c, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x61, 0x64, 0x65,\n  0x6d, 0xc3, 0xa1, 0x73, 0x70, 0x72, 0x69, 0x76, 0x61, 0x64, 0x6f, 0x61, 0x67,\n  0x72, 0x65, 0x67, 0x61, 0x72, 0x65, 0x6e, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x70,\n  0x6f, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x73,\n  0x73, 0x65, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x72,\n  0x6f, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x65, 0x76, 0x65, 0x6e, 0x74,\n  0x6f, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x63, 0x75, 0x6c, 0x74,\n  0x75, 0x72, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,\n  0x72, 0x61, 0x64, 0x61, 0x61, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x65, 0x6d,\n  0x62, 0x61, 0x72, 0x67, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x67,\n  0x72, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,\n  0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x65, 0x73, 0x66, 0x65, 0x62, 0x72, 0x65, 0x72,\n  0x6f, 0x64, 0x69, 0x73, 0x65, 0xc3, 0xb1, 0x6f, 0x74, 0x75, 0x72, 0x69, 0x73,\n  0x6d, 0x6f, 0x63, 0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x70, 0x6f, 0x72, 0x74,\n  0x61, 0x64, 0x61, 0x65, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6f, 0x66, 0x61, 0x6d,\n  0x69, 0x6c, 0x69, 0x61, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x70, 0x65,\n  0x72, 0x6d, 0x69, 0x74, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x61, 0x72, 0x61,\n  0x6c, 0x67, 0x75, 0x6e, 0x61, 0x73, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73,\n  0x61, 0x6c, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x64,\n  0x6f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x61, 0x73, 0x74, 0xc3, 0xad, 0x74, 0x75,\n  0x6c, 0x6f, 0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x65, 0x72, 0x73, 0x65, 0x67, 0x75,\n  0x6e, 0x64, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x66, 0x72, 0x61,\n  0x6e, 0x63, 0x69, 0x61, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x6f, 0x73, 0x73, 0x65,\n  0x67, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x6d, 0x6f, 0x73, 0x65,\n  0x66, 0x65, 0x63, 0x74, 0x6f, 0x73, 0x6d, 0xc3, 0xa1, 0x6c, 0x61, 0x67, 0x61,\n  0x73, 0x65, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74,\n  0x61, 0x67, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x70, 0x72,\n  0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x67, 0x61, 0x72, 0x63,\n  0xc3, 0xad, 0x61, 0x61, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x63, 0x75,\n  0x61, 0x64, 0x6f, 0x72, 0x71, 0x75, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x6e,\n  0x63, 0x6c, 0x75, 0x73, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6d,\n  0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x73,\n  0x6d, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xad,\n  0x61, 0x6d, 0x61, 0xc3, 0xb1, 0x61, 0x6e, 0x61, 0xc3, 0xba, 0x6c, 0x74, 0x69,\n  0x6d, 0x61, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x6f, 0x73, 0x6f, 0x66, 0x69, 0x63,\n  0x69, 0x61, 0x6c, 0x74, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x6e, 0x69, 0x6e,\n  0x67, 0xc3, 0xba, 0x6e, 0x73, 0x61, 0x6c, 0x75, 0x64, 0x6f, 0x73, 0x70, 0x6f,\n  0x64, 0x65, 0x6d, 0x6f, 0x73, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x61, 0x72, 0x70,\n  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,\n  0x73, 0x73, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x65, 0x63,\n  0x75, 0x72, 0x69, 0x74, 0x79, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,\n  0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61,\n  0x69, 0x67, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x61,\n  0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,\n  0x6c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x65,\n  0x72, 0x76, 0x65, 0x64, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,\n  0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,\n  0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6d, 0x69, 0x6c,\n  0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,\n  0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x74, 0x65, 0x72,\n  0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x7a, 0x2d,\n  0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,\n  0x73, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,\n  0x6c, 0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70,\n  0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,\n  0x65, 0x73, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x6d, 0x6f, 0x76,\n  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,\n  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x74,\n  0x69, 0x63, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x72, 0x65,\n  0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,\n  0x6c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x69,\n  0x73, 0x74, 0x65, 0x72, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x64,\n  0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,\n  0x6f, 0x6c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x74,\n  0x74, 0x69, 0x6e, 0x67, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,\n  0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x72, 0x6e,\n  0x69, 0x6e, 0x67, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x61, 0x62,\n  0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,\n  0x73, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x6d, 0x61, 0x67, 0x61,\n  0x7a, 0x69, 0x6e, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x74,\n  0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,\n  0x72, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x3c, 0x73, 0x74,\n  0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,\n  0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x67, 0x65, 0x74,\n  0x68, 0x65, 0x72, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x62, 0x65,\n  0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,\n  0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74,\n  0x62, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c,\n  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,\n  0x63, 0x65, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61,\n  0x63, 0x6b, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,\n  0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x74, 0x75, 0x64, 0x65,\n  0x6e, 0x74, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x66, 0x69,\n  0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x72,\n  0x6e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x66, 0x65, 0x73, 0x74,\n  0x69, 0x76, 0x61, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6c,\n  0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,\n  0x65, 0x74, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x72, 0x61,\n  0x63, 0x74, 0x69, 0x63, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,\n  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x72, 0x72, 0x69,\n  0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x70, 0x72,\n  0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,\n  0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x61, 0x6e, 0x61, 0x6c,\n  0x79, 0x73, 0x69, 0x73, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x62,\n  0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,\n  0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x72, 0x65, 0x67,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,\n  0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,\n  0x61, 0x72, 0x6b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x63, 0x68,\n  0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,\n  0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x70, 0x61,\n  0x72, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x63,\n  0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,\n  0x72, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x64, 0x65, 0x6c,\n  0x69, 0x76, 0x65, 0x72, 0x79, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,\n  0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x3d, 0x20, 0x66, 0x61, 0x6c,\n  0x73, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x28, 0x76, 0x61, 0x72, 0x20, 0x61, 0x63,\n  0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,\n  0x79, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x65, 0x6e,\n  0x74, 0x69, 0x74, 0x79, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x65,\n  0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,\n  0x65, 0x64, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x63,\n  0x6c, 0x75, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,\n  0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x74, 0x69,\n  0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x61, 0x70,\n  0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,\n  0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x3e, 0x3c, 0x61, 0x64, 0x61, 0x75, 0x67,\n  0x68, 0x74, 0x65, 0x72, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x20, 0x63,\n  0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,\n  0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x73, 0x73,\n  0x65, 0x6d, 0x62, 0x6c, 0x79, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x66, 0x75, 0x6c,\n  0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x66, 0x69, 0x6e, 0x69, 0x73,\n  0x68, 0x65, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x63, 0x72,\n  0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e,\n  0x2f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x72, 0x65, 0x71, 0x75,\n  0x69, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62,\n  0x65, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n  0x65, 0x73, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x65, 0x78, 0x65,\n  0x72, 0x63, 0x69, 0x73, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,\n  0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,\n  0x61, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61,\n  0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,\n  0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x6f, 0x74, 0x74,\n  0x6f, 0x6d, 0x22, 0x3e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x3a,\n  0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,\n  0x65, 0x64, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6f, 0x66,\n  0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,\n  0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x6e,\n  0x67, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x73, 0x6c,\n  0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,\n  0x67, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x63, 0x75, 0x72, 0x72,\n  0x65, 0x6e, 0x63, 0x79, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x73,\n  0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,\n  0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x70, 0x72, 0x6f,\n  0x64, 0x75, 0x63, 0x65, 0x64, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65,\n  0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x73, 0x6f, 0x6c,\n  0x75, 0x74, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x72, 0x65,\n  0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22,\n  0x20, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x6e, 0x79, 0x77,\n  0x68, 0x65, 0x72, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x6c,\n  0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,\n  0x6c, 0x79, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x6f, 0x6c,\n  0x6c, 0x6f, 0x77, 0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,\n  0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75,\n  0x64, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x69, 0x6e,\n  0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x24, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29,\n  0x2e, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3e, 0x3c, 0x74, 0x72,\n  0x3e, 0x3c, 0x74, 0x64, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x72,\n  0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,\n  0x74, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c,\n  0x20, 0x69, 0x64, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,\n  0x48, 0x6f, 0x6d, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x77, 0x65, 0x62, 0x73, 0x69,\n  0x74, 0x65, 0x73, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x61, 0x6c,\n  0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,\n  0x79, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6d, 0x65, 0x73, 0x73,\n  0x61, 0x67, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x61,\n  0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3e, 0x73, 0x6f, 0x6d, 0x65, 0x77, 0x68,\n  0x61, 0x74, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x57, 0x65, 0x73,\n  0x74, 0x65, 0x72, 0x6e, 0x20, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22,\n  0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72,\n  0x61, 0x63, 0x74, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f,\n  0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,\n  0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0a, 0x6d, 0x65, 0x61, 0x73,\n  0x75, 0x72, 0x65, 0x73, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x76,\n  0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,\n  0x65, 0x64, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x6f, 0x72,\n  0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64,\n  0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x73, 0x74, 0x61, 0x6e, 0x64,\n  0x69, 0x6e, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,\n  0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,\n  0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x61, 0x63, 0x63, 0x75,\n  0x72, 0x61, 0x74, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73,\n  0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,\n  0x61, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x63, 0x72, 0x69,\n  0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79,\n  0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,\n  0x6e, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x61,\n  0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,\n  0x64, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x6d, 0x61, 0x63, 0x68,\n  0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20, 0x20, 0x6b,\n  0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,\n  0x6c, 0x79, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x6d,\n  0x62, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,\n  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63,\n  0x74, 0x65, 0x64, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x70, 0x61,\n  0x6b, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22,\n  0x20, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x6c, 0x61,\n  0x62, 0x65, 0x6c, 0x3e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x62,\n  0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,\n  0x73, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x70, 0x6c, 0x75,\n  0x67, 0x69, 0x6e, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x6e, 0x61, 0x6d,\n  0x65, 0x3d, 0x22, 0x20, 0x28, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x67, 0x72,\n  0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e,\n  0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6c, 0x61,\n  0x79, 0x73, 0x69, 0x61, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x6d,\n  0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,\n  0x74, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63, 0x68, 0x61,\n  0x6e, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20,\n  0x63, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x70, 0x61, 0x74, 0x74, 0x65,\n  0x72, 0x6e, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x67, 0x72,\n  0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,\n  0x73, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x75, 0x6c,\n  0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x63,\n  0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x69,\n  0x6e, 0x67, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x6c, 0x69,\n  0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,\n  0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x74, 0x65,\n  0x6e, 0x63, 0x65, 0x3c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3e, 0x63, 0x6f,\n  0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e,\n  0x67, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x65, 0x29, 0x73, 0x6f, 0x75, 0x74,\n  0x68, 0x65, 0x72, 0x6e, 0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x20, 0x6d,\n  0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x63, 0x61, 0x72, 0x6f, 0x75, 0x73,\n  0x65, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x6e, 0x74,\n  0x65, 0x72, 0x69, 0x6f, 0x72, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x22,\n  0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x74, 0x6f, 0x62,\n  0x65, 0x72, 0x20, 0x29, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6d,\n  0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x2d, 0x2d, 0x26, 0x67, 0x74, 0x3b, 0x0a,\n  0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x63, 0x68, 0x61, 0x69,\n  0x72, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x73,\n  0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x69, 0x63, 0x68, 0x61, 0x72,\n  0x64, 0x20, 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,\n  0x62, 0x61, 0x62, 0x6c, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,\n  0x62, 0x61, 0x73, 0x65, 0x62, 0x61, 0x6c, 0x6c, 0x6a, 0x75, 0x64, 0x67, 0x6d,\n  0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x2e, 0x63,\n  0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,\n  0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x64, 0x65, 0x66, 0x61,\n  0x75, 0x6c, 0x74, 0x22, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x65,\n  0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x74, 0x6c, 0x61,\n  0x6e, 0x64, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75, 0x61,\n  0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30,\n  0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,\n  0x6e, 0x63, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x22, 0x20,\n  0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,\n  0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x74,\n  0x61, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x6d,\n  0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x61,\n  0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,\n  0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x6c, 0x79, 0x3a, 0x20, 0x27, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x63, 0x6f,\n  0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,\n  0x67, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x42, 0x72, 0x69, 0x74,\n  0x69, 0x73, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x46,\n  0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f,\n  0x75, 0x73, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x6e,\n  0x63, 0x65, 0x72, 0x6e, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e,\n  0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x76, 0x20, 0x69,\n  0x64, 0x3d, 0x22, 0x57, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x72,\n  0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,\n  0x74, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x73, 0x65, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x66,\n  0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,\n  0x72, 0x79, 0x6c, 0x61, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x3d, 0x22,\n  0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69,\n  0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x3c, 0x2f,\n  0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,\n  0x73, 0x68, 0x61, 0x6d, 0x69, 0x6c, 0x74, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,\n  0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63,\n  0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x68, 0x65, 0x6d, 0x65,\n  0x73, 0x2f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x6f, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x6c,\n  0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72,\n  0x76, 0x61, 0x6c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x6e,\n  0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x65,\n  0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x6d, 0x65, 0x61, 0x73,\n  0x75, 0x72, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73,\n  0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x26, 0x68, 0x65, 0x6c, 0x6c, 0x69,\n  0x70, 0x3b, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x22, 0x20, 0x73,\n  0x69, 0x7a, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,\n  0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x20, 0x22, 0x20, 0x2f, 0x3e, 0x3c,\n  0x2f, 0x61, 0x3e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x3e, 0x73, 0x65,\n  0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,\n  0x6c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x6f, 0x70, 0x69, 0x6e,\n  0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x6f, 0x69, 0x73, 0x6c,\n  0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x09, 0x3c, 0x74, 0x69, 0x74, 0x6c,\n  0x65, 0x3e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x61, 0x74,\n  0x75, 0x72, 0x64, 0x61, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,\n  0x69, 0x74, 0x65, 0x6d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,\n  0x65, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x65,\n  0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,\n  0x6c, 0x3d, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x45, 0x73, 0x70, 0x61,\n  0xc3, 0xb1, 0x6f, 0x6c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x73,\n  0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f,\n  0x74, 0x3b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x79, 0x6d,\n  0x70, 0x74, 0x6f, 0x6d, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64,\n  0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74,\n  0x22, 0x3e, 0x3c, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x74,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,\n  0x2e, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x62, 0x6f, 0x72,\n  0x64, 0x65, 0x72, 0x3d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x63,\n  0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x2e, 0x0a, 0x0a, 0x53, 0x6f, 0x6d,\n  0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x69,\n  0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61,\n  0x2e, 0x73, 0x68, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x64, 0x65, 0x73, 0x69, 0x67,\n  0x6e, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x63, 0x6f,\n  0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,\n  0x73, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x73, 0x4f, 0x72, 0x69, 0x67,\n  0x69, 0x6e, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x73,\n  0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,\n  0x6f, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x61, 0x20, 0x26,\n  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x76, 0x69, 0x73,\n  0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x79, 0x6f,\n  0x75, 0x72, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,\n  0x20, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x6c,\n  0x69, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x70,\n  0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,\n  0x6e, 0x67, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63,\n  0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,\n  0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,\n  0x65, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x20, 0x67, 0x65,\n  0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31,\n  0x22, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x61, 0x6d, 0x69,\n  0x6c, 0x69, 0x61, 0x72, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x6d,\n  0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,\n  0x6e, 0x74, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e,\n  0x74, 0x61, 0x63, 0x74, 0x73, 0x2d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e,\n  0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x65, 0x6e, 0x67,\n  0x74, 0x68, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x69, 0x6e,\n  0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,\n  0x63, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x22, 0x64, 0x65, 0x66, 0x61,\n  0x75, 0x6c, 0x74, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x70,\n  0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x67, 0x6c, 0x6f, 0x73, 0x73, 0x61,\n  0x72, 0x79, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x75, 0x69,\n  0x64, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64,\n  0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64, 0x6c,\n  0x65, 0x22, 0x3e, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69,\n  0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x69, 0x73,\n  0x68, 0x6a, 0x6f, 0x6e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f,\n  0x72, 0x69, 0x74, 0x79, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63,\n  0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x61, 0x69, 0x6c, 0x61,\n  0x6e, 0x64, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3c, 0x68, 0x65,\n  0x61, 0x64, 0x3e, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,\n  0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x6f, 0x69, 0x6e, 0x74,\n  0x65, 0x72, 0x3b, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3c, 0x2f,\n  0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x3e, 0x6f, 0x6b, 0x6c, 0x61, 0x68, 0x6f, 0x6d,\n  0x61, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,\n  0x73, 0x74, 0x6f, 0x72, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x68,\n  0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,\n  0x63, 0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x28, 0x77,\n  0x68, 0x69, 0x63, 0x68, 0x20, 0x2e, 0x20, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20,\n  0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x74,\n  0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x70, 0x72,\n  0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,\n  0x20, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x71, 0x75, 0x69, 0x63,\n  0x6b, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65,\n  0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72,\n  0x6e, 0x20, 0x3b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x20, 0x68, 0x65,\n  0x69, 0x67, 0x68, 0x74, 0x3d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,\n  0x2c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x63, 0x68, 0x65, 0x63,\n  0x6b, 0x65, 0x64, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x6d, 0x61,\n  0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,\n  0x68, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x20, 0x57, 0x68,\n  0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x64,\n  0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x26, 0x65, 0x61, 0x63, 0x75, 0x74,\n  0x65, 0x3b, 0x68, 0x61, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x76, 0x61,\n  0x6c, 0x75, 0x61, 0x74, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,\n  0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x69, 0x65,\n  0x6e, 0x74, 0x73, 0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x6f,\n  0x6c, 0x6f, 0x72, 0x61, 0x64, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x22, 0x63, 0x61, 0x6d, 0x70, 0x62, 0x65, 0x6c, 0x6c, 0x3c, 0x21, 0x2d, 0x2d,\n  0x20, 0x65, 0x6e, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x3c,\n  0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,\n  0x73, 0x7c, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,\n  0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,\n  0x6e, 0x65, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x3c, 0x62,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74,\n  0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x20, 0x43, 0x6f, 0x6d,\n  0x70, 0x61, 0x6e, 0x79, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3c,\n  0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,\n  0x65, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x72,\n  0x73, 0x68, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x6c, 0x79, 0x29, 0x2e, 0x0a, 0x0a, 0x54,\n  0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x6d, 0x75,\n  0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,\n  0x0a, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x72, 0x74, 0x75, 0x67,\n  0x75, 0xc3, 0xaa, 0x73, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x20,\n  0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e,\n  0x0d, 0x0a, 0x61, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x65, 0x6d, 0x70,\n  0x68, 0x61, 0x73, 0x69, 0x73, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73,\n  0x66, 0x61, 0x6e, 0x63, 0x79, 0x62, 0x6f, 0x78, 0x77, 0x6f, 0x72, 0x6c, 0x64,\n  0x27, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x68,\n  0x65, 0x63, 0x6b, 0x65, 0x64, 0x3d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,\n  0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x70, 0x78, 0x3b, 0x66,\n  0x6f, 0x6e, 0x74, 0x2d, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6a,\n  0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,\n  0x65, 0x64, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x6f,\n  0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,\n  0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,\n  0x61, 0x6c, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x30, 0x63, 0x68,\n  0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x62, 0x6f, 0x64, 0x79,\n  0x3e, 0x3c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70,\n  0x6c, 0x65, 0x74, 0x65, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x0a,\n  0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,\n  0x65, 0x20, 0x3c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e,\n  0x64, 0x69, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20,\n  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x20, 0x4f, 0x63, 0x74, 0x6f,\n  0x62, 0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x65, 0x78,\n  0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x20, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x72,\n  0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x65,\n  0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,\n  0x64, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6e, 0x75,\n  0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x62,\n  0x6d, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x79, 0x6c, 0x61, 0x6e, 0x64, 0x63, 0x6f,\n  0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,\n  0x63, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74,\n  0x61, 0x63, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x61,\n  0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,\n  0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x29, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,\n  0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b,\n  0x62, 0x6f, 0x78, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x70, 0x72,\n  0x65, 0x67, 0x6e, 0x61, 0x6e, 0x74, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f,\n  0x77, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x69, 0x63, 0x6f, 0x6e,\n  0x2e, 0x70, 0x6e, 0x67, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x63,\n  0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,\n  0x22, 0x3e, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x63,\n  0x68, 0x20, 0x61, 0x73, 0x20, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,\n  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x6f,\n  0x75, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x74, 0x6f,\n  0x70, 0x3a, 0x31, 0x70, 0x78, 0x20, 0x2e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,\n  0x3e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x69, 0x64, 0x74,\n  0x68, 0x3d, 0x22, 0x32, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x6e,\n  0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,\n  0x6e, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x22, 0x3e, 0x0a, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,\n  0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,\n  0x74, 0x3a, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x63, 0x6f,\n  0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,\n  0x20, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x20, 0x26, 0x6c, 0x74, 0x3b,\n  0x21, 0x2d, 0x2d, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x3c, 0x2f,\n  0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d,\n  0x3e, 0x0a, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0x29, 0x28, 0xe7, 0xb9,\n  0x81, 0xe9, 0xab, 0x94, 0x29, 0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69,\n  0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x72, 0x6f, 0x6d, 0xc3, 0xa2,\n  0x6e, 0xc4, 0x83, 0x74, 0xc3, 0xbc, 0x72, 0x6b, 0xc3, 0xa7, 0x65, 0xd8, 0xa7,\n  0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0x74, 0x61, 0x6d, 0x62, 0x69, 0xc3, 0xa9,\n  0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x69, 0x61, 0x73, 0x6d, 0x65, 0x6e, 0x73,\n  0x61, 0x6a, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x73, 0x64,\n  0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x6e, 0x61, 0x63, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x63, 0x6f, 0x6e,\n  0x74, 0x61, 0x63, 0x74, 0x6f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73,\n  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x67, 0x6f, 0x62, 0x69, 0x65,\n  0x72, 0x6e, 0x6f, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x73, 0x61, 0x6e,\n  0x75, 0x6e, 0x63, 0x69, 0x6f, 0x73, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x69,\n  0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x6d, 0x62, 0x69, 0x61, 0x64, 0x65, 0x73, 0x70,\n  0x75, 0xc3, 0xa9, 0x73, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x70,\n  0x72, 0x6f, 0x79, 0x65, 0x63, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,\n  0x74, 0x6f, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x73,\n  0x6f, 0x74, 0x72, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61,\n  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x6f,\n  0x6e, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x70, 0x72,\n  0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f,\n  0x72, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x62,\n  0x6c, 0x65, 0x6d, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x67, 0x6f, 0x6e,\n  0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x73, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0xc3,\n  0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x72, 0x6d, 0x69, 0x65,\n  0x6e, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6d, 0xc3, 0xa9, 0x72, 0x69, 0x63, 0x61,\n  0x76, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x63, 0x69, 0x65,\n  0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,\n  0x61, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,\n  0x6f, 0x70, 0x61, 0x6c, 0x61, 0x62, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x65,\n  0x72, 0xc3, 0xa9, 0x73, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x65,\n  0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,\n  0x6f, 0x73, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x63, 0xc3, 0xb3,\n  0x72, 0x64, 0x6f, 0x62, 0x61, 0x7a, 0x61, 0x72, 0x61, 0x67, 0x6f, 0x7a, 0x61,\n  0x70, 0xc3, 0xa1, 0x67, 0x69, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,\n  0x6c, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x71, 0x75, 0x65, 0x61, 0x72, 0x67, 0x65,\n  0x73, 0x74, 0x69, 0xc3, 0xb3, 0x6e, 0x61, 0x6c, 0x71, 0x75, 0x69, 0x6c, 0x65,\n  0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x63, 0x69, 0x65, 0x6e,\n  0x63, 0x69, 0x61, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x6f, 0x76,\n  0x65, 0x72, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,\n  0x74, 0x61, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x70, 0xc3, 0xba,\n  0x62, 0x6c, 0x69, 0x63, 0x61, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x69, 0x76, 0x6f,\n  0x61, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61,\n  0x64, 0x6f, 0x72, 0x63, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x6e,\n  0x74, 0x72, 0x61, 0x64, 0x61, 0x73, 0x61, 0x63, 0x63, 0x69, 0x6f, 0x6e, 0x65,\n  0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x73, 0x73, 0x75, 0x70, 0x65,\n  0x72, 0x69, 0x6f, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x61,\n  0x6c, 0x65, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xc3,\n  0xb3, 0x6e, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x73, 0x68, 0x61, 0x63,\n  0x69, 0x65, 0x6e, 0x64, 0x6f, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6c, 0x6f, 0x73,\n  0x65, 0x64, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61,\n  0x6e, 0x64, 0x6f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x66, 0x61,\n  0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61,\n  0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x63,\n  0x65, 0x73, 0x6f, 0x73, 0x62, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x70,\n  0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,\n  0x61, 0x72, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x70, 0x75, 0x62,\n  0x6c, 0x69, 0x63, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x6f,\n  0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x6a, 0xc3, 0xb3, 0x76, 0x65,\n  0x6e, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x74, 0xc3,\n  0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x74,\n  0x6f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0xc3, 0xad, 0x61, 0x74, 0x72, 0x61, 0x62,\n  0x61, 0x6a, 0x61, 0x72, 0x61, 0x73, 0x74, 0x75, 0x72, 0x69, 0x61, 0x73, 0x72,\n  0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,\n  0x61, 0x72, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0xc3, 0xad, 0x6e, 0x73, 0x61, 0x6c,\n  0x76, 0x61, 0x64, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,\n  0x74, 0x72, 0x61, 0x62, 0x61, 0x6a, 0x6f, 0x73, 0x70, 0x72, 0x69, 0x6d, 0x65,\n  0x72, 0x6f, 0x73, 0x6e, 0x65, 0x67, 0x6f, 0x63, 0x69, 0x6f, 0x73, 0x6c, 0x69,\n  0x62, 0x65, 0x72, 0x74, 0x61, 0x64, 0x64, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x65,\n  0x73, 0x70, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0xc3, 0xb3,\n  0x78, 0x69, 0x6d, 0x6f, 0x61, 0x6c, 0x6d, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x61,\n  0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x71, 0x75, 0x69, 0xc3, 0xa9, 0x6e,\n  0x65, 0x73, 0x63, 0x6f, 0x72, 0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x63,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x62, 0x75, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x6f,\n  0x6f, 0x70, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x78, 0x74, 0x65, 0x72,\n  0x69, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x74, 0x6f,\n  0x64, 0x61, 0x76, 0xc3, 0xad, 0x61, 0x67, 0x61, 0x6c, 0x65, 0x72, 0xc3, 0xad,\n  0x61, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x69,\n  0x63, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63,\n  0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,\n  0x6f, 0x73, 0x63, 0x72, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x64, 0xc3, 0xb3,\n  0x6c, 0x61, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x69, 0x61,\n  0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x70, 0x65, 0x72, 0xc3, 0xad,\n  0x6f, 0x64, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x74, 0x61, 0x6d, 0x61,\n  0x6e, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x70, 0x65, 0x71, 0x75, 0x65, 0xc3, 0xb1,\n  0x6f, 0x72, 0x65, 0x63, 0x69, 0x62, 0x69, 0x64, 0x61, 0x74, 0x72, 0x69, 0x62,\n  0x75, 0x6e, 0x61, 0x6c, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x66, 0x65, 0x63,\n  0x61, 0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x69,\n  0x61, 0x73, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x69, 0x76,\n  0x65, 0x72, 0x73, 0x6f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x63, 0x61,\n  0x72, 0x65, 0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x74, 0xc3, 0xa9, 0x63, 0x6e,\n  0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x76, 0x69,\n  0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x7a, 0x61,\n  0x73, 0x61, 0x64, 0x65, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x66, 0x75, 0x6e, 0x63,\n  0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x73, 0x64,\n  0x69, 0x66, 0xc3, 0xad, 0x63, 0x69, 0x6c, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64,\n  0x65, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x61, 0x73, 0x61, 0x76, 0x61,\n  0x6e, 0x7a, 0x61, 0x64, 0x61, 0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f,\n  0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0xc3, 0xa1, 0x6e, 0x63,\n  0x68, 0x65, 0x7a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x73, 0x6f,\n  0x66, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74, 0x61,\n  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x63, 0x74,\n  0x6f, 0x72, 0x65, 0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66,\n  0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x64, 0x63, 0x72, 0xc3, 0xa9, 0x64, 0x69,\n  0x74, 0x6f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x73, 0x73, 0x75, 0x70,\n  0x75, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x73,\n  0x73, 0x65, 0x67, 0x75, 0x6e, 0x64, 0x6f, 0x73, 0x70, 0x65, 0x71, 0x75, 0x65,\n  0xc3, 0xb1, 0x61, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5,\n  0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd1,\n  0x8c, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b,\n  0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,\n  0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,\n  0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0xb2, 0xd1,\n  0x81, 0xd0, 0xb5, 0xd1, 0x85, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb9,\n  0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0,\n  0xbb, 0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb4,\n  0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,\n  0x82, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,\n  0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,\n  0x81, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb4,\n  0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd1, 0x84, 0xd0,\n  0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb2, 0xd0,\n  0xbe, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x82,\n  0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,\n  0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x8e, 0xd0, 0xbb, 0xd0, 0xb8,\n  0xd1, 0x88, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x85, 0xd0,\n  0xbf, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb5,\n  0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,\n  0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe,\n  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x85, 0xd0, 0xbe, 0xd1,\n  0x82, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x85, 0xd1, 0x81,\n  0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,\n  0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8,\n  0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8f, 0xd1,\n  0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4,\n  0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1,\n  0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82,\n  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x86, 0xd0, 0xb5, 0xd0,\n  0xbd, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb2,\n  0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,\n  0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8b, 0xd1, 0x82, 0xd0, 0xb5,\n  0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x88, 0xd0, 0xb5, 0xd0,\n  0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf,\n  0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd1,\n  0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0,\n  0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0,\n  0xb4, 0xd1, 0x8b, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8e, 0xd0, 0xbc,\n  0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0,\n  0xb3, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb4,\n  0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,\n  0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb,\n  0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,\n  0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x8e, 0xd0, 0xbd, 0xd1, 0x8f,\n  0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0x95, 0xd1, 0x81, 0xd1,\n  0x82, 0xd1, 0x8c, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd,\n  0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd9,\n  0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xac, 0xd9, 0x85,\n  0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa9, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a,\n  0xd9, 0x87, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf,\n  0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb5, 0xd9, 0x81, 0xd8,\n  0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88, 0xd9,\n  0x86, 0xd8, 0xb4, 0xd8, 0xa8, 0xd9, 0x83, 0xd8, 0xa9, 0xd9, 0x81, 0xd9, 0x8a,\n  0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,\n  0xad, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa3, 0xd9, 0x83, 0xd8, 0xab,\n  0xd8, 0xb1, 0xd8, 0xae, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xad, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x84,\n  0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8,\n  0xba, 0xd8, 0xb7, 0xd8, 0xaa, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x87,\n  0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xad, 0xd8,\n  0xa9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd8,\n  0xb4, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83,\n  0xd9, 0x86, 0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8,\n  0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xb3,\n  0xd9, 0x86, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xb7, 0xd9, 0x85, 0xd8, 0xa7, 0xd8,\n  0xb0, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd8, 0xb4,\n  0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8,\n  0xb1, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7,\n  0xd9, 0x81, 0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x82, 0xd9, 0x88, 0xd9, 0x84, 0xd9,\n  0x85, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xb2, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85,\n  0xd8, 0xa9, 0xd8, 0xa3, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x82, 0xd9,\n  0x84, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x8a,\n  0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xb7, 0xd8, 0xb1, 0xd9,\n  0x8a, 0xd9, 0x82, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xac,\n  0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xb1, 0xd9,\n  0x89, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xa8,\n  0xd8, 0xad, 0xd8, 0xab, 0xd8, 0xb9, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb6, 0xd8,\n  0xa8, 0xd8, 0xb4, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xac,\n  0xd9, 0x84, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xae, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8,\n  0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9,\n  0x88, 0xd9, 0x86, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x8a,\n  0xd9, 0x88, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x81, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9,\n  0x82, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xa3, 0xd9, 0x81,\n  0xd8, 0xb6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xae, 0xd8,\n  0xa7, 0xd9, 0x83, 0xd8, 0xab, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1,\n  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xb6, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,\n  0xad, 0xd9, 0x84, 0xd9, 0x89, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd9, 0x87,\n  0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9,\n  0x88, 0xd8, 0xaf, 0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xaf,\n  0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,\n  0x86, 0xd9, 0x85, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xb9,\n  0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xae, 0xd9, 0x84, 0xd9,\n  0x85, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02,\n  0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00,\n  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,\n  0x02, 0x01, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f, 0x0e,\n  0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,\n  0x17, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x18, 0x19, 0x1a, 0x1b,\n  0x1c, 0x1d, 0x1e, 0x1f, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0xff,\n  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,\n  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,\n  0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,\n  0xff, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00,\n  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00,\n  0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00,\n  0x07, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x75,\n  0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f,\n  0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,\n  0x62, 0x6c, 0x65, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44,\n  0x54, 0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x65,\n  0x74, 0x69, 0x6e, 0x67, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,\n  0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74,\n  0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x61, 0x64, 0x76,\n  0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,\n  0x65, 0x72, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x3c, 0x2f,\n  0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61,\n  0x6c, 0x69, 0x61, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,\n  0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,\n  0x72, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x6f, 0x70, 0x65, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,\n  0x65, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x6f,\n  0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f,\n  0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,\n  0x75, 0x72, 0x65, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,\n  0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x74, 0x65, 0x6e,\n  0x74, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x73, 0x65, 0x63, 0x6f,\n  0x6e, 0x64, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,\n  0x74, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x65, 0x78, 0x63,\n  0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0d, 0x0a, 0x73, 0x74,\n  0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74,\n  0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x7d,\n  0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,\n  0x69, 0x6f, 0x6e, 0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x74, 0x65, 0x6d, 0x70,\n  0x6c, 0x61, 0x74, 0x65, 0x73, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75,\n  0x73, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x64, 0x6f, 0x63,\n  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,\n  0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x70, 0x72,\n  0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,\n  0x6e, 0x63, 0x65, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x3c, 0x2f, 0x65,\n  0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72,\n  0x61, 0x6c, 0x6c, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,\n  0x62, 0x65, 0x61, 0x75, 0x74, 0x69, 0x66, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x6e,\n  0x73, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,\n  0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x70, 0x72, 0x6f,\n  0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4e, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x2e, 0x66, 0x6f, 0x63, 0x75, 0x73,\n  0x28, 0x29, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,\n  0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x6e, 0x6f, 0x75,\n  0x6e, 0x63, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a,\n  0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73,\n  0x20, 0x74, 0x68, 0x61, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,\n  0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x72, 0x61,\n  0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,\n  0x72, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x75,\n  0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,\n  0x61, 0x6d, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69, 0x73, 0x6d, 0x74,\n  0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x77,\n  0x68, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72,\n  0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x65,\n  0x72, 0x69, 0x61, 0x6c, 0x73, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,\n  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x66, 0x66,\n  0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,\n  0x6e, 0x3e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x69,\n  0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,\n  0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x6f,\n  0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x62, 0x69, 0x6f, 0x67, 0x72,\n  0x61, 0x70, 0x68, 0x79, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65,\n  0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6e,\n  0xc3, 0xa7, 0x61, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x77, 0x6f, 0x6f,\n  0x64, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,\n  0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3e, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,\n  0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,\n  0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6f,\n  0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e,\n  0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,\n  0x3e, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x70, 0x72, 0x65, 0x73,\n  0x65, 0x6e, 0x74, 0x65, 0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65,\n  0x64, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f, 0x72,\n  0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,\n  0x63, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x65,\n  0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,\n  0x65, 0x3e, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x6c,\n  0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x73, 0x73, 0x65, 0x6e,\n  0x74, 0x69, 0x61, 0x6c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,\n  0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,\n  0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72,\n  0x73, 0x65, 0x49, 0x6e, 0x74, 0x28, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,\n  0x74, 0x79, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x3c, 0x2f,\n  0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65,\n  0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x66, 0x6f,\n  0x72, 0x6d, 0x65, 0x64, 0x74, 0x77, 0x6f, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73,\n  0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x66, 0x6f, 0x72, 0x65, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22,\n  0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x63,\n  0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x20,\n  0x6f, 0x66, 0x70, 0x65, 0x72, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x74, 0x72,\n  0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,\n  0x61, 0x72, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x79, 0x65, 0x64, 0x65,\n  0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x69, 0x7a, 0x61,\n  0x62, 0x65, 0x74, 0x68, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,\n  0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x73, 0x75,\n  0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,\n  0x3b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6f,\n  0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,\n  0x74, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x6f,\n  0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,\n  0x65, 0x73, 0x2e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x3c,\n  0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,\n  0x6e, 0x69, 0x74, 0x79, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,\n  0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,\n  0x69, 0x74, 0x74, 0x65, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,\n  0x73, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6e, 0x6f, 0x20,\n  0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,\n  0x6e, 0x67, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61,\n  0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,\n  0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x69,\n  0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,\n  0x69, 0x76, 0x65, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,\n  0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x69, 0x74,\n  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,\n  0x65, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20,\n  0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,\n  0x63, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x68,\n  0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,\n  0x6f, 0x6e, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x70,\n  0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x61, 0x6e,\n  0x74, 0x61, 0x67, 0x65, 0x29, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,\n  0x46, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76,\n  0x69, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63,\n  0x79, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74,\n  0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69,\n  0x6e, 0x67, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x63, 0x6f,\n  0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73,\n  0x61, 0x69, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x74, 0x20, 0x6d, 0x61,\n  0x79, 0x20, 0x62, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x3c, 0x2f,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,\n  0x64, 0x75, 0x6c, 0x65, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,\n  0x73, 0x3c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3e, 0x0a, 0x73, 0x75, 0x73,\n  0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a,\n  0x20, 0x30, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x3c, 0x2f,\n  0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,\n  0x6f, 0x66, 0x74, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x64,\n  0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x65, 0x64, 0x68, 0x65, 0x20, 0x62, 0x65,\n  0x63, 0x61, 0x6d, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,\n  0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6a, 0x73, 0x68, 0x6f, 0x75, 0x73,\n  0x65, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,\n  0x64, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x6c, 0x69, 0x74,\n  0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,\n  0x65, 0x64, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x76, 0x61,\n  0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,\n  0x69, 0x6e, 0x67, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63,\n  0x65, 0x6e, 0x74, 0x75, 0x72, 0x69, 0x65, 0x73, 0x4a, 0x61, 0x70, 0x61, 0x6e,\n  0x65, 0x73, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,\n  0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x6c, 0x67, 0x6f,\n  0x72, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,\n  0x73, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64,\n  0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61,\n  0x67, 0x65, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e,\n  0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,\n  0x69, 0x76, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x70,\n  0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x6c, 0x74, 0x68,\n  0x6f, 0x75, 0x67, 0x68, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,\n  0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x29, 0x2c, 0x20, 0x77,\n  0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,\n  0x64, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x46, 0x65, 0x62,\n  0x72, 0x75, 0x61, 0x72, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x75,\n  0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x63, 0x6f,\n  0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,\n  0x6e, 0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x63,\n  0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e,\n  0x69, 0x63, 0x61, 0x6c, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72,\n  0x63, 0x65, 0x20, 0x6f, 0x66, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,\n  0x64, 0x48, 0x6f, 0x6e, 0x67, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x20, 0x46, 0x61,\n  0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,\n  0x65, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x65, 0x6c,\n  0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73,\n  0x69, 0x76, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x09, 0x73,\n  0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d,\n  0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,\n  0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x74, 0x68, 0x6f, 0x73,\n  0x65, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x64, 0x69, 0x66,\n  0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,\n  0x65, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x63, 0x6f,\n  0x6e, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,\n  0x69, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2e,\n  0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x64, 0x65, 0x63, 0x69,\n  0x73, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,\n  0x74, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x76, 0x6f,\n  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,\n  0x72, 0x22, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x6f, 0x61, 0x6c,\n  0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,\n  0x72, 0x65, 0x64, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x41,\n  0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65,\n  0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,\n  0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x3c, 0x66, 0x75, 0x72, 0x6e,\n  0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,\n  0x20, 0x20, 0x6f, 0x6e, 0x62, 0x6c, 0x75, 0x72, 0x3d, 0x22, 0x73, 0x75, 0x73,\n  0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,\n  0x6e, 0x74, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f,\n  0x72, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x73,\n  0x68, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x77,\n  0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x65, 0x6d, 0x6f, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,\n  0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x61, 0x64, 0x76, 0x6f,\n  0x63, 0x61, 0x74, 0x65, 0x73, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,\n  0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x69, 0x72,\n  0x3d, 0x22, 0x6c, 0x74, 0x72, 0x22, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,\n  0x65, 0x73, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x20, 0x73,\n  0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,\n  0x73, 0x6f, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x64,\n  0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x70, 0x74, 0x65,\n  0x6d, 0x62, 0x65, 0x72, 0x61, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28,\n  0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x73, 0x75, 0x67, 0x67,\n  0x65, 0x73, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65,\n  0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x61,\n  0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d,\n  0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x63, 0x65,\n  0x72, 0x74, 0x61, 0x69, 0x6e, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,\n  0x6c, 0x65, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x4a,\n  0x65, 0x72, 0x75, 0x73, 0x61, 0x6c, 0x65, 0x6d, 0x74, 0x68, 0x65, 0x79, 0x20,\n  0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67,\n  0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x76,\n  0x69, 0x6e, 0x63, 0x65, 0x73, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,\n  0x65, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x72, 0x65, 0x63,\n  0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x70, 0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x74, 0x68,\n  0x65, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,\n  0x6f, 0x75, 0x72, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x65,\n  0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x62, 0x65, 0x67, 0x61, 0x6e,\n  0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65,\n  0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x6d, 0x75, 0x73, 0x74,\n  0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61,\n  0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74,\n  0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,\n  0x72, 0x79, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x63,\n  0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,\n  0x6c, 0x65, 0x73, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70,\n  0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x3c, 0x2f, 0x6c, 0x61, 0x62,\n  0x65, 0x6c, 0x3e, 0x3c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6b, 0x69, 0x6e, 0x64,\n  0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65,\n  0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x65, 0x20, 0x2d, 0x2d,\n  0x26, 0x67, 0x74, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x77, 0x65,\n  0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x72, 0x61,\n  0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61,\n  0x76, 0x65, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x73,\n  0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,\n  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x65,\n  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,\n  0x79, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x20, 0x73,\n  0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x65,\n  0x72, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x6e, 0x74, 0x3e, 0x3c, 0x2f, 0x4e, 0x6f,\n  0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,\n  0x69, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x70,\n  0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x28, 0x6e, 0x65, 0x77, 0x20,\n  0x44, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,\n  0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x66, 0x74, 0x65,\n  0x72, 0x20, 0x74, 0x68, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x72, 0x65, 0x67,\n  0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,\n  0x65, 0x72, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x69,\n  0x6e, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d,\n  0x65, 0x6e, 0x61, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x74,\n  0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x22, 0x3e, 0x73, 0x75, 0x62, 0x73, 0x74,\n  0x61, 0x6e, 0x63, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,\n  0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x41, 0x6d, 0x6f, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,\n  0x64, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x41, 0x69, 0x72,\n  0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,\n  0x6f, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6d,\n  0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,\n  0x20, 0x69, 0x74, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63,\n  0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x73,\n  0x74, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,\n  0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e,\n  0x20, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x6f, 0x6c,\n  0x65, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69,\n  0x73, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,\n  0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68,\n  0x6f, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64,\n  0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6e, 0x67, 0x61,\n  0x70, 0x6f, 0x72, 0x65, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x20, 0x6f, 0x66,\n  0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x66,\n  0x6c, 0x69, 0x63, 0x74, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x70, 0x3e,\n  0x0a, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x77, 0x65, 0x72,\n  0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x78,\n  0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x6d,\n  0x6f, 0x72, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x63,\n  0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x74,\n  0x69, 0x63, 0x61, 0x6c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73,\n  0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x70, 0x72, 0x69, 0x73,\n  0x6f, 0x6e, 0x65, 0x72, 0x73, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f,\n  0x66, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x21, 0x5b,\n  0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x22, 0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61,\n  0x63, 0x74, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x62, 0x67,\n  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,\n  0x20, 0x6f, 0x66, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69,\n  0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x6d, 0x69,\n  0x74, 0x74, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,\n  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x69,\n  0x63, 0x69, 0x61, 0x6c, 0x73, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6c,\n  0x79, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x69,\n  0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x69,\n  0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,\n  0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x68, 0x20, 0x74,\n  0x68, 0x61, 0x74, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x6d,\n  0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x2f, 0x62, 0x75, 0x74,\n  0x74, 0x6f, 0x6e, 0x3e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x69, 0x6e, 0x63, 0x72,\n  0x65, 0x61, 0x73, 0x65, 0x73, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x70,\n  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,\n  0x2d, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69,\n  0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,\n  0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x77,\n  0x61, 0x73, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x65, 0x7a,\n  0x75, 0x65, 0x6c, 0x61, 0x28, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79,\n  0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x70, 0x65, 0x72, 0x73,\n  0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,\n  0x63, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x76,\n  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,\n  0x69, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x76, 0x69,\n  0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,\n  0x77, 0x61, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43,\n  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,\n  0x69, 0x63, 0x61, 0x6c, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74,\n  0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,\n  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,\n  0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x6c, 0x79, 0x64, 0x69, 0x73,\n  0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,\n  0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x26,\n  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x77,\n  0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e,\n  0x69, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,\n  0x46, 0x72, 0x69, 0x65, 0x64, 0x72, 0x69, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20,\n  0x66, 0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79,\n  0x20, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x66, 0x6f, 0x72,\n  0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69,\n  0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68,\n  0x79, 0x73, 0x69, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,\n  0x20, 0x69, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73,\n  0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x70, 0x61, 0x6e, 0x20,\n  0x69, 0x64, 0x3d, 0x22, 0x73, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f,\n  0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x72, 0x76,\n  0x69, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3e, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x61, 0x73, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x65, 0x78,\n  0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x61,\n  0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6c, 0x65, 0x76, 0x65, 0x6c,\n  0x73, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,\n  0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x6d,\n  0x69, 0x73, 0x73, 0x65, 0x64, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73,\n  0x74, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x73, 0x64, 0x75, 0x70,\n  0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,\n  0x76, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6c,\n  0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,\n  0x69, 0x65, 0x73, 0x7b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x67, 0x69, 0x6f,\n  0x6e, 0x20, 0x6f, 0x66, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,\n  0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x67, 0x20,\n  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72,\n  0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x74,\n  0x68, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,\n  0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6e, 0x65,\n  0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72,\n  0x65, 0x61, 0x74, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,\n  0x65, 0x65, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65,\n  0x64, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x6e,\n  0x69, 0x64, 0x65, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x68, 0x65, 0x20,\n  0x57, 0x6f, 0x72, 0x6c, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,\n  0x66, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x65,\n  0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,\n  0x22, 0x3e, 0x63, 0x61, 0x72, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x6d, 0x61,\n  0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,\n  0x20, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61,\n  0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x70, 0x72, 0x65, 0x64, 0x69,\n  0x63, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68,\n  0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,\n  0x65, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,\n  0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74,\n  0x65, 0x6e, 0x20, 0x20, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0d, 0x0a, 0x70, 0x72,\n  0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,\n  0x73, 0x6f, 0x72, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x72,\n  0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x73, 0x61, 0x79, 0x73, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x68, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,\n  0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x48, 0x75, 0x6e, 0x67,\n  0x61, 0x72, 0x69, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,\n  0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x20, 0x61, 0x73, 0x55, 0x6e, 0x69,\n  0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x66, 0x6f,\n  0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x68,\n  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,\n  0x61, 0x72, 0x22, 0x3e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x6f, 0x6e,\n  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x6c, 0x65, 0x63,\n  0x74, 0x6f, 0x72, 0x61, 0x6c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x6f,\n  0x66, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74,\n  0x75, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,\n  0x63, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x70, 0x72,\n  0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67,\n  0x20, 0x69, 0x6e, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x70,\n  0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x0a, 0x26, 0x6c, 0x74, 0x3b,\n  0x21, 0x2d, 0x2d, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66,\n  0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x77, 0x61, 0x73, 0x20,\n  0x74, 0x61, 0x6b, 0x65, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,\n  0x65, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x65, 0x6c,\n  0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x41, 0x66, 0x72, 0x69, 0x6b, 0x61, 0x61,\n  0x6e, 0x73, 0x61, 0x73, 0x20, 0x66, 0x61, 0x72, 0x20, 0x61, 0x73, 0x70, 0x72,\n  0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x77,\n  0x69, 0x74, 0x68, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x3c,\n  0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73,\n  0x74, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,\n  0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b,\n  0x20, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x61, 0x73,\n  0x74, 0x6d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x3e, 0x3c, 0x73,\n  0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,\n  0x65, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x67, 0x72,\n  0x6f, 0x75, 0x70, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,\n  0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61,\n  0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x20, 0x66,\n  0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6f, 0x77, 0x6e,\n  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x20, 0x6f,\n  0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x69, 0x62, 0x62, 0x65, 0x61,\n  0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x73,\n  0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x77, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73,\n  0x69, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x3b, 0x20,\n  0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69,\n  0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x4a,\n  0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x3c, 0x2f, 0x66, 0x6f, 0x6f,\n  0x74, 0x65, 0x72, 0x3e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x6c, 0x79,\n  0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,\n  0x73, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,\n  0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x54, 0x68, 0x65,\n  0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,\n  0x3b, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x65,\n  0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x63,\n  0x6f, 0x6e, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78,\n  0x2e, 0x70, 0x68, 0x70, 0x61, 0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,\n  0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x65,\n  0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72,\n  0x73, 0x77, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x0a, 0x3c, 0x68,\n  0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x63, 0x69,\n  0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,\n  0x6b, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x65, 0x64, 0x61,\n  0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,\n  0x63, 0x65, 0x73, 0x2c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6f, 0x66,\n  0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x76,\n  0x65, 0x72, 0x74, 0x65, 0x64, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e,\n  0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,\n  0x74, 0x3e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,\n  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,\n  0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,\n  0x68, 0x65, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x61, 0x6e, 0x79, 0x20, 0x6f,\n  0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d,\n  0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63, 0x68,\n  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x65,\n  0x64, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x6f, 0x72, 0x69,\n  0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63,\n  0x61, 0x6c, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x65, 0x6e,\n  0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20,\n  0x6e, 0x6f, 0x74, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x77,\n  0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x74, 0x68, 0x65, 0x20, 0x74,\n  0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,\n  0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x77, 0x68, 0x61, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x79, 0x61, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,\n  0x6e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x6f,\n  0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68,\n  0x69, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f,\n  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x64,\n  0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,\n  0x68, 0x22, 0x3e, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,\n  0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x65,\n  0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x76, 0x65,\n  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,\n  0x20, 0x3c, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3e, 0x67, 0x69,\n  0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,\n  0x69, 0x61, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x3e, 0x70,\n  0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x76, 0x69, 0x65, 0x77, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c,\n  0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,\n  0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x20, 0x6f,\n  0x66, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x63, 0x68, 0x69,\n  0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,\n  0x6f, 0x66, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x6f,\n  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65,\n  0x64, 0x6c, 0x79, 0x43, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x77,\n  0x61, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x61,\n  0x66, 0x74, 0x65, 0x72, 0x61, 0x72, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,\n  0x77, 0x61, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x6f,\n  0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f,\n  0x66, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63,\n  0x68, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61,\n  0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2c, 0x20,\n  0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x75, 0x73, 0x65, 0x75, 0x6d,\n  0x20, 0x6f, 0x66, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x69, 0x61, 0x6e, 0x61, 0x28,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69, 0x6e, 0x6e, 0x65,\n  0x73, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,\n  0x61, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x69,\n  0x6e, 0x69, 0x63, 0x61, 0x6e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6f,\n  0x66, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x66,\n  0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x72, 0x69,\n  0x67, 0x68, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f,\n  0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x3d, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x28,\n  0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69,\n  0x6e, 0x75, 0x65, 0x73, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,\n  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,\n  0x6f, 0x75, 0x74, 0x20, 0x61, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x6f, 0x6d,\n  0x65, 0x77, 0x68, 0x6f, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x20, 0x66,\n  0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20,\n  0x6f, 0x66, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x6b, 0x6e,\n  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,\n  0x63, 0x65, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,\n  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75,\n  0x72, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,\n  0x70, 0x61, 0x70, 0x65, 0x72, 0x62, 0x61, 0x63, 0x6b, 0x76, 0x61, 0x6c, 0x75,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65,\n  0x3e, 0x3d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x74,\n  0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f, 0x74,\n  0x3b, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,\n  0x64, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x3c, 0x2f, 0x63, 0x65, 0x6e, 0x74,\n  0x65, 0x72, 0x3e, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x74,\n  0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72,\n  0x20, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,\n  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,\n  0x3b, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,\n  0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x68, 0x69,\n  0x67, 0x68, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x2d, 0x68,\n  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,\n  0x74, 0x3d, 0x22, 0x2f, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x74,\n  0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x66, 0x72, 0x69, 0x6b,\n  0x61, 0x61, 0x6e, 0x73, 0x65, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f,\n  0x66, 0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x76,\n  0x69, 0x65, 0xc5, 0xa1, 0x75, 0x6c, 0x69, 0x65, 0x74, 0x75, 0x76, 0x69, 0xc5,\n  0xb3, 0xc4, 0x8c, 0x65, 0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xc4, 0x8d, 0x65,\n  0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0,\n  0xb8, 0xa2, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e, 0xe7, 0xae,\n  0x80, 0xe4, 0xbd, 0x93, 0xe5, 0xad, 0x97, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94,\n  0xe5, 0xad, 0x97, 0xed, 0x95, 0x9c, 0xea, 0xb5, 0xad, 0xec, 0x96, 0xb4, 0xe4,\n  0xb8, 0xba, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0xe8, 0xae, 0xa1, 0xe7, 0xae,\n  0x97, 0xe6, 0x9c, 0xba, 0xe7, 0xac, 0x94, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac,\n  0xe8, 0xa8, 0x8e, 0xe8, 0xab, 0x96, 0xe5, 0x8d, 0x80, 0xe6, 0x9c, 0x8d, 0xe5,\n  0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe4, 0xba, 0x92, 0xe8, 0x81, 0x94, 0xe7, 0xbd,\n  0x91, 0xe6, 0x88, 0xbf, 0xe5, 0x9c, 0xb0, 0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xb1,\n  0xe4, 0xb9, 0x90, 0xe9, 0x83, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0x89, 0x88, 0xe7,\n  0xa4, 0xbe, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe9, 0x83,\n  0xa8, 0xe8, 0x90, 0xbd, 0xe6, 0xa0, 0xbc, 0xe8, 0xbf, 0x9b, 0xe4, 0xb8, 0x80,\n  0xe6, 0xad, 0xa5, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe5, 0xae, 0x9d, 0xe9,\n  0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0xa7, 0x94, 0xe5, 0x91,\n  0x98, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93,\n  0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5, 0x8a, 0x9e, 0xe5,\n  0x85, 0xac, 0xe5, 0xae, 0xa4, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe5, 0x8c,\n  0xba, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0xb8, 0x82, 0xe6, 0x92, 0xad,\n  0xe6, 0x94, 0xbe, 0xe5, 0x99, 0xa8, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe5,\n  0xb8, 0x82, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe8, 0xb6,\n  0x8a, 0xe6, 0x9d, 0xa5, 0xe8, 0xb6, 0x8a, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,\n  0xe5, 0x91, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xbd, 0x91, 0x73,\n  0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3, 0xad,\n  0x63, 0x75, 0x6c, 0x6f, 0x61, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x61,\n  0x62, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x63, 0x75, 0x61, 0x6c,\n  0x71, 0x75, 0x69, 0x65, 0x72, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x64,\n  0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x73, 0x70, 0x6f, 0x6c,\n  0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73,\n  0x74, 0x61, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x73, 0x69,\n  0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x62, 0xc3, 0xba, 0x73, 0x71, 0x75,\n  0x65, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x73,\n  0x65, 0x67, 0x75, 0x72, 0x69, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63,\n  0x69, 0x70, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x73,\n  0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x70,\n  0x6f, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x65, 0x7a, 0x75, 0x65, 0x6c,\n  0x61, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x73, 0x64, 0x69, 0x63,\n  0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69, 0xc3,\n  0xb3, 0x6e, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x73, 0x69,\n  0x6d, 0x69, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x79, 0x65, 0x63,\n  0x74, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x73, 0x69,\n  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76,\n  0x69, 0x64, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61,\n  0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0xc3, 0xad, 0x61, 0x69, 0x6d, 0xc3, 0xa1,\n  0x67, 0x65, 0x6e, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,\n  0x72, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x72, 0x6e, 0x65, 0x63,\n  0x65, 0x73, 0x61, 0x72, 0x69, 0x6f, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0xc3,\n  0xb3, 0x6e, 0x74, 0x65, 0x6c, 0xc3, 0xa9, 0x66, 0x6f, 0x6e, 0x6f, 0x63, 0x6f,\n  0x6d, 0x69, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x63, 0x69, 0x6f,\n  0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65,\n  0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x72, 0x61, 0x6e, 0xc3, 0xa1, 0x6c,\n  0x69, 0x73, 0x69, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x6f, 0x73,\n  0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x76,\n  0x69, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x74, 0x69, 0x71, 0x75, 0x65, 0x74, 0x61,\n  0x73, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66, 0x75, 0x6e,\n  0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61,\n  0x64, 0x6f, 0x63, 0x61, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x72, 0x70, 0x72,\n  0x6f, 0x70, 0x69, 0x65, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,\n  0x70, 0x69, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x64, 0x61, 0x64, 0x6d,\n  0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x63,\n  0x69, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x73,\n  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63, 0x6f, 0x6d, 0x65,\n  0x72, 0x63, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x65,\n  0x73, 0x65, 0x6a, 0x65, 0x72, 0x63, 0x69, 0x63, 0x69, 0x6f, 0x65, 0x64, 0x69,\n  0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x61, 0x6c, 0x61, 0x6d, 0x61, 0x6e,\n  0x63, 0x61, 0x67, 0x6f, 0x6e, 0x7a, 0xc3, 0xa1, 0x6c, 0x65, 0x7a, 0x64, 0x6f,\n  0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0xc3, 0xad, 0x63,\n  0x75, 0x6c, 0x61, 0x72, 0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x67,\n  0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x72, 0x72, 0x61,\n  0x67, 0x6f, 0x6e, 0x61, 0x70, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x69, 0x63, 0x61,\n  0x6e, 0x6f, 0x76, 0x65, 0x64, 0x61, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x70,\n  0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65,\n  0x73, 0x74, 0xc3, 0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x6f, 0x62, 0x6a,\n  0x65, 0x74, 0x69, 0x76, 0x6f, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,\n  0x6f, 0x73, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,\n  0xb5, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x95,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0,\n  0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0x64, 0x69, 0x70, 0x6c, 0x6f,\n  0x64, 0x6f, 0x63, 0x73, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaf,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x94,\n  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,\n  0x9c, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6,\n  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0,\n  0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,\n  0x9f, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85,\n  0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x8a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa6, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,\n  0xa6, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,\n  0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x96, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,\n  0xac, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0x86, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,\n  0xa4, 0x95, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5,\n  0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81,\n  0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xa4, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x86,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,\n  0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80,\n  0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70,\n  0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c,\n  0x65, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,\n  0x20, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f,\n  0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79,\n  0x74, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,\n  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3c, 0x61, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,\n  0x65, 0x6e, 0x74, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x32, 0x30, 0x31,\n  0x6a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x68, 0x61,\n  0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63,\n  0x72, 0x75, 0x6d, 0x62, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65,\n  0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x67, 0x6f,\n  0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x66,\n  0x6f, 0x72, 0x6e, 0x69, 0x61, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,\n  0x65, 0x73, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e,\n  0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,\n  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74,\n  0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x6d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62,\n  0x6f, 0x78, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,\n  0x73, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70,\n  0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x73, 0x20, 0x77, 0x65,\n  0x6c, 0x6c, 0x20, 0x61, 0x73, 0x75, 0x6e, 0x74, 0x27, 0x2c, 0x20, 0x27, 0x55,\n  0x41, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6f,\n  0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x65,\n  0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,\n  0x74, 0x65, 0x64, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,\n  0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x3d, 0x20,\n  0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,\n  0x73, 0x69, 0x6f, 0x6e, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x72, 0x26, 0x67, 0x74,\n  0x3b, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f,\n  0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x67, 0x63, 0x6f, 0x6c,\n  0x6f, 0x72, 0x3d, 0x22, 0x23, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,\n  0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x70,\n  0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x77, 0x73,\n  0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,\n  0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x65, 0x63,\n  0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x72, 0x6c, 0x69, 0x61,\n  0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,\n  0x6e, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x2e, 0x69,\n  0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x22, 0x63, 0x6f, 0x6e, 0x63, 0x6c,\n  0x75, 0x73, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x62,\n  0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f,\n  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,\n  0x6e, 0x65, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x6f, 0x6f, 0x64,\n  0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x70, 0x65, 0x72,\n  0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,\n  0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72,\n  0x65, 0x20, 0x6f, 0x6e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x3d, 0x22, 0x3c, 0x66,\n  0x6f, 0x72, 0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65,\n  0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c,\n  0x75, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,\n  0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x62, 0x73,\n  0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e,\n  0x6f, 0x77, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x65,\n  0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70,\n  0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x6e, 0x67, 0x22,\n  0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x6f,\n  0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70, 0x72, 0x65,\n  0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f,\n  0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x74, 0x65,\n  0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,\n  0x3a, 0x22, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x22,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x20, 0x64, 0x65, 0x6d,\n  0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x3e,\n  0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x69,\n  0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x70, 0x78, 0x3b, 0x70, 0x61,\n  0x64, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,\n  0x68, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x75,\n  0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69,\n  0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,\n  0x7a, 0x65, 0x64, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,\n  0x69, 0x66, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6d, 0x61, 0x69,\n  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,\n  0x6c, 0x61, 0x72, 0x79, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69,\n  0x73, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x28, 0x29, 0x3b, 0x26, 0x61,\n  0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x20, 0x74,\n  0x68, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,\n  0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x61, 0x73, 0x73, 0x75,\n  0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,\n  0x63, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74, 0x73, 0x65, 0x78, 0x70,\n  0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61,\n  0x64, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,\n  0x73, 0x20, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x63, 0x6f,\n  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x64, 0x65, 0x70, 0x61, 0x72,\n  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x69,\n  0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6e,\n  0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,\n  0x69, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,\n  0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x6f,\n  0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,\n  0x68, 0x74, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d,\n  0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x2f, 0x64, 0x65,\n  0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,\n  0x6e, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x72,\n  0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x64, 0x61, 0x70,\n  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,\n  0x69, 0x6f, 0x6e, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74,\n  0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x22, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69,\n  0x6e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x74,\n  0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x62,\n  0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,\n  0x6e, 0x74, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x64,\n  0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x61, 0x72, 0x74, 0x69,\n  0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,\n  0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,\n  0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74,\n  0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,\n  0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x65, 0x72,\n  0x65, 0x4e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x62, 0x65,\n  0x79, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,\n  0x74, 0x65, 0x72, 0x65, 0x64, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69,\n  0x73, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,\n  0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x61, 0x6e, 0x67,\n  0x3d, 0x22, 0x65, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3e, 0x0d, 0x0a, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x20,\n  0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x74,\n  0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74,\n  0x72, 0x65, 0x61, 0x6d, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e,\n  0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x65, 0x6d,\n  0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x61, 0x62,\n  0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,\n  0x3d, 0x22, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x20, 0x20, 0x63,\n  0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6f, 0x75,\n  0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,\n  0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x50, 0x6f, 0x72,\n  0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,\n  0x74, 0x75, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,\n  0x6c, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x75,\n  0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x61, 0x6c, 0x6d, 0x6f, 0x73,\n  0x74, 0x20, 0x61, 0x6c, 0x6c, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69, 0x64,\n  0x20, 0x23, 0x61, 0x70, 0x61, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73,\n  0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45,\n  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69,\n  0x7a, 0x65, 0x64, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72,\n  0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6f, 0x72, 0x69,\n  0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,\n  0x61, 0x62, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,\n  0x64, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x61,\n  0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x69, 0x6e, 0x63, 0x6c,\n  0x75, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,\n  0x72, 0x73, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x3d,\n  0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,\n  0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x78, 0x3b,\n  0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,\n  0x73, 0x66, 0x75, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,\n  0x73, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x6e, 0x6e, 0x69, 0x75, 0x6d, 0x68, 0x69,\n  0x73, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20, 0x26,\n  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,\n  0x74, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x69,\n  0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x6f,\n  0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,\n  0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,\n  0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x66,\n  0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,\n  0x6e, 0x61, 0x74, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,\n  0x72, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65,\n  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6c, 0x63, 0x75,\n  0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,\n  0x65, 0x64, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73,\n  0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x30, 0x22, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,\n  0x65, 0x6c, 0x79, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,\n  0x66, 0x69, 0x76, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x73,\n  0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,\n  0x68, 0x69, 0x6e, 0x67, 0x31, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f,\n  0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,\n  0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,\n  0x6f, 0x66, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6a,\n  0x6f, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,\n  0x73, 0x6c, 0x79, 0x3e, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,\n  0x6f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x62, 0x75, 0x74,\n  0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,\n  0x61, 0x6e, 0x74, 0x73, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,\n  0x2c, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x4c, 0x69,\n  0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6b,\n  0x65, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73,\n  0x70, 0x3b, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,\n  0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x76,\n  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x62,\n  0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,\n  0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x61, 0x66, 0x74,\n  0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61,\n  0x72, 0x6c, 0x79, 0x2c, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,\n  0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a,\n  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,\n  0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,\n  0x6f, 0x66, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x61,\n  0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64, 0x65,\n  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x65,\n  0x6e, 0x65, 0x64, 0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b,\n  0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x20,\n  0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,\n  0x74, 0x74, 0x65, 0x72, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x3c,\n  0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x27, 0x69, 0x20,\n  0x3d, 0x20, 0x30, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x64, 0x69, 0x66, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73,\n  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6c, 0x74, 0x69,\n  0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,\n  0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,\n  0x73, 0x6f, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x0a, 0x3c,\n  0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65,\n  0x64, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x3c, 0x2f,\n  0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65,\n  0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69,\n  0x74, 0x68, 0x4d, 0x65, 0x61, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2c, 0x69,\n  0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e,\n  0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x63,\n  0x6f, 0x6d, 0x65, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66,\n  0x54, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x66,\n  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74,\n  0x62, 0x61, 0x6c, 0x6c, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x73, 0x69, 0x64, 0x65,\n  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e, 0x67, 0x61, 0x6e,\n  0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20,\n  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,\n  0x65, 0x73, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6d,\n  0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,\n  0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,\n  0x6c, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,\n  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x63,\n  0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x3c, 0x73, 0x74, 0x72,\n  0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,\n  0x73, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x64, 0x69,\n  0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69, 0x6c,\n  0x69, 0x74, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62,\n  0x6c, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x09,\n  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x6e, 0x6f,\n  0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,\n  0x67, 0x68, 0x74, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x62, 0x75, 0x73,\n  0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x72, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x70, 0x65,\n  0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x4a, 0x61,\n  0x6e, 0x75, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x69,\n  0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x09, 0x64,\n  0x69, 0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74,\n  0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,\n  0x69, 0x6e, 0x67, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,\n  0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6e,\n  0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69,\n  0x63, 0x6b, 0x3d, 0x22, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73,\n  0x6f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6d, 0x61,\n  0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x75, 0x78, 0x65, 0x6d,\n  0x62, 0x6f, 0x75, 0x72, 0x67, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x65,\n  0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x22, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20,\n  0x77, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,\n  0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x3d, 0x22, 0x0a, 0x3c, 0x21,\n  0x2d, 0x2d, 0x20, 0x45, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,\n  0x69, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x6c,\n  0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f,\n  0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x6c, 0x69, 0x6b,\n  0x65, 0x20, 0x74, 0x68, 0x65, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69,\n  0x61, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72,\n  0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x0a, 0x3c, 0x2f, 0x68,\n  0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,\n  0x73, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,\n  0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x41, 0x6c, 0x65,\n  0x78, 0x61, 0x6e, 0x64, 0x72, 0x69, 0x61, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65,\n  0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,\n  0x73, 0x66, 0x6f, 0x75, 0x72, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0a, 0x0a,\n  0x26, 0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,\n  0x61, 0x73, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f,\n  0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x6f, 0x62, 0x6c, 0x69,\n  0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,\n  0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x76,\n  0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e,\n  0x73, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x20, 0x68, 0x72, 0x65, 0x66, 0x72, 0x65,\n  0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x77, 0x69, 0x6c, 0x6c, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62,\n  0x6c, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x6e,\n  0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x75, 0x6e, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x72, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x20, 0x66,\n  0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,\n  0x69, 0x7a, 0x65, 0x64, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74,\n  0x6f, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x75,\n  0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x72,\n  0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,\n  0x6c, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x74,\n  0x77, 0x6f, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x46, 0x65, 0x62, 0x72,\n  0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,\n  0x20, 0x6f, 0x66, 0x73, 0x77, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,\n  0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x61,\n  0x72, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,\n  0x6e, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,\n  0x73, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x77, 0x69,\n  0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74,\n  0x3a, 0x6c, 0x65, 0x66, 0x74, 0x69, 0x73, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c,\n  0x6c, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6e,\n  0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x6d, 0x79, 0x73, 0x74,\n  0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,\n  0x65, 0x6e, 0x74, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70,\n  0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e,\n  0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65,\n  0x64, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79,\n  0x73, 0x74, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x68, 0x61, 0x73, 0x20, 0x6c,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x6e,\n  0x64, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69,\n  0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x65, 0x72, 0x65,\n  0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69,\n  0x6d, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x53, 0x63, 0x69,\n  0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x6e, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b,\n  0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x77, 0x69,\n  0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x65, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,\n  0x63, 0x65, 0x64, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,\n  0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x72,\n  0x69, 0x73, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,\n  0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x76,\n  0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x32, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61,\n  0x6c, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6c,\n  0x6f, 0x61, 0x74, 0x3a, 0x20, 0x6c, 0x65, 0x66, 0x44, 0x75, 0x72, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,\n  0x6e, 0x74, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64,\n  0x65, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,\n  0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,\n  0x6e, 0x63, 0x65, 0x2f, 0x75, 0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x74, 0x68, 0x65,\n  0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79,\n  0x65, 0x61, 0x72, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72,\n  0x65, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x79,\n  0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65,\n  0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x61, 0x62,\n  0x6c, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x75,\n  0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x75, 0x6e, 0x65, 0x78,\n  0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,\n  0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64,\n  0x61, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x75, 0x6e, 0x64,\n  0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,\n  0x73, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f,\n  0x6d, 0x69, 0x6e, 0x20, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x70, 0x6f,\n  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20,\n  0x74, 0x6f, 0x20, 0x62, 0x65, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75,\n  0x73, 0x20, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x6f, 0x6e, 0x6c, 0x79,\n  0x20, 0x61, 0x20, 0x66, 0x65, 0x77, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x20, 0x74,\n  0x68, 0x61, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,\n  0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x3c, 0x66, 0x69,\n  0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x41, 0x72, 0x63, 0x68, 0x62, 0x69,\n  0x73, 0x68, 0x6f, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e,\n  0x6f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x70,\n  0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76, 0x69,\n  0x6c, 0x65, 0x67, 0x65, 0x73, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x6d,\n  0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x45, 0x61, 0x73, 0x74,\n  0x65, 0x72, 0x20, 0x65, 0x67, 0x67, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,\n  0x73, 0x6d, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,\n  0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,\n  0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,\n  0x65, 0x64, 0x22, 0x3e, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,\n  0x0d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x61, 0x72,\n  0x72, 0x69, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x2d, 0x6a, 0x73, 0x73, 0x64,\n  0x6b, 0x27, 0x29, 0x29, 0x3b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x63,\n  0x61, 0x73, 0x75, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70,\n  0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,\n  0x61, 0x6e, 0x73, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,\n  0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x70, 0x72, 0x6f,\n  0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20,\n  0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x50, 0x68,\n  0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,\n  0x64, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x6f, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x74,\n  0x6f, 0x77, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x67, 0x75, 0x61, 0x72,\n  0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,\n  0x74, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30, 0x30, 0x30,\n  0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d,\n  0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,\n  0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68,\n  0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x73, 0x61,\n  0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x6f, 0x6e, 0x6b, 0x65, 0x79,\n  0x70, 0x72, 0x65, 0x73, 0x73, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,\n  0x67, 0x3a, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75,\n  0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70, 0x69,\n  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x69, 0x6e,\n  0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,\n  0x20, 0x62, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,\n  0x67, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x73,\n  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x6f, 0x77, 0x65, 0x72,\n  0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0a, 0x09, 0x09, 0x63,\n  0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x74,\n  0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,\n  0x69, 0x65, 0x73, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x65, 0x72,\n  0x68, 0x65, 0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x64, 0x75, 0x65,\n  0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,\n  0x65, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68,\n  0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,\n  0x70, 0x74, 0x20, 0x74, 0x6f, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72,\n  0x65, 0x2c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,\n  0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x77, 0x61, 0x73, 0x20,\n  0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,\n  0x6e, 0x69, 0x63, 0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,\n  0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x70, 0x75, 0x62,\n  0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,\n  0x72, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75,\n  0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75,\n  0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x73, 0x70,\n  0x69, 0x72, 0x61, 0x63, 0x79, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,\n  0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61,\n  0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x62, 0x73,\n  0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20,\n  0x66, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,\n  0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x62, 0x73,\n  0x6f, 0x6c, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x73,\n  0x65, 0x64, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20,\n  0x61, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x74, 0x72,\n  0x61, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x70, 0x61, 0x72,\n  0x61, 0x74, 0x65, 0x6c, 0x79, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x73, 0x20,\n  0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x61,\n  0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x66, 0x6f, 0x75, 0x6e,\n  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,\n  0x65, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x73, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f,\n  0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x28, 0x73, 0x6f, 0x6d, 0x65, 0x74,\n  0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,\n  0x6c, 0x69, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x75, 0x6e,\n  0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x71, 0x75, 0x61, 0x72, 0x74,\n  0x65, 0x72, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,\n  0x6c, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x69,\n  0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x3c, 0x2f, 0x62, 0x75,\n  0x74, 0x74, 0x6f, 0x6e, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,\n  0x61, 0x67, 0x65, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x22, 0x20, 0x64,\n  0x69, 0x72, 0x3d, 0x22, 0x6c, 0x74, 0x72, 0x4c, 0x69, 0x65, 0x75, 0x74, 0x65,\n  0x6e, 0x61, 0x6e, 0x74, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,\n  0x22, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x62,\n  0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x64, 0x65, 0x20,\n  0x75, 0x70, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61,\n  0x72, 0x67, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x61,\n  0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,\n  0x6e, 0x27, 0x73, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66,\n  0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x62, 0x61, 0x73,\n  0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,\n  0x67, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f,\n  0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6f,\n  0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x49, 0x6e,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74,\n  0x68, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x63,\n  0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f,\n  0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69,\n  0x66, 0x69, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,\n  0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x69, 0x6e, 0x20,\n  0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d,\n  0x77, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,\n  0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x70, 0x6f,\n  0x6c, 0x69, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20,\n  0x74, 0x6f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20,\n  0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x70, 0x61, 0x72,\n  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,\n  0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73,\n  0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,\n  0x65, 0x6e, 0x20, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76,\n  0x65, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,\n  0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,\n  0x72, 0x20, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,\n  0x63, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,\n  0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x62, 0x75, 0x74, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,\n  0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65,\n  0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6c, 0x61, 0x62,\n  0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,\n  0x69, 0x62, 0x6c, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x6f,\n  0x66, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x62, 0x65,\n  0x67, 0x61, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x75, 0x73, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,\n  0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x66,\n  0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2f, 0x22, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69,\n  0x63, 0x61, 0x6c, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6f, 0x66,\n  0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x70,\n  0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,\n  0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x74, 0x6f, 0x70, 0x74, 0x68,\n  0x65, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,\n  0x64, 0x65, 0x20, 0x6f, 0x66, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,\n  0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x73,\n  0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x3d, 0x22,\n  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x63, 0x61, 0x6c,\n  0x6c, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x72, 0x74, 0x68,\n  0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68,\n  0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,\n  0x74, 0x69, 0x6f, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x63, 0x6f,\n  0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x63, 0x75, 0x72,\n  0x61, 0x74, 0x65, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x62, 0x75, 0x69,\n  0x6c, 0x74, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x61,\n  0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x75, 0x63, 0x68,\n  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x44, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x30,\n  0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4b, 0x69, 0x6e,\n  0x67, 0x64, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,\n  0x74, 0x69, 0x72, 0x65, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x66, 0x6f,\n  0x72, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x62,\n  0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x46,\n  0x72, 0x65, 0x6e, 0x63, 0x68, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x61,\n  0x6e, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x3e, 0x69,\n  0x73, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,\n  0x64, 0x75, 0x6d, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,\n  0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x0a,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x20, 0x4f, 0x66, 0x66, 0x69, 0x63,\n  0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65,\n  0x2e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x74, 0x68,\n  0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x69,\n  0x74, 0x20, 0x77, 0x61, 0x73, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,\n  0x3d, 0x22, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x62,\n  0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,\n  0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x6c, 0x79,\n  0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x77, 0x6f, 0x72,\n  0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3c, 0x2f,\n  0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x73, 0x6f, 0x75, 0x6e, 0x64,\n  0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f,\n  0x72, 0x6d, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x69,\n  0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6f, 0x70, 0x65, 0x6e,\n  0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,\n  0x74, 0x65, 0x64, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,\n  0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x61, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,\n  0x73, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x6f,\n  0x66, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x20, 0x76, 0x65,\n  0x72, 0x79, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d,\n  0x6f, 0x74, 0x69, 0x76, 0x65, 0x62, 0x79, 0x20, 0x66, 0x61, 0x72, 0x20, 0x74,\n  0x68, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x70,\n  0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c,\n  0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74,\n  0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64,\n  0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x63, 0x63,\n  0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,\n  0x67, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x68, 0x69,\n  0x73, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x72, 0x74, 0x72, 0x65, 0x6d, 0x65,\n  0x6e, 0x64, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x20,\n  0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x30,\n  0x20, 0x31, 0x65, 0x6d, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x42, 0x61, 0x73, 0x6b,\n  0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,\n  0x63, 0x73, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72,\n  0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2f, 0x22, 0x20,\n  0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,\n  0x6e, 0x64, 0x65, 0x78, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,\n  0x65, 0x70, 0x69, 0x74, 0x74, 0x73, 0x62, 0x75, 0x72, 0x67, 0x68, 0x63, 0x6f,\n  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0d, 0x3c, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x3e, 0x28, 0x66, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6f,\n  0x75, 0x74, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x3c,\n  0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0d, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x61,\n  0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65,\n  0x20, 0x69, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x3e, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x20, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,\n  0x2c, 0x20, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x74, 0x61,\n  0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x73,\n  0x74, 0x72, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,\n  0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x3e,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20,\n  0x66, 0x6f, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64,\n  0x2e, 0x73, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x22, 0x2f, 0x2f, 0x76, 0x69, 0x6f,\n  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70,\n  0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c,\n  0x79, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x65,\n  0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x64, 0x20, 0x66, 0x72, 0x6f,\n  0x6d, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e,\n  0x64, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0xd7,\n  0xa2, 0xd7, 0x91, 0xd7, 0xa8, 0xd7, 0x99, 0xd7, 0xaa, 0xd9, 0x81, 0xd8, 0xa7,\n  0xd8, 0xb1, 0xd8, 0xb3, 0xdb, 0x8c, 0x64, 0x65, 0x73, 0x61, 0x72, 0x72, 0x6f,\n  0x6c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,\n  0x65, 0x64, 0x75, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x70,\n  0x74, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,\n  0x72, 0x61, 0x64, 0x6f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x63, 0x69, 0xc3, 0xb3,\n  0x6e, 0x75, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x75,\n  0x62, 0x6c, 0x69, 0x63, 0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x75,\n  0x65, 0x73, 0x74, 0x61, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x64,\n  0x6f, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x72,\n  0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x64, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3,\n  0xad, 0x63, 0x75, 0x6c, 0x6f, 0x73, 0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e,\n  0x74, 0x65, 0x73, 0x73, 0x69, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73,\n  0x72, 0x65, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x69, 0x74,\n  0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,\n  0x65, 0x72, 0x69, 0x6f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x69, 0x64, 0x61,\n  0x64, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x66, 0x6f,\n  0x72, 0x6d, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x6f, 0x62, 0x6c, 0x61,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,\n  0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x61,\n  0x63, 0x63, 0x65, 0x73, 0x6f, 0x72, 0x69, 0x6f, 0x73, 0x74, 0x65, 0x63, 0x68,\n  0x6e, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,\n  0x6c, 0x65, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61,\n  0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x64, 0x69, 0x73,\n  0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,\n  0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69,\n  0x61, 0x76, 0x61, 0x6c, 0x6c, 0x61, 0x64, 0x6f, 0x6c, 0x69, 0x64, 0x62, 0x69,\n  0x62, 0x6c, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61, 0x63,\n  0x69, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,\n  0x69, 0x6f, 0x70, 0x6f, 0x6c, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x73, 0x61,\n  0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6f, 0x63, 0x75,\n  0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,\n  0x65, 0x7a, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x73,\n  0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x63, 0x6f,\n  0x6e, 0xc3, 0xb3, 0x6d, 0x69, 0x63, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,\n  0x6f, 0x72, 0x74, 0x65, 0x72, 0x6f, 0x64, 0x72, 0xc3, 0xad, 0x67, 0x75, 0x65,\n  0x7a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x65, 0x6e,\n  0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75,\n  0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,\n  0x72, 0x61, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66,\n  0x72, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6d,\n  0x61, 0x6e, 0x65, 0x6e, 0x74, 0x65, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65,\n  0x6e, 0x74, 0x65, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbc, 0xd0,\n  0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5,\n  0xd0, 0xbc, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb6, 0xd0,\n  0xb5, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xb1,\n  0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,\n  0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,\n  0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,\n  0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81,\n  0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1,\n  0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7,\n  0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x81, 0xd0,\n  0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7,\n  0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb4, 0xd1,\n  0x83, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0x9f,\n  0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0,\n  0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,\n  0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0,\n  0xbd, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2,\n  0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,\n  0xb5, 0xd0, 0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,\n  0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe,\n  0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,\n  0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xbc,\n  0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,\n  0xb5, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd,\n  0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0,\n  0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,\n  0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1,\n  0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c,\n  0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0,\n  0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0,\n  0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,\n  0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc,\n  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb8, 0xd1,\n  0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,\n  0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,\n  0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0,\n  0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,\n  0xbe, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,\n  0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0x9f, 0xd0,\n  0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba,\n  0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0,\n  0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x82,\n  0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd1, 0x80, 0xd0,\n  0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xa1, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xba,\n  0xd1, 0x82, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,\n  0x9a, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbd,\n  0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,\n  0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xb9,\n  0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,\n  0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f,\n  0xd0, 0xb7, 0xd1, 0x8c, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,\n  0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x81,\n  0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0x9a, 0xd1, 0x80, 0xd0,\n  0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xa4, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83,\n  0xd0, 0xbc, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0, 0xb5, 0xd1,\n  0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbf, 0xd0, 0xbe,\n  0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x81, 0xd1,\n  0x8f, 0xd1, 0x87, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x86,\n  0xd1, 0x86, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x82, 0xd1,\n  0x80, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc,\n  0xd1, 0x8b, 0xd1, 0x85, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0,\n  0xb0, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x87,\n  0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,\n  0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c,\n  0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0xd1,\n  0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbc, 0xd0, 0xb5,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1,\n  0x81, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x85,\n  0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb8, 0xd0,\n  0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5,\n  0xd1, 0x8e, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,\n  0x80, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81,\n  0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd0,\n  0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x86,\n  0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,\n  0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0x90, 0xd1, 0x80,\n  0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8,\n  0xaf, 0xd9, 0x89, 0xd8, 0xa5, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,\n  0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x85, 0xd8,\n  0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,\n  0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb6,\n  0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xa9, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xb3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x85, 0xd9,\n  0x8a, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa7, 0xd8, 0xaa,\n  0xd9, 0x85, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x89, 0xd8, 0xaa, 0xd8,\n  0xb9, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,\n  0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8,\n  0xb1, 0xd8, 0xaa, 0xd8, 0xb7, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xb9,\n  0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa5, 0xd8, 0xb1, 0xd9,\n  0x81, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xb7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7,\n  0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd8, 0xba, 0xd8, 0xa9, 0xd8,\n  0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,\n  0x8a, 0xd8, 0xae, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd9, 0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x87, 0xd8,\n  0xa7, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xb9, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,\n  0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0xd9, 0x83, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xb7, 0xd9, 0x81, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a,\n  0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8,\n  0xb1, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8,\n  0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x88,\n  0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x85, 0xd8,\n  0xa7, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xaa,\n  0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xb1, 0xd8,\n  0xb4, 0xd9, 0x8a, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a,\n  0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,\n  0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa3, 0xd9, 0x84,\n  0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,\n  0x81, 0xd8, 0xb1, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x84,\n  0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3,\n  0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd8,\n  0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd9, 0x81, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd9, 0x83, 0xd9, 0x84, 0xd9,\n  0x85, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7,\n  0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8,\n  0xa3, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd9, 0x83, 0xd8, 0xaa,\n  0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9,\n  0x8a, 0xd8, 0xb1, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xa3, 0xd8, 0xaf, 0xd8, 0xa8, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,\n  0xd8, 0xb7, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,\n  0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb7, 0xd9, 0x82, 0xd8, 0xa9, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xb1, 0xd8, 0xac, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8, 0xaa, 0xd8, 0xb1,\n  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x85, 0xd9,\n  0x8a, 0xd8, 0xb9, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x83, 0x73, 0x42, 0x79, 0x54,\n  0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20,\n  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x31, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69,\n  0x64, 0x20, 0x23, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d,\n  0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69,\n  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70, 0x70,\n  0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x6f, 0x6e, 0x63,\n  0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,\n  0x73, 0x68, 0x65, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,\n  0x6e, 0x67, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,\n  0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x65,\n  0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x70, 0x72,\n  0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d,\n  0x64, 0x61, 0x73, 0x68, 0x3b, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,\n  0x65, 0x6c, 0x79, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x3c,\n  0x2f, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x74,\n  0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76,\n  0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x65,\n  0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,\n  0x6c, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,\n  0x79, 0x3a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e,\n  0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x65, 0x76,\n  0x65, 0x6e, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x72, 0x65, 0x70, 0x6c,\n  0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,\n  0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x72,\n  0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,\n  0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28, 0x75, 0x72, 0x6c, 0x28, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,\n  0x63, 0x73, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a,\n  0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6e, 0x6f,\n  0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x50, 0x47, 0x7c, 0x74, 0x68, 0x75,\n  0x6d, 0x62, 0x7c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,\n  0x65, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x66,\n  0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x3c, 0x6c, 0x69,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x75, 0x6e, 0x64, 0x72,\n  0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76,\n  0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x6f, 0x74, 0x68, 0x3b,\n  0x63, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69,\n  0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,\n  0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x4e, 0x65, 0x77, 0x20, 0x5a, 0x65, 0x61, 0x6c,\n  0x61, 0x6e, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,\n  0x64, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x69,\n  0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x6c, 0x74,\n  0x3b, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72,\n  0x6f, 0x76, 0x65, 0x72, 0x73, 0x79, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,\n  0x61, 0x6e, 0x64, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3d, 0x22,\n  0x73, 0x77, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65,\n  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x65,\n  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x68,\n  0x6f, 0x75, 0x67, 0x68, 0x20, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,\n  0x65, 0x61, 0x3e, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x69, 0x72,\n  0x64, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x26,\n  0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x73, 0x70, 0x65,\n  0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,\n  0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69,\n  0x63, 0x73, 0x0a, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22,\n  0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,\n  0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x72, 0x72,\n  0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,\n  0x69, 0x74, 0x69, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,\n  0x74, 0x65, 0x64, 0x36, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,\n  0x22, 0x73, 0x61, 0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3b, 0x63,\n  0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x73,\n  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72,\n  0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,\n  0x20, 0x66, 0x6f, 0x72, 0x69, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,\n  0x62, 0x65, 0x41, 0x66, 0x67, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e,\n  0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61,\n  0x74, 0x68, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x73, 0x75, 0x72, 0x72,\n  0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c,\n  0x73, 0x6f, 0x20, 0x62, 0x65, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,\n  0x65, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x3c,\n  0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72,\n  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x68, 0x61,\n  0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f,\n  0x6e, 0x20, 0x6f, 0x66, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,\n  0x28, 0x29, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,\n  0x44, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x70,\n  0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c,\n  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x72,\n  0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x73, 0x74, 0x72,\n  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,\n  0x2f, 0x2f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,\n  0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x2e, 0x73,\n  0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x65, 0x61, 0x63, 0x68,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,\n  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74,\n  0x69, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x64,\n  0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,\n  0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x20, 0x6e, 0x6f,\n  0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,\n  0x45, 0x61, 0x73, 0x74, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x3c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20,\n  0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,\n  0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x44,\n  0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,\n  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x66, 0x61, 0x6d,\n  0x6f, 0x75, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,\n  0x79, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6c,\n  0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x63,\n  0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x73, 0x6f, 0x76, 0x65, 0x72,\n  0x65, 0x69, 0x67, 0x6e, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,\n  0x74, 0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,\n  0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x64, 0x6f,\n  0x63, 0x74, 0x72, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x63, 0x63, 0x75,\n  0x70, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,\n  0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61,\n  0x6e, 0x63, 0x65, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,\n  0x66, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x65,\n  0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63,\n  0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x65,\n  0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,\n  0x63, 0x3d, 0x22, 0x2f, 0x3c, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x6d, 0x61, 0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x73, 0x70,\n  0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3c, 0x2f, 0x66, 0x69,\n  0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,\n  0x73, 0x73, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73,\n  0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,\n  0x74, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,\n  0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65,\n  0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x65,\n  0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c,\n  0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73,\n  0x74, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x6f,\n  0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79,\n  0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x28, 0x65, 0x73, 0x70, 0x65, 0x63,\n  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64, 0x74,\n  0x68, 0x3d, 0x22, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x30,\n  0x25, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x3c,\n  0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20, 0x6f, 0x6e,\n  0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3d, 0x22, 0x29, 0x2e, 0x61, 0x64, 0x64,\n  0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x64, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66,\n  0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x62, 0x72,\n  0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,\n  0x72, 0x67, 0x65, 0x73, 0x74, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,\n  0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x63,\n  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x6f, 0x72,\n  0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61,\n  0x64, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,\n  0x22, 0x31, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b,\n  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x69, 0x6d, 0x70, 0x6c,\n  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,\n  0x20, 0x73, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61,\n  0x73, 0x20, 0x61, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x74,\n  0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x63,\n  0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65,\n  0x20, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x20, 0x77,\n  0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x21, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,\n  0x61, 0x6e, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69,\n  0x6e, 0x2d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,\n  0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x64, 0x75, 0x72, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x63, 0x61, 0x6c,\n  0x6c, 0x65, 0x64, 0x3c, 0x68, 0x34, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,\n  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x67, 0x6f, 0x76,\n  0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x4e, 0x6f, 0x76, 0x65,\n  0x6d, 0x62, 0x65, 0x72, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,\n  0x68, 0x65, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,\n  0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73,\n  0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,\n  0x7a, 0x65, 0x3a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69,\n  0x6e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x65,\n  0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x6d, 0x6f, 0x73,\n  0x74, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x77, 0x69, 0x64, 0x65, 0x6c,\n  0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,\n  0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,\n  0x6f, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,\n  0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x49, 0x74,\n  0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x74, 0x20, 0x64,\n  0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,\n  0x72, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61,\n  0x6e, 0x74, 0x73, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,\n  0x74, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x63,\n  0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x73,\n  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x20, 0x65,\n  0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20,\n  0x6d, 0x6f, 0x72, 0x65, 0x70, 0x78, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69,\n  0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,\n  0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72,\n  0x65, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x6f, 0x6c, 0x65,\n  0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,\n  0x75, 0x73, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x73, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f,\n  0x66, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63,\n  0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x61,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63, 0x65, 0x72, 0x74, 0x69,\n  0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,\n  0x3d, 0x22, 0x68, 0x69, 0x67, 0x68, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,\n  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x63, 0x6f,\n  0x6d, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6f, 0x70,\n  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 0x20,\n  0x79, 0x65, 0x61, 0x72, 0x73, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e,\n  0x74, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72,\n  0x79, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x70, 0x72, 0x6f,\n  0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x70, 0x61, 0x72, 0x61,\n  0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20,\n  0x6f, 0x66, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,\n  0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x22, 0x77, 0x61,\n  0x73, 0x20, 0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x74,\n  0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,\n  0x65, 0x64, 0x20, 0x61, 0x73, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,\n  0x65, 0x6e, 0x74, 0x69, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,\n  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x3a,\n  0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x69, 0x67,\n  0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x63, 0x65, 0x6c, 0x65, 0x62,\n  0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,\n  0x74, 0x74, 0x65, 0x64, 0x2f, 0x6a, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72,\n  0x79, 0x2e, 0x69, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,\n  0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74,\n  0x61, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x69, 0x74, 0x20, 0x63,\n  0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x62,\n  0x65, 0x65, 0x6e, 0x0d, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x54, 0x68, 0x65, 0x20, 0x63,\n  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x65, 0x20,\n  0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x64, 0x75,\n  0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,\n  0x70, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,\n  0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6f,\n  0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x6f, 0x20, 0x73,\n  0x61, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,\n  0x65, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,\n  0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74,\n  0x6f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62,\n  0x65, 0x6c, 0x69, 0x65, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x68, 0x6f,\n  0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,\n  0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,\n  0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20,\n  0x6f, 0x66, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79,\n  0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x65,\n  0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x6c, 0x65, 0x61, 0x76,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61,\n  0x63, 0x75, 0x6c, 0x61, 0x72, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,\n  0x79, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x72,\n  0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x65, 0x6d, 0x70, 0x68, 0x61,\n  0x73, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,\n  0x63, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x77, 0x69, 0x74,\n  0x68, 0x20, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74,\n  0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65,\n  0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x74, 0x20, 0x69,\n  0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x69, 0x66,\n  0x72, 0x61, 0x6d, 0x65, 0x3e, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,\n  0x77, 0x73, 0x3a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,\n  0x68, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x63,\n  0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x69,\n  0x6e, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x6f, 0x70, 0x70, 0x6f, 0x72,\n  0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x76, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,\n  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x68, 0x65,\n  0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x73, 0x65, 0x74, 0x49,\n  0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x70,\n  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x59,\n  0x6f, 0x72, 0x6b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,\n  0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x0a,\n  0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x63,\n  0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x3b, 0x3c, 0x2f, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45,\n  0x76, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f,\n  0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x53, 0x6f,\n  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65,\n  0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,\n  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,\n  0x72, 0x22, 0x3e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,\n  0x67, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x4d,\n  0x75, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x72, 0x69,\n  0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x68, 0x65, 0x69,\n  0x67, 0x68, 0x74, 0x3d, 0x22, 0x32, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f,\n  0x66, 0x20, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x45, 0x78,\n  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x65, 0x64, 0x75, 0x63,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,\n  0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69,\n  0x74, 0x3d, 0x22, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x6f,\n  0x66, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f,\n  0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x72, 0x65, 0x6c,\n  0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x74, 0x65, 0x6e, 0x64, 0x65,\n  0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,\n  0x65, 0x20, 0x6f, 0x66, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x6f, 0x75,\n  0x6c, 0x64, 0x64, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,\n  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x65,\n  0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x69, 0x6e, 0x6e,\n  0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74,\n  0x75, 0x72, 0x65, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,\n  0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x69,\n  0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x79, 0x65, 0x61,\n  0x72, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2c, 0x73, 0x61, 0x6e, 0x73,\n  0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,\n  0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,\n  0x63, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,\n  0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f,\n  0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,\n  0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,\n  0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,\n  0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73,\n  0x75, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x61,\n  0x69, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69,\n  0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,\n  0x7a, 0x65, 0x3a, 0x31, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,\n  0x6f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20,\n  0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x61, 0x6e, 0x6e, 0x69,\n  0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,\n  0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69,\n  0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6e,\n  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,\n  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x47, 0x4d, 0x54, 0x53, 0x74,\n  0x72, 0x69, 0x6e, 0x67, 0x41, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,\n  0x6f, 0x66, 0x69, 0x6d, 0x67, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,\n  0x45, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x77, 0x61,\n  0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75,\n  0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,\n  0x6f, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,\n  0x69, 0x73, 0x68, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61,\n  0x73, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x74,\n  0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e,\n  0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75, 0x65,\n  0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72,\n  0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,\n  0x6f, 0x66, 0x77, 0x69, 0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x20,\n  0x77, 0x65, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x63,\n  0x72, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x6e, 0x20, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61,\n  0x6e, 0x74, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,\n  0x64, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x67,\n  0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x61,\n  0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6d, 0x6f, 0x73, 0x74, 0x20,\n  0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,\n  0x66, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20,\n  0x6e, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,\n  0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68,\n  0x65, 0x79, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x75,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,\n  0x61, 0x6e, 0x74, 0x74, 0x68, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,\n  0x6c, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x63,\n  0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x6f,\n  0x72, 0x74, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61,\n  0x6e, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,\n  0x75, 0x73, 0x65, 0x64, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x69, 0x74, 0x74,\n  0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x68, 0x61, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x69, 0x6e,\n  0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x6d,\n  0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,\n  0x6e, 0x74, 0x2c, 0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x22,\n  0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x33, 0x49, 0x6e, 0x64,\n  0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x70, 0x6f, 0x70, 0x75, 0x6c,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x2d, 0x73,\n  0x63, 0x61, 0x6c, 0x65, 0x2e, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67,\n  0x68, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,\n  0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,\n  0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x72,\n  0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x72,\n  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,\n  0x65, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x68,\n  0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x3c, 0x2f, 0x6f,\n  0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69,\n  0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,\n  0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20,\n  0x62, 0x65, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66,\n  0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69,\n  0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x73, 0x75,\n  0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65,\n  0x61, 0x74, 0x65, 0x20, 0x61, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x73, 0x73, 0x69,\n  0x70, 0x70, 0x69, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c,\n  0x79, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x62,\n  0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x77, 0x68, 0x61,\n  0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x73, 0x69, 0x74, 0x75, 0x61,\n  0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61,\n  0x6d, 0x65, 0x3d, 0x22, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68,\n  0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x6d, 0x6f,\n  0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x6f,\n  0x67, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,\n  0x73, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e,\n  0x67, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x6d, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6c, 0x75,\n  0x67, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65,\n  0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65,\n  0x64, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,\n  0x65, 0x64, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,\n  0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74,\n  0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x66,\n  0x61, 0x76, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,\n  0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3c,\n  0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x54, 0x68, 0x69,\n  0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,\n  0x69, 0x7a, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,\n  0x69, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6d, 0x61,\n  0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6d,\n  0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x50, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x6e,\n  0x69, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65,\n  0x72, 0x69, 0x74, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d,\n  0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x6f, 0x20,\n  0x72, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x74,\n  0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,\n  0x74, 0x69, 0x76, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69,\n  0x6c, 0x79, 0x49, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2c,\n  0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,\n  0x6b, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x75, 0x62, 0x64,\n  0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,\n  0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,\n  0x79, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x6f,\n  0x75, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,\n  0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,\n  0x6f, 0x67, 0x3d, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,\n  0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61,\n  0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x6e, 0x75,\n  0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,\n  0x62, 0x65, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78,\n  0x22, 0x3e, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,\n  0x66, 0x77, 0x61, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x74,\n  0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x65, 0x63,\n  0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,\n  0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,\n  0x6c, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,\n  0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x61, 0x6d,\n  0x6f, 0x6e, 0x67, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x6f,\n  0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,\n  0x31, 0x30, 0x30, 0x25, 0x3b, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,\n  0x67, 0x79, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,\n  0x64, 0x74, 0x6f, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x74, 0x68, 0x65, 0x73,\n  0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x69, 0x76,\n  0x65, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78,\n  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,\n  0x69, 0x63, 0x75, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x3b,\n  0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x61, 0x6c,\n  0x69, 0x67, 0x6e, 0x3d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x74, 0x68, 0x65, 0x20,\n  0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,\n  0x20, 0x74, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x6d, 0x65, 0x6e,\n  0x74, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,\n  0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,\n  0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,\n  0x74, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20,\n  0x2f, 0x3e, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,\n  0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x0d, 0x0a,\n  0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x76,\n  0x65, 0x72, 0x73, 0x65, 0x6c, 0x79, 0x2c, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76,\n  0x20, 0x69, 0x64, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,\n  0x3d, 0x22, 0x31, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c,\n  0x79, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x63,\n  0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,\n  0x20, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x63, 0x69, 0x74, 0x69, 0x7a,\n  0x65, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,\n  0x69, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,\n  0x68, 0x65, 0x61, 0x73, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x61, 0x73,\n  0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x3c, 0x74,\n  0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x69,\n  0x64, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,\n  0x6c, 0x79, 0x20, 0x74, 0x6f, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x64,\n  0x6f, 0x77, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69,\n  0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x6d,\n  0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6c,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x6d,\n  0x6d, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77,\n  0x69, 0x74, 0x68, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,\n  0x74, 0x65, 0x74, 0x68, 0x65, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,\n  0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x3e, 0x74, 0x68,\n  0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x74, 0x68, 0x65, 0x20,\n  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x79, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6e, 0x61,\n  0x6c, 0x6c, 0x79, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x6f,\n  0x66, 0x0d, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d,\n  0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x66, 0x61, 0x73,\n  0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f, 0x72,\n  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x77,\n  0x68, 0x69, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,\n  0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x77,\n  0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x72, 0x22, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62,\n  0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,\n  0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74,\n  0x68, 0x65, 0x69, 0x72, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x75, 0x72,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69,\n  0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,\n  0x65, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,\n  0x29, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20,\n  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x62, 0x65, 0x67, 0x69,\n  0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,\n  0x65, 0x6e, 0x74, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65,\n  0x64, 0x65, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x61,\n  0x73, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,\n  0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x6e, 0x65, 0x65, 0x64, 0x73,\n  0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,\n  0x61, 0x74, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f,\n  0x75, 0x73, 0x61, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66,\n  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x61,\n  0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,\n  0x69, 0x65, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x65, 0x64, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,\n  0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73,\n  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x65,\n  0x6e, 0x74, 0x2d, 0x64, 0x61, 0x79, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,\n  0x61, 0x6c, 0x6c, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,\n  0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64,\n  0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,\n  0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x63,\n  0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,\n  0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x74,\n  0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x64,\n  0x65, 0x77, 0x61, 0x73, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x77,\n  0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x62, 0x75, 0x74,\n  0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x75,\n  0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,\n  0x69, 0x62, 0x6c, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d,\n  0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x61, 0x64,\n  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20,\n  0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,\n  0x65, 0x72, 0x72, 0x65, 0x64, 0x61, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,\n  0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,\n  0x6f, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x73,\n  0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x75, 0x63,\n  0x68, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x0a, 0x09, 0x3c, 0x2f, 0x73,\n  0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20,\n  0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x77, 0x61,\n  0x73, 0x20, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x63, 0x68, 0x69, 0x6c,\n  0x64, 0x72, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,\n  0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x74,\n  0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x73, 0x77, 0x61, 0x72, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x62,\n  0x79, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64,\n  0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x6d, 0x69, 0x6c,\n  0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65,\n  0x74, 0x61, 0x72, 0x79, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,\n  0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,\n  0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x78,\n  0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x20, 0x6d,\n  0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73,\n  0x20, 0x61, 0x6c, 0x73, 0x6f, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,\n  0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72,\n  0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x2e, 0x53, 0x2e, 0x72,\n  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f,\n  0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,\n  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,\n  0x61, 0x6c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,\n  0x69, 0x6e, 0x20, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x72, 0x65,\n  0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x69,\n  0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f,\n  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,\n  0x6f, 0x31, 0x73, 0x74, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x20, 0x6f, 0x66, 0x63,\n  0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x69,\n  0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x2f, 0x74, 0x69, 0x74,\n  0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x63, 0x61,\n  0x6e, 0x20, 0x62, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74,\n  0x68, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73,\n  0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x61, 0x72,\n  0x65, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x64, 0x64, 0x46, 0x61, 0x76,\n  0x6f, 0x72, 0x69, 0x74, 0x65, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73,\n  0x68, 0x69, 0x70, 0x70, 0x61, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,\n  0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,\n  0x6e, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x74, 0x6f, 0x20,\n  0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b,\n  0x6d, 0x69, 0x6e, 0x75, 0x73, 0x3b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,\n  0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,\n  0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x75,\n  0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x79,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22,\n  0x30, 0x22, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f,\n  0x6b, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x66,\n  0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x65,\n  0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,\n  0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,\n  0x2f, 0x74, 0x64, 0x3e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,\n  0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f, 0x66,\n  0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x77, 0x65,\n  0x72, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,\n  0x20, 0x69, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,\n  0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x69,\n  0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x75, 0x72,\n  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x68,\n  0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x4c, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,\n  0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e,\n  0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70,\n  0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x73, 0x6f, 0x6d, 0x65,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,\n  0x74, 0x68, 0x65, 0x72, 0x2c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,\n  0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,\n  0x65, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61,\n  0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x72, 0x65, 0x63,\n  0x6f, 0x72, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x62, 0x6c, 0x61, 0x63, 0x6b,\n  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61, 0x79, 0x20, 0x69, 0x6e, 0x63,\n  0x6c, 0x75, 0x64, 0x65, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,\n  0x27, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f,\n  0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x62, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x67, 0x6f, 0x76, 0x65,\n  0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,\n  0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x74,\n  0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x69, 0x74,\n  0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,\n  0x74, 0x65, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65,\n  0x72, 0x61, 0x64, 0x69, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x72, 0x65,\n  0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x77, 0x69, 0x74, 0x68,\n  0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61,\n  0x74, 0x68, 0x65, 0x72, 0x2c, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f,\n  0x75, 0x6c, 0x64, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61,\n  0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63,\n  0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74,\n  0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x20,\n  0x77, 0x69, 0x74, 0x68, 0x65, 0x72, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c,\n  0x69, 0x3e, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65,\n  0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x64, 0x63, 0x6c,\n  0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x70, 0x72, 0x65, 0x76,\n  0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x65, 0x67, 0x69, 0x73, 0x6c,\n  0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,\n  0x74, 0x6c, 0x79, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69,\n  0x6e, 0x68, 0x61, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x66,\n  0x6f, 0x72, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,\n  0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,\n  0x6f, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,\n  0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6c,\n  0x61, 0x63, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x65, 0x72,\n  0x65, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73,\n  0x2c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x65, 0x74,\n  0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x72, 0x61,\n  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x72, 0x6f, 0x6c, 0x65, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65,\n  0x73, 0x75, 0x6c, 0x74, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69,\n  0x6c, 0x64, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x77, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x53, 0x6f,\n  0x6d, 0x65, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x64,\n  0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,\n  0x65, 0x72, 0x73, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,\n  0x65, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61,\n  0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6c, 0x69, 0x76,\n  0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,\n  0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,\n  0x20, 0x74, 0x68, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,\n  0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e,\n  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x61, 0x74,\n  0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72,\n  0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75,\n  0x67, 0x68, 0x20, 0x69, 0x74, 0x77, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,\n  0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75,\n  0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x74,\n  0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x74, 0x75, 0x72,\n  0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x3e, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x65, 0x63, 0x6f,\n  0x6e, 0x6f, 0x6d, 0x79, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,\n  0x73, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79,\n  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e,\n  0x64, 0x20, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x72, 0x69, 0x73, 0x65,\n  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,\n  0x20, 0x77, 0x68, 0x65, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x77, 0x68,\n  0x69, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x2e, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74,\n  0x68, 0x65, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,\n  0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x63,\n  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,\n  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x6d, 0x61,\n  0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x61, 0x72, 0x65, 0x61,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x74, 0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x54,\n  0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x65, 0x78, 0x74,\n  0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69,\n  0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,\n  0x3d, 0x32, 0x20, 0x7c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x6f,\n  0x72, 0x79, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f,\n  0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x72,\n  0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f,\n  0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x43, 0x68, 0x72, 0x69,\n  0x73, 0x74, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,\n  0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74,\n  0x6f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x54,\n  0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x72,\n  0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x6d,\n  0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x20, 0x65, 0x76, 0x69, 0x64,\n  0x65, 0x6e, 0x63, 0x65, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,\n  0x6f, 0x66, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,\n  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x63, 0x6f,\n  0x6d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,\n  0x6f, 0x63, 0x65, 0x73, 0x73, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20,\n  0x74, 0x68, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,\n  0x2c, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74,\n  0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65,\n  0x20, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x62, 0x6c,\n  0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x61, 0x20, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x75,\n  0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,\n  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f,\n  0x72, 0x6e, 0x69, 0x61, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,\n  0x73, 0x20, 0x61, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,\n  0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x6d,\n  0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x09, 0x09, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x74, 0x22, 0x20, 0x76,\n  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,\n  0x65, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61,\n  0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e,\n  0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78,\n  0x70, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x76, 0x3e,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,\n  0x72, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x09, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,\n  0x2f, 0x77, 0x61, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e,\n  0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20, 0x73,\n  0x65, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c,\n  0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,\n  0x6f, 0x66, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x73, 0x74, 0x65, 0x61,\n  0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,\n  0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,\n  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x73,\n  0x20, 0x6f, 0x66, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,\n  0x6e, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x61,\n  0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,\n  0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x61, 0x75, 0x6e, 0x63,\n  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,\n  0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65,\n  0x73, 0x74, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,\n  0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x62, 0x65,\n  0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x69, 0x73, 0x20, 0x61,\n  0x6c, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,\n  0x68, 0x20, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x2c, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,\n  0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74,\n  0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,\n  0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x6e, 0x73, 0x70,\n  0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,\n  0x65, 0x20, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64,\n  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68,\n  0x69, 0x73, 0x20, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x73, 0x74,\n  0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,\n  0x73, 0x74, 0x20, 0x74, 0x6f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,\n  0x78, 0x4f, 0x66, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x69,\n  0x73, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74,\n  0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x69, 0x73, 0x20,\n  0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x65,\n  0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x67, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,\n  0x2f, 0x6c, 0x69, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,\n  0x6e, 0x74, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66,\n  0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x78,\n  0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x74, 0x68, 0x65, 0x79, 0x20, 0x73,\n  0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc4, 0x8d,\n  0x69, 0x6e, 0x61, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,\n  0x73, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x64, 0x61, 0x64, 0x63,\n  0x6f, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x61, 0x63, 0x74,\n  0x69, 0x76, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72,\n  0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x65, 0x63, 0x6e, 0x6f, 0x6c, 0x6f,\n  0x67, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x63, 0x69, 0xc3,\n  0xb3, 0x6e, 0x70, 0x75, 0x6e, 0x74, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,\n  0x61, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,\n  0x6e, 0x74, 0x72, 0x61, 0x73, 0x65, 0xc3, 0xb1, 0x61, 0x63, 0x61, 0x74, 0x65,\n  0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x73, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,\n  0x72, 0x61, 0x72, 0x73, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74,\n  0x6f, 0x72, 0x65, 0x67, 0xc3, 0xad, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x73,\n  0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x69,\n  0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x65,\n  0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,\n  0x6e, 0x74, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,\n  0x69, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x64, 0x61, 0x64,\n  0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x63, 0x72,\n  0x65, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65,\n  0x73, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0x75, 0x73, 0x63, 0x72, 0x69,\n  0x62, 0x69, 0x72, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x63, 0x69,\n  0xc3, 0xb3, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65,\n  0x73, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65,\n  0x73, 0x74, 0x75, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x72, 0x65, 0x73,\n  0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,\n  0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x67, 0x75, 0x61, 0x64, 0x61, 0x6c, 0x61,\n  0x6a, 0x61, 0x72, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x64,\n  0x6f, 0x73, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64,\n  0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f,\n  0x74, 0x6f, 0x67, 0x72, 0x61, 0x66, 0xc3, 0xad, 0x61, 0x61, 0x75, 0x74, 0x6f,\n  0x72, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x69,\n  0x65, 0x72, 0xc3, 0xad, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69,\n  0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69,\n  0x61, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65,\n  0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x69, 0x64, 0x6f, 0x73, 0x69, 0x6d,\n  0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61,\n  0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x76, 0x65, 0x67, 0x61, 0x63,\n  0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64,\n  0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,\n  0x3a, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x3a,\n  0x22, 0x20, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61,\n  0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x69,\n  0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x73, 0x70, 0x65,\n  0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x2f, 0x3c, 0x21,\n  0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e,\n  0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,\n  0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x68, 0x65,\n  0x69, 0x67, 0x68, 0x74, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x68, 0x69, 0x70, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x77, 0x69,\n  0x64, 0x74, 0x68, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x3c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d,\n  0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f,\n  0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x77, 0x69,\n  0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x20, 0x21, 0x69,\n  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x3b, 0x61, 0x70, 0x70, 0x6c,\n  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x70,\n  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,\n  0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70,\n  0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,\n  0x22, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x61, 0x6c,\n  0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,\n  0x38, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x61, 0x6e,\n  0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x73,\n  0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,\n  0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x69, 0x6d, 0x67, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,\n  0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,\n  0x74, 0x75, 0x72, 0x79, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,\n  0x75, 0x72, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,\n  0x65, 0x64, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72,\n  0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,\n  0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x2f,\n  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6e, 0x6f,\n  0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x75, 0x6e,\n  0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x27, 0x29, 0x46, 0x75, 0x72, 0x74,\n  0x68, 0x65, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x2c, 0x62, 0x65, 0x6c, 0x69, 0x65,\n  0x76, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48,\n  0x54, 0x4d, 0x4c, 0x20, 0x3d, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x63,\n  0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,\n  0x73, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,\n  0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50,\n  0x65, 0x6e, 0x6e, 0x73, 0x79, 0x6c, 0x76, 0x61, 0x6e, 0x69, 0x61, 0x41, 0x73,\n  0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x3c, 0x68, 0x74,\n  0x6d, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x26, 0x6c, 0x74, 0x3b,\n  0x2f, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x64, 0x65, 0x61, 0x6c, 0x69,\n  0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x68, 0x69, 0x6c, 0x61, 0x64,\n  0x65, 0x6c, 0x70, 0x68, 0x69, 0x61, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,\n  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x3e, 0x0a, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74,\n  0x6f, 0x70, 0x3a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,\n  0x61, 0x6c, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,\n  0x65, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n  0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x70,\n  0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3d, 0x66,\n  0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x73, 0x75, 0x62,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x2e, 0x64, 0x74,\n  0x64, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x74, 0x67, 0x65, 0x6f, 0x67, 0x72,\n  0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69,\n  0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x75,\n  0x72, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x31,\n  0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x45, 0x6e,\n  0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x69, 0x66, 0x72,\n  0x61, 0x6d, 0x65, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x64, 0x65, 0x6d, 0x6f,\n  0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d,\n  0x70, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,\n  0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,\n  0x70, 0x68, 0x69, 0x63, 0x73, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x3e, 0x3c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,\n  0x20, 0x74, 0x6f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20,\n  0x6f, 0x66, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x45,\n  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0x61, 0x70,\n  0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x74, 0x72, 0x61,\n  0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x48,\n  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6c,\n  0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x74, 0x61, 0x62, 0x69,\n  0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72,\n  0x69, 0x67, 0x68, 0x74, 0x3b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x77, 0x65,\n  0x61, 0x6c, 0x74, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x66,\n  0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,\n  0x68, 0x65, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e,\n  0x65, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x3b,\n  0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x6a, 0x75,\n  0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x3c, 0x61,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x49, 0x6e, 0x20, 0x61, 0x64,\n  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20,\n  0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,\n  0x6c, 0x6c, 0x79, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,\n  0x3d, 0x22, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,\n  0x67, 0x26, 0x6c, 0x74, 0x3b, 0x6d, 0x61, 0x74, 0x68, 0x26, 0x67, 0x74, 0x3b,\n  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f,\n  0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x69,\n  0x6d, 0x67, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x6e, 0x61, 0x76,\n  0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6d, 0x70,\n  0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6d, 0x70,\n  0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d,\n  0x22, 0x61, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,\n  0x65, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72,\n  0x75, 0x65, 0x3b, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2f, 0x2f, 0x45, 0x4e,\n  0x22, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,\n  0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69,\n  0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61,\n  0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x63, 0x61, 0x70, 0x61,\n  0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3c, 0x21, 0x5b, 0x65, 0x6e,\n  0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,\n  0x61, 0x6e, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,\n  0x70, 0x6c, 0x65, 0x2c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61,\n  0x74, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,\n  0x28, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x75, 0x6e,\n  0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x65,\n  0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x65,\n  0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,\n  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61,\n  0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,\n  0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x47,\n  0x75, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x76,\n  0x65, 0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x61, 0x67, 0x61,\n  0x69, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63,\n  0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x0a, 0x2e, 0x6e, 0x6f,\n  0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d,\n  0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x31,\n  0x70, 0x78, 0x20, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,\n  0x3a, 0x31, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f,\n  0x66, 0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,\n  0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,\n  0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x69,\n  0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x72, 0x65,\n  0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x63, 0x68, 0x69,\n  0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62,\n  0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68,\n  0x65, 0x6c, 0x65, 0x73, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,\n  0x61, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,\n  0x69, 0x6e, 0x67, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74,\n  0x64, 0x3e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,\n  0x0a, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61,\n  0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x72,\n  0x63, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x61, 0x76,\n  0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x61, 0x6c, 0x66,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74,\n  0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,\n  0x67, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,\n  0x79, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,\n  0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c, 0x69, 0x74,\n  0x61, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,\n  0x65, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,\n  0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x61,\n  0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x76,\n  0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x72, 0x65,\n  0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6d, 0x70, 0x72,\n  0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e,\n  0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x4a, 0x65, 0x73, 0x75, 0x73, 0x20,\n  0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65,\n  0x6d, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67,\n  0x6e, 0x3a, 0x72, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x28, 0x29, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65,\n  0x73, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e,\n  0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,\n  0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x73,\n  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x79,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x3a,\n  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,\n  0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,\n  0x65, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,\n  0x65, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20,\n  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,\n  0x65, 0x74, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x61,\n  0x72, 0x6d, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x72, 0x65,\n  0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,\n  0x74, 0x69, 0x6e, 0x75, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x4e, 0x6f, 0x6e, 0x65,\n  0x74, 0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x65,\n  0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x0a, 0x09, 0x09, 0x3c, 0x61, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,\n  0x20, 0x6f, 0x66, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,\n  0x74, 0x68, 0x65, 0x28, 0x73, 0x65, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77,\n  0x29, 0x2e, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63,\n  0x68, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,\n  0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x74,\n  0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x09, 0x09,\n  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x09, 0x09,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x65,\n  0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x75,\n  0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x61, 0x6c, 0x6c, 0x20, 0x6f,\n  0x66, 0x20, 0x46, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65,\n  0x6e, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,\n  0x74, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72,\n  0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,\n  0x76, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x7b,\n  0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x74, 0x72,\n  0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x6d,\n  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e,\n  0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x6c, 0x6f,\n  0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,\n  0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,\n  0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,\n  0x79, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,\n  0x6e, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,\n  0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x3e, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c,\n  0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x62,\n  0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61,\n  0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x69,\n  0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68,\n  0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64,\n  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x09, 0x3c, 0x6c, 0x69, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,\n  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x20, 0x55,\n  0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,\n  0x67, 0x65, 0x64, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20,\n  0x62, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,\n  0x65, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,\n  0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64,\n  0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,\n  0x20, 0x66, 0x61, 0x63, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x6c, 0x69,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x61, 0x69, 0x6d, 0x70, 0x6c,\n  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x69, 0x74, 0x61,\n  0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x7a,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,\n  0x74, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x62,\n  0x62, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,\n  0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,\n  0x6f, 0x72, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,\n  0x20, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74,\n  0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x63, 0x3d,\n  0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x70, 0x78, 0x3b, 0x20, 0x68,\n  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,\n  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,\n  0x74, 0x75, 0x72, 0x65, 0x72, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x72, 0x69,\n  0x67, 0x68, 0x74, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,\n  0x74, 0x79, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61,\n  0x6c, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x68,\n  0x75, 0x6d, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x73, 0x6e, 0x61,\n  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x65,\n  0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x72, 0x65, 0x20,\n  0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6c, 0x6c,\n  0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73,\n  0x6f, 0x6e, 0x20, 0x77, 0x68, 0x6f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x67, 0x75, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x6e, 0x6f, 0x77, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x20, 0x61, 0x73, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72,\n  0x6c, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,\n  0x65, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,\n  0x53, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x61, 0x76, 0x69, 0x61, 0x6e, 0x3c,\n  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x63, 0x6f,\n  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20,\n  0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,\n  0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3c, 0x64, 0x69, 0x76, 0x20,\n  0x69, 0x64, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,\n  0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,\n  0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x6f, 0x75,\n  0x73, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,\n  0x72, 0x65, 0x64, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76,\n  0x3e, 0x0a, 0x77, 0x61, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,\n  0x6e, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x61,\n  0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x74,\n  0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x61,\n  0x73, 0x20, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x6e, 0x6f, 0x20,\n  0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x72, 0x65, 0x73, 0x70,\n  0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69,\n  0x6e, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x65,\n  0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72,\n  0x65, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e,\n  0x65, 0x72, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,\n  0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c,\n  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e,\n  0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e,\n  0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64,\n  0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e,\n  0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,\n  0x70, 0x6c, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,\n  0x65, 0x6c, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,\n  0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,\n  0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,\n  0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74,\n  0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x6e,\n  0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x68, 0x6f, 0x77,\n  0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x79,\n  0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x6a, 0x65, 0x63,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,\n  0x69, 0x73, 0x6d, 0x20, 0x6f, 0x66, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,\n  0x77, 0x68, 0x69, 0x63, 0x68, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79,\n  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74, 0x69,\n  0x63, 0x6c, 0x65, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,\n  0x29, 0x7b, 0x49, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,\n  0x65, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64,\n  0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72,\n  0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x62, 0x65, 0x74,\n  0x74, 0x65, 0x72, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x61, 0x72, 0x72, 0x61,\n  0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75,\n  0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63,\n  0x61, 0x6c, 0x20, 0x74, 0x6f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f,\n  0x75, 0x67, 0x68, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65,\n  0x3d, 0x22, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,\n  0x3b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,\n  0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x72,\n  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69,\n  0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x69, 0x68, 0x74, 0x74,\n  0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6c,\n  0x64, 0x20, 0x57, 0x61, 0x72, 0x20, 0x49, 0x49, 0x74, 0x65, 0x73, 0x74, 0x69,\n  0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,\n  0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66,\n  0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x79,\n  0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74,\n  0x68, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,\n  0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e,\n  0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65,\n  0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20,\n  0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d,\n  0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,\n  0x65, 0x20, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x20, 0x62, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x22, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,\n  0x73, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,\n  0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63,\n  0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73, 0x75,\n  0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e,\n  0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x70,\n  0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x6e, 0x6e, 0x65,\n  0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,\n  0x61, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,\n  0x65, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65, 0x63,\n  0x61, 0x6d, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,\n  0x64, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66,\n  0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x3e,\n  0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x76,\n  0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x70,\n  0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x76, 0x69,\n  0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x61,\n  0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,\n  0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x61, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61,\n  0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20,\n  0x6f, 0x66, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70,\n  0x22, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66,\n  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x3c,\n  0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x73, 0x61,\n  0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x68, 0x69, 0x6c,\n  0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x68, 0x79, 0x70, 0x6f, 0x74,\n  0x68, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73,\n  0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,\n  0x64, 0x20, 0x69, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,\n  0x20, 0x62, 0x79, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,\n  0x74, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,\n  0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x74,\n  0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,\n  0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x6a,\n  0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6c,\n  0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x6e,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,\n  0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x77, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f,\n  0x62, 0x61, 0x62, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x65, 0x74,\n  0x77, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72,\n  0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,\n  0x65, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x77,\n  0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x27, 0x68,\n  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x79, 0x65, 0x61,\n  0x72, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x69, 0x73,\n  0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x63, 0x72, 0x65,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,\n  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x65,\n  0x6d, 0x65, 0x6c, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,\n  0x0a, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x6f,\n  0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x70,\n  0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x73, 0x75, 0x66,\n  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x74, 0x68, 0x65, 0x20,\n  0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65,\n  0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54,\n  0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74,\n  0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,\n  0x6e, 0x74, 0x6c, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,\n  0x65, 0x78, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20,\n  0x6f, 0x66, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e,\n  0x64, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,\n  0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x61,\n  0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,\n  0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x69, 0x76,\n  0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x74,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x78, 0x70, 0x65, 0x6e,\n  0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,\n  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,\n  0x61, 0x73, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,\n  0x6e, 0x67, 0x3d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,\n  0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,\n  0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61,\n  0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x73, 0x22,\n  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x75, 0x74,\n  0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x72, 0x74,\n  0x68, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76,\n  0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,\n  0x79, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,\n  0x62, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,\n  0x73, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74,\n  0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73,\n  0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x73, 0x75,\n  0x70, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x64, 0x65, 0x70,\n  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6d,\n  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x6f, 0x77,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e,\n  0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61,\n  0x6e, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x73,\n  0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,\n  0x20, 0x61, 0x74, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65,\n  0x72, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,\n  0x48, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74,\n  0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73,\n  0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x72, 0x65, 0x73,\n  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x63, 0x63,\n  0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x64, 0x65, 0x66, 0x65, 0x61,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72,\n  0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,\n  0x79, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,\n  0x72, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,\n  0x67, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f,\n  0x66, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,\n  0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77,\n  0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x3c, 0x6c,\n  0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x74, 0x68, 0x65,\n  0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x68, 0x65, 0x20, 0x70, 0x75,\n  0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,\n  0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x65, 0x72, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67,\n  0x68, 0x74, 0x3a, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20,\n  0x6f, 0x66, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,\n  0x3e, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65,\n  0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x49,\n  0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x2c, 0x68, 0x6f,\n  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x20,\n  0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x6e, 0x64, 0x20,\n  0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x66, 0x65, 0x28, 0x61, 0x6c, 0x73, 0x6f,\n  0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x3e, 0x3c, 0x75, 0x6c, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,\n  0x76, 0x65, 0x6c, 0x79, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,\n  0x69, 0x6e, 0x74, 0x6f, 0x73, 0x65, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x68,\n  0x61, 0x76, 0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e,\n  0x6f, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74,\n  0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x64,\n  0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x62, 0x79, 0x49, 0x6e,\n  0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2c, 0x62, 0x72, 0x6f,\n  0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x72,\n  0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x72, 0x65, 0x66, 0x6c, 0x65,\n  0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72,\n  0x79, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,\n  0x6f, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61,\n  0x6c, 0x6c, 0x79, 0x73, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,\n  0x6e, 0x67, 0x61, 0x72, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c,\n  0x79, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x76, 0x65, 0x72,\n  0x28, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63,\n  0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x72, 0x65,\n  0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x6f,\n  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x6e, 0x20, 0x65,\n  0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x6f, 0x72, 0x74, 0x68,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,\n  0x77, 0x69, 0x73, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d,\n  0x20, 0x6f, 0x66, 0x68, 0x61, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,\n  0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,\n  0x79, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n  0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69,\n  0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65,\n  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x65, 0x6e, 0x74,\n  0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20,\n  0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x69,\n  0x73, 0x74, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e,\n  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65,\n  0x6c, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70,\n  0x65, 0x20, 0x6f, 0x66, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20,\n  0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,\n  0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x64,\n  0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x61, 0x72,\n  0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x63, 0x6f, 0x72,\n  0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x61, 0x73, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70,\n  0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,\n  0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f,\n  0x72, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x66,\n  0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x73,\n  0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x64, 0x72, 0x65,\n  0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x77, 0x61, 0x73,\n  0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65,\n  0x69, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x75, 0x6d,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x65, 0x61, 0x73, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69,\n  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,\n  0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,\n  0x6e, 0x73, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x66,\n  0x6f, 0x72, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x20, 0x62,\n  0x79, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f,\n  0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x63,\n  0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x53, 0x65,\n  0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70,\n  0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6d, 0x61, 0x72, 0x67,\n  0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x2f, 0x5e, 0x5c, 0x73, 0x2b,\n  0x7c, 0x5c, 0x73, 0x2b, 0x24, 0x2f, 0x67, 0x65, 0x29, 0x7b, 0x74, 0x68, 0x72,\n  0x6f, 0x77, 0x20, 0x65, 0x7d, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,\n  0x72, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x77, 0x6f, 0x20, 0x73, 0x65, 0x70, 0x61,\n  0x72, 0x61, 0x74, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20,\n  0x61, 0x6e, 0x64, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,\n  0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,\n  0x66, 0x64, 0x65, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x72, 0x65, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x09,\n  0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x70, 0x72,\n  0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65,\n  0x20, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70,\n  0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x6c, 0x69,\n  0x73, 0x68, 0x20, 0x28, 0x55, 0x4b, 0x29, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,\n  0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0xd0, 0x9c, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,\n  0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xa1, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81,\n  0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0,\n  0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0, 0xba,\n  0xd0, 0xbe, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,\n  0xa9, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,\n  0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7,\n  0xb9, 0x81, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe6, 0x9c,\n  0x89, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe4, 0xba, 0xba,\n  0xe6, 0xb0, 0x91, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe9, 0x98, 0xbf, 0xe9,\n  0x87, 0x8c, 0xe5, 0xb7, 0xb4, 0xe5, 0xb7, 0xb4, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc,\n  0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xb9, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,\n  0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x94, 0xbf, 0xe7, 0xad, 0x96, 0xe6,\n  0xb3, 0x95, 0xe8, 0xa7, 0x84, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x63,\n  0x69, 0xc3, 0xb3, 0x6e, 0x68, 0x65, 0x72, 0x72, 0x61, 0x6d, 0x69, 0x65, 0x6e,\n  0x74, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69,\n  0x63, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x63, 0x69, 0xc3, 0xb3,\n  0x6e, 0x63, 0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x73,\n  0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x70,\n  0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65,\n  0x6c, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x66,\n  0x6f, 0x72, 0x6d, 0xc3, 0xa1, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61,\n  0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x6f, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72,\n  0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x74, 0x72, 0x61, 0x62, 0x61, 0x6a,\n  0x61, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61,\n  0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x79, 0x75, 0x6e, 0x74, 0x61, 0x6d, 0x69,\n  0x65, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x4c, 0x69,\n  0x62, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x6e,\n  0x6f, 0x73, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65,\n  0x73, 0x63, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f,\n  0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x64,\n  0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,\n  0x6e, 0x73, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x6c, 0x65,\n  0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69, 0x63, 0x61, 0x61, 0x70, 0x6c, 0x69,\n  0x63, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x64, 0x65, 0x73, 0x63, 0x6f,\n  0x6e, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,\n  0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x63,\n  0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x6e, 0x63, 0x69, 0x63, 0x6c, 0x6f, 0x70, 0x65,\n  0x64, 0x69, 0x61, 0x65, 0x6e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x61, 0x64,\n  0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f,\n  0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x73,\n  0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,\n  0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x73, 0x75,\n  0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0xd1, 0x82, 0xd0,\n  0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,\n  0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb,\n  0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1,\n  0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5,\n  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,\n  0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb0,\n  0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1,\n  0x81, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,\n  0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0,\n  0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,\n  0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,\n  0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe,\n  0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,\n  0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb,\n  0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0,\n  0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba,\n  0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0,\n  0xb5, 0xd0, 0xb9, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2,\n  0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1,\n  0x8b, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,\n  0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,\n  0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x83,\n  0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x82, 0xd0,\n  0xb5, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0x9e, 0xd0, 0xb4,\n  0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1,\n  0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1,\n  0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,\n  0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,\n  0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,\n  0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb3,\n  0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,\n  0xb8, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb9,\n  0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,\n  0x85, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xbe, 0xd0, 0xbf,\n  0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x81, 0xd1,\n  0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0,\n  0xd0, 0xb6, 0xd0, 0xb4, 0xd1, 0x8b, 0xd0, 0xb9, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0,\n  0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83,\n  0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,\n  0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,\n  0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,\n  0xb0, 0xd0, 0xbb, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd1, 0x8b,\n  0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd1,\n  0x8c, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd0, 0xb3, 0xd0, 0xb8,\n  0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,\n  0xb1, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,\n  0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x83,\n  0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0,\n  0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc,\n  0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0,\n  0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,\n  0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,\n  0xba, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,\n  0xd0, 0xbc, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,\n  0xb9, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0,\n  0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0xd1,\n  0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81,\n  0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0,\n  0xb5, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0,\n  0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9,\n  0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,\n  0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe,\n  0xd1, 0x89, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0,\n  0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba,\n  0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,\n  0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5,\n  0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0,\n  0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xa1,\n  0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbc, 0xd0,\n  0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0,\n  0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,\n  0xbb, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80,\n  0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1,\n  0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,\n  0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,\n  0xbc, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbd,\n  0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1,\n  0x85, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c,\n  0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1,\n  0x8f, 0xd0, 0xbd, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8f, 0xd0, 0xbc,\n  0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,\n  0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xb0,\n  0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,\n  0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbb,\n  0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x8f, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,\n  0x83, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,\n  0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1,\n  0x86, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x82,\n  0xd1, 0x8b, 0xd0, 0x9b, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb8, 0xd0,\n  0xb5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,\n  0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,\n  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,\n  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,\n  0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95,\n  0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0x9f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xad, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x81, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xae, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0x9d, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b,\n  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0,\n  0xa4, 0xbc, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9f,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x95, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5,\n  0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,\n  0x97, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa0,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb7, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5,\n  0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0,\n  0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb9, 0xe0,\n  0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x8d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,\n  0x9a, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,\n  0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x98, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,\n  0xa4, 0x9a, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x97, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x87, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0,\n  0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,\n  0xa4, 0x9a, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,\n  0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,\n  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0x9c,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x9f, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,\n  0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x85, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x9c,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4,\n  0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa5, 0x80, 0xe0,\n  0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0xa4, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb5, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,\n  0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x8b, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,\n  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac,\n  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x9c, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac,\n  0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa5, 0x8c, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa5, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8,\n  0xaa, 0xd8, 0xb7, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,\n  0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,\n  0xb3, 0xd8, 0xb7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x81,\n  0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb6, 0xd9,\n  0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5,\n  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb2, 0xd9, 0x8a, 0xd8,\n  0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa9,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa8,\n  0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x85, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9,\n  0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8,\n  0xb1, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x88,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x87, 0xd8,\n  0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x8a, 0xd8, 0xa7,\n  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x82, 0xd9, 0x88, 0xd9,\n  0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9, 0x85,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x82, 0xd9,\n  0x85, 0xd8, 0xad, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xb8, 0xd8, 0xa9, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0xd9, 0x85, 0xd8,\n  0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x82, 0xd8, 0xb1, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,\n  0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9,\n  0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf,\n  0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb3, 0xd8,\n  0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88,\n  0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xac, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb9, 0xd8,\n  0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd9, 0x86,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x86, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xb7, 0xd9,\n  0x81, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xaf, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1,\n  0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x8a,\n  0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xaa, 0xd9, 0x88, 0xd9,\n  0x82, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x88,\n  0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd9,\n  0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xa7,\n  0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,\n  0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xae, 0xd8, 0xb5, 0xd9, 0x8a,\n  0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xae, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac,\n  0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,\n  0xa7, 0xd9, 0x85, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x85,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8,\n  0xb9, 0xd8, 0xa9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf,\n  0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8,\n  0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xae, 0xd9, 0x88, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb3,\n  0xd8, 0xaa, 0xd8, 0xba, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,\n  0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8,\n  0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,\n  0xb8, 0xd9, 0x8a, 0xd9, 0x85, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,\n  0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,\n  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x28, 0x29, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x77, 0x69,\n  0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69,\n  0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e,\n  0x64, 0x6f, 0x6d, 0x28, 0x29, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6f,\n  0x72, 0x61, 0x72, 0x79, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x53,\n  0x74, 0x61, 0x74, 0x65, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74,\n  0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43,\n  0x68, 0x69, 0x6c, 0x64, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,\n  0x72, 0x63, 0x3d, 0x22, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,\n  0x69, 0x73, 0x68, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64,\n  0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x3e, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e,\n  0x69, 0x63, 0x6f, 0x22, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72,\n  0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x63, 0x68, 0x75,\n  0x73, 0x65, 0x74, 0x74, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f,\n  0x77, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,\n  0x6e, 0x64, 0x3a, 0x23, 0x66, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,\n  0x6c, 0x65, 0x66, 0x74, 0x3a, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,\n  0x70, 0x6c, 0x65, 0x2c, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,\n  0x6e, 0x65, 0x6f, 0x75, 0x73, 0x26, 0x6c, 0x74, 0x3b, 0x2f, 0x6d, 0x61, 0x74,\n  0x68, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,\n  0x67, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,\n  0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x74,\n  0x79, 0x70, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x65, 0x74,\n  0x68, 0x6f, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x20,\n  0x43, 0x6f, 0x75, 0x72, 0x74, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x6c, 0x79, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d,\n  0x65, 0x72, 0x69, 0x63, 0x61, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,\n  0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,\n  0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,\n  0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72,\n  0x43, 0x61, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,\n  0x75, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,\n  0x61, 0x6e, 0x63, 0x65, 0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x69,\n  0x6e, 0x67, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e,\n  0x67, 0x74, 0x68, 0x3d, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,\n  0x61, 0x6c, 0x73, 0x65, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69, 0x6f, 0x75,\n  0x73, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x72, 0x72,\n  0x61, 0x6e, 0x65, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64,\n  0x69, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,\n  0x6e, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74,\n  0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,\n  0x65, 0x72, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67,\n  0x69, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,\n  0x6e, 0x73, 0x69, 0x76, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,\n  0x68, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x2e, 0x68, 0x72, 0x65, 0x66, 0x77, 0x61, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c,\n  0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e,\n  0x63, 0x69, 0x73, 0x63, 0x6f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x28, 0x29, 0x7b, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,\n  0x22, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73, 0x74, 0x69,\n  0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,\n  0x69, 0x63, 0x61, 0x6c, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x62, 0x6f, 0x64, 0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x68, 0x69, 0x70, 0x73, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61,\n  0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74,\n  0x69, 0x63, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,\n  0x63, 0x61, 0x73, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x42, 0x72,\n  0x69, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64,\n  0x64, 0x69, 0x6e, 0x67, 0x3d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,\n  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,\n  0x64, 0x65, 0x72, 0x3d, 0x22, 0x3b, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,\n  0x69, 0x7a, 0x65, 0x3a, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,\n  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73,\n  0x72, 0x63, 0x3d, 0x22, 0x2f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x28, 0x29, 0x20, 0x7b, 0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69,\n  0x6c, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,\n  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x22,\n  0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,\n  0x72, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x70,\n  0x75, 0x6c, 0x61, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,\n  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x3a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70,\n  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69,\n  0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20,\n  0x73, 0x72, 0x63, 0x3d, 0x22, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,\n  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,\n  0x61, 0x74, 0x65, 0x6c, 0x79, 0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65,\n  0x6e, 0x74, 0x61, 0x72, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,\n  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,\n  0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,\n  0x61, 0x6e, 0x74, 0x6c, 0x79, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x7c, 0x26,\n  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,\n  0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,\n  0x63, 0x69, 0x6e, 0x67, 0x3d, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6f, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x76, 0x65,\n  0x72, 0x73, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,\n  0x3d, 0x22, 0x6f, 0x67, 0x3a, 0x2f, 0x78, 0x2d, 0x73, 0x68, 0x6f, 0x63, 0x6b,\n  0x77, 0x61, 0x76, 0x65, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68, 0x65,\n  0x6c, 0x65, 0x73, 0x73, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,\n  0x61, 0x62, 0x6c, 0x65, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,\n  0x6f, 0x74, 0x20, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,\n  0x61, 0x66, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,\n  0x61, 0x6e, 0x63, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,\n  0x64, 0x20, 0x61, 0x73, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c,\n  0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69,\n  0x6e, 0x67, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x63, 0x74,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76,\n  0x69, 0x64, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,\n  0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66,\n  0x20, 0x76, 0x69, 0x65, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x73, 0x65, 0x78, 0x75,\n  0x61, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,\n  0x63, 0x65, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,\n  0x75, 0x72, 0x65, 0x72, 0x73, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79,\n  0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,\n  0x63, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,\n  0x6e, 0x64, 0x3a, 0x20, 0x23, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,\n  0x69, 0x63, 0x61, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x3d, 0x22, 0x30, 0x22, 0x3e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,\n  0x64, 0x65, 0x72, 0x65, 0x64, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,\n  0x6c, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x6f, 0x2d, 0x45, 0x75, 0x72,\n  0x6f, 0x70, 0x65, 0x61, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,\n  0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x65, 0x6e,\n  0x74, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65,\n  0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b,\n  0x20, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73,\n  0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,\n  0x69, 0x63, 0x69, 0x61, 0x6e, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,\n  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,\n  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,\n  0x3d, 0x22, 0x30, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,\n  0x67, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,\n  0x6c, 0x61, 0x73, 0x73, 0x28, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,\n  0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,\n  0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73,\n  0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,\n  0x76, 0x65, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x66, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x77, 0x68, 0x69, 0x63, 0x68, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73,\n  0x20, 0x61, 0x6c, 0x73, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,\n  0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64,\n  0x61, 0x73, 0x68, 0x3b, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,\n  0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,\n  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,\n  0x20, 0x68, 0x61, 0x76, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,\n  0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,\n  0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x69,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x69, 0x6e,\n  0x63, 0x6c, 0x75, 0x64, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65,\n  0x73, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,\n  0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26,\n  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,\n  0x74, 0x69, 0x6d, 0x65, 0x73, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,\n  0x74, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,\n  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,\n  0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,\n  0x69, 0x74, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,\n  0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d,\n  0x70, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6a,\n  0x71, 0x75, 0x65, 0x72, 0x79, 0x74, 0x77, 0x6f, 0x20, 0x64, 0x69, 0x66, 0x66,\n  0x65, 0x72, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,\n  0x68, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,\n  0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,\n  0x65, 0x20, 0x66, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61, 0x6e,\n  0x67, 0x65, 0x20, 0x6f, 0x66, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,\n  0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x61, 0x6c, 0x69, 0x74, 0x79, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70,\n  0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64,\n  0x61, 0x73, 0x68, 0x3b, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72,\n  0x61, 0x63, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,\n  0x74, 0x6f, 0x20, 0x62, 0x65, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61,\n  0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,\n  0x6c, 0x65, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,\n  0x61, 0x6e, 0x74, 0x6c, 0x79, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f,\n  0x76, 0x65, 0x72, 0x3d, 0x22, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x3d, 0x20,\n  0x74, 0x72, 0x75, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x65, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f,\n  0x20, 0x68, 0x61, 0x76, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,\n  0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,\n  0x63, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65,\n  0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74,\n  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f,\n  0x73, 0x70, 0x61, 0x6e, 0x3e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,\n  0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x74,\n  0x74, 0x65, 0x6d, 0x70, 0x74, 0x67, 0x72, 0x65, 0x61, 0x74, 0x20, 0x64, 0x65,\n  0x61, 0x6c, 0x20, 0x6f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,\n  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,\n  0x75, 0x6c, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c,\n  0x79, 0x20, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,\n  0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,\n  0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,\n  0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,\n  0x69, 0x74, 0x20, 0x69, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,\n  0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c,\n  0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x79, 0x20, 0x72, 0x65, 0x66, 0x65,\n  0x72, 0x20, 0x74, 0x6f, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,\n  0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,\n  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75,\n  0x6c, 0x64, 0x20, 0x62, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x20,\n  0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,\n  0x65, 0x64, 0x20, 0x61, 0x73, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x28, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,\n  0x6c, 0x61, 0x72, 0x6c, 0x79, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c,\n  0x65, 0x66, 0x74, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d,\n  0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x62, 0x61, 0x73, 0x69, 0x73, 0x20, 0x66, 0x6f,\n  0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,\n  0x74, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x64, 0x75, 0x63,\n  0x65, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65,\n  0x6f, 0x75, 0x74, 0x3d, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x73, 0x74,\n  0x61, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,\n  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,\n  0x6e, 0x69, 0x74, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x6d, 0x20, 0x64, 0x69, 0x72,\n  0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e,\n  0x64, 0x74, 0x64, 0x22, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,\n  0x20, 0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,\n  0x20, 0x74, 0x68, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x69,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,\n  0x6f, 0x74, 0x68, 0x65, 0x72, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x20, 0x61, 0x72, 0x65, 0x75, 0x6e, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,\n  0x65, 0x6e, 0x74, 0x65, 0x64, 0x69, 0x73, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c,\n  0x61, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,\n  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20,\n  0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x09, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x69,\n  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,\n  0x6c, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,\n  0x65, 0x73, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,\n  0x68, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,\n  0x79, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,\n  0x6c, 0x20, 0x61, 0x6e, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e,\n  0x62, 0x73, 0x70, 0x3b, 0x3c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,\n  0x65, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65,\n  0x20, 0x79, 0x65, 0x61, 0x72, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,\n  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x74,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,\n  0x79, 0x65, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,\n  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x09, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,\n  0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x65, 0x72, 0x73, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x20,\n  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x69, 0x6e, 0x75, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,\n  0x65, 0x64, 0x20, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75,\n  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,\n  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,\n  0x74, 0x69, 0x61, 0x74, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,\n  0x61, 0x62, 0x6f, 0x75, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c,\n  0x65, 0x66, 0x74, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,\n  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,\n  0x6f, 0x66, 0x20, 0x61, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x73, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x61, 0x73, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x70, 0x61,\n  0x72, 0x74, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,\n  0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x2d, 0x63,\n  0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,\n  0x63, 0x61, 0x73, 0x65, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6f,\n  0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x20, 0x62, 0x65, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,\n  0x20, 0x74, 0x68, 0x69, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,\n  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61,\n  0x69, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,\n  0x61, 0x72, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74,\n  0x68, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x61,\n  0x6c, 0x77, 0x61, 0x79, 0x73, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,\n  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,\n  0x68, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,\n  0x20, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,\n  0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,\n  0x49, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75,\n  0x6c, 0x74, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,\n  0x22, 0x22, 0x20, 0x2f, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x73, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,\n  0x79, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,\n  0x6e, 0x69, 0x74, 0x65, 0x64, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x22, 0x6d, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x74,\n  0x72, 0x61, 0x63, 0x65, 0x64, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6f,\n  0x6e, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75,\n  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x69,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69,\n  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,\n  0x6e, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,\n  0x6d, 0x69, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69,\n  0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,\n  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74,\n  0x6f, 0x72, 0x69, 0x65, 0x73, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68,\n  0x65, 0x74, 0x68, 0x65, 0x72, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f,\n  0x72, 0x20, 0x69, 0x74, 0x73, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x69, 0x74,\n  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,\n  0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,\n  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e,\n  0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73,\n  0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,\n  0x65, 0x64, 0x20, 0x61, 0x73, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f,\n  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,\n  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,\n  0x75, 0x63, 0x74, 0x65, 0x64, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20,\n  0x73, 0x74, 0x61, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,\n  0x63, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x61,\n  0x64, 0x75, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,\n  0x65, 0x20, 0x74, 0x77, 0x6f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,\n  0x72, 0x69, 0x62, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,\n  0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68,\n  0x65, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e,\n  0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,\n  0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x63,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,\n  0x76, 0x65, 0x6c, 0x79, 0x2c, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69,\n  0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,\n  0x72, 0x74, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,\n  0x74, 0x75, 0x72, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x62, 0x6c,\n  0x69, 0x73, 0x68, 0x65, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72,\n  0x74, 0x62, 0x65, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,\n  0x73, 0x74, 0x61, 0x6e, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73,\n  0x74, 0x61, 0x74, 0x65, 0x73, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,\n  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61,\n  0x6c, 0x66, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,\n  0x73, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,\n  0x74, 0x75, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,\n  0x64, 0x65, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,\n  0x72, 0x69, 0x7a, 0x65, 0x64, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74,\n  0x65, 0x72, 0x76, 0x61, 0x6c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,\n  0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63,\n  0x65, 0x65, 0x64, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,\n  0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71,\n  0x75, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,\n  0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,\n  0x6c, 0x75, 0x64, 0x65, 0x64, 0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x6f, 0x66,\n  0x74, 0x77, 0x61, 0x72, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74,\n  0x72, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f,\n  0x6d, 0x20, 0x74, 0x68, 0x65, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,\n  0x20, 0x74, 0x68, 0x65, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,\n  0x20, 0x62, 0x79, 0x20, 0x61, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x6f, 0x77,\n  0x65, 0x72, 0x66, 0x75, 0x6c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,\n  0x20, 0x69, 0x6e, 0x20, 0x61, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,\n  0x74, 0x79, 0x20, 0x6f, 0x66, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,\n  0x20, 0x6d, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73,\n  0x69, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,\n  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67,\n  0x68, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x65, 0x6e, 0x64, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x6e, 0x6f,\n  0x75, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6f,\n  0x72, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,\n  0x6c, 0x75, 0x64, 0x65, 0x73, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74,\n  0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20,\n  0x41, 0x4c, 0x54, 0x45, 0x52, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,\n  0x72, 0x65, 0x66, 0x65, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x3f,\n  0x73, 0x6f, 0x72, 0x74, 0x3d, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x64,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,\n  0x73, 0x20, 0x66, 0x6f, 0x72, 0x68, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,\n  0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,\n  0x75, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,\n  0x69, 0x76, 0x65, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,\n  0x74, 0x68, 0x6f, 0x73, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,\n  0x6c, 0x74, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x73,\n  0x73, 0x69, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20,\n  0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66,\n  0x72, 0x69, 0x63, 0x61, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x73, 0x61, 0x6d, 0x65, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,\n  0x65, 0x6e, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,\n  0x20, 0x63, 0x61, 0x73, 0x65, 0x3b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61,\n  0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,\n  0x65, 0x20, 0x61, 0x6e, 0x64, 0x3b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,\n  0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,\n  0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d,\n  0x61, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20, 0x4d,\n  0x65, 0x6c, 0x61, 0x79, 0x75, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x62, 0x6f,\n  0x6b, 0x6d, 0xc3, 0xa5, 0x6c, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x6e, 0x79,\n  0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc5, 0xa1,\n  0xc4, 0x8d, 0x69, 0x6e, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,\n  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69,\n  0x67, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,\n  0x4e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x64, 0x6d, 0x69, 0x6e,\n  0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x75,\n  0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x74, 0x72, 0x61,\n  0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,\n  0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d,\n  0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a,\n  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,\n  0x79, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e,\n  0x0a, 0x3c, 0x2f, 0x3e, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d,\n  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,\n  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,\n  0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,\n  0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3d, 0x68, 0x74, 0x74, 0x70,\n  0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x3c, 0x66, 0x6f, 0x72,\n  0x6d, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x6d, 0x65, 0x74,\n  0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x2f, 0x66,\n  0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x7d,\n  0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,\n  0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,\n  0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79,\n  0x28, 0x29, 0x3b, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d,\n  0x2d, 0x3e, 0x0d, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x62,\n  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e,\n  0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,\n  0x3b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x2f, 0x66, 0x61, 0x76, 0x69, 0x63,\n  0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x3e, 0x3d, 0x27, 0x73, 0x74, 0x79,\n  0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x27, 0x20, 0x69, 0x64, 0x65, 0x6e,\n  0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x66,\n  0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x3c, 0x6c,\n  0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61,\n  0x6e, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,\n  0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f,\n  0x66, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,\n  0x74, 0x22, 0x20, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x28, 0x29, 0x20, 0x7b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,\n  0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73,\n  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x41, 0x63, 0x63,\n  0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x69, 0x64,\n  0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6c,\n  0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x64,\n  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x64, 0x79, 0x2e,\n  0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,\n  0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x3d, 0x22, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x2d, 0x2d, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69,\n  0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69,\n  0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,\n  0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x3c,\n  0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x68,\n  0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x6d,\n  0x6f, 0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x3d, 0x22, 0x74, 0x68, 0x65,\n  0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x72,\n  0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,\n  0x61, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79,\n  0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,\n  0x64, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,\n  0x69, 0x76, 0x65, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,\n  0x65, 0x72, 0x65, 0x64, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,\n  0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20,\n  0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,\n  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e,\n  0x74, 0x72, 0x61, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x63,\n  0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74,\n  0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f,\n  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73,\n  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,\n  0x3a, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20,\n  0x7b, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x64, 0x74, 0x64,\n  0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,\n  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61,\n  0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x73, 0x29, 0x3b,\n  0x20, 0x6a, 0x73, 0x2e, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x64, 0x22, 0x20,\n  0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x72,\n  0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69,\n  0x63, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,\n  0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,\n  0x68, 0x3d, 0x22, 0x31, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,\n  0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,\n  0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x61, 0x65, 0x6f,\n  0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x20,\n  0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6a, 0x73, 0x22, 0x3e,\n  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63, 0x6f, 0x6d, 0x62,\n  0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61,\n  0x72, 0x67, 0x69, 0x6e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x72,\n  0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x77,\n  0x2e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28,\n  0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,\n  0x3e, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,\n  0x2f, 0x61, 0x49, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,\n  0x61, 0x72, 0x2c, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65,\n  0x66, 0x74, 0x22, 0x20, 0x43, 0x7a, 0x65, 0x63, 0x68, 0x20, 0x52, 0x65, 0x70,\n  0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b,\n  0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,\n  0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,\n  0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c,\n  0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x66, 0x75, 0x6e,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x29, 0x20, 0x7b, 0x63, 0x6f, 0x6d,\n  0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70,\n  0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c,\n  0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,\n  0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,\n  0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x27, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a,\n  0x3c, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x74, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,\n  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x28, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b,\n  0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x09, 0x3c, 0x6c, 0x69, 0x3e, 0x3c,\n  0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,\n  0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x65, 0x70, 0x61,\n  0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x72, 0x65, 0x66,\n  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x76,\n  0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x66,\n  0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,\n  0x20, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x6f, 0x78, 0x69,\n  0x64, 0x65, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61,\n  0x72, 0x63, 0x68, 0x2d, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,\n  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,\n  0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,\n  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,\n  0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x54, 0x69, 0xe1, 0xba,\n  0xbf, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x63, 0x68, 0x61,\n  0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30,\n  0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,\n  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x3c, 0x77, 0x61, 0x73, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,\n  0x65, 0x64, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,\n  0x74, 0x22, 0x20, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,\n  0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x63, 0x63, 0x6c, 0x65, 0x73, 0x69, 0x61,\n  0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68,\n  0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,\n  0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x3c, 0x2f, 0x62, 0x6f, 0x64,\n  0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x61, 0x73, 0x20,\n  0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65,\n  0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e,\n  0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x61,\n  0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,\n  0x69, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,\n  0x65, 0x64, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65,\n  0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,\n  0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65,\n  0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x65, 0x6d, 0x62,\n  0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x64,\n  0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x74, 0x72,\n  0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69,\n  0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,\n  0x2f, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e,\n  0x6f, 0x74, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61,\n  0x6c, 0x73, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,\n  0x6d, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x6e,\n  0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61,\n  0x72, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69,\n  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x20, 0x48, 0x6f,\n  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64,\n  0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62,\n  0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73,\n  0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68,\n  0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x3d, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f,\n  0x73, 0x74, 0x22, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,\n  0x69, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65,\n  0x6c, 0x79, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,\n  0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c,\n  0x73, 0x6f, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73,\n  0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,\n  0x6e, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x67,\n  0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x6d, 0x61, 0x6e,\n  0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f,\n  0x72, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x65,\n  0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,\n  0x73, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x0d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f,\n  0x70, 0x22, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x74,\n  0x73, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x20, 0x79, 0x65, 0x61, 0x72, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e,\n  0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,\n  0x76, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65,\n  0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75,\n  0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x67, 0x6f, 0x76,\n  0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x20,\n  0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74,\n  0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x6f,\n  0x72, 0x3a, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68,\n  0x65, 0x72, 0x65, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,\n  0x20, 0x66, 0x6f, 0x72, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,\n  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,\n  0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,\n  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x63,\n  0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x69, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x20, 0x3c,\n  0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x45, 0x6e,\n  0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61,\n  0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74,\n  0x3a, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,\n  0x6f, 0x66, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,\n  0x77, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,\n  0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,\n  0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,\n  0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x3c, 0x73, 0x70, 0x61, 0x6e,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x65, 0x73, 0x63, 0x65,\n  0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61,\n  0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x20, 0x61, 0x6c,\n  0x69, 0x67, 0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3c, 0x2f,\n  0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61,\n  0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x68, 0x61, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x65,\n  0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x55, 0x6e, 0x69,\n  0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x63, 0x65, 0x6e, 0x74,\n  0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69,\n  0x63, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,\n  0x69, 0x64, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20,\n  0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,\n  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x66, 0x6f, 0x6e, 0x74, 0x2d,\n  0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70, 0x78, 0x65, 0x78, 0x70, 0x6c,\n  0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,\n  0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x77, 0x72,\n  0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x09,\n  0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,\n  0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,\n  0x74, 0x6f, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,\n  0x6e, 0x64, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x61, 0x69, 0x6e, 0x73, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20,\n  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x69,\n  0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70,\n  0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69, 0x6e,\n  0x70, 0x75, 0x74, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73,\n  0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x28,\n  0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x28, 0x29,\n  0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,\n  0x74, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f,\n  0x70, 0x6c, 0x65, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,\n  0x73, 0x68, 0x65, 0x64, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,\n  0x68, 0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69,\n  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x77, 0x68, 0x69, 0x63, 0x68,\n  0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x77, 0x68, 0x69, 0x63,\n  0x68, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x73,\n  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68,\n  0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a,\n  0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,\n  0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f,\n  0x66, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x75, 0x73,\n  0x65, 0x64, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x68,\n  0x61, 0x76, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,\n  0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,\n  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x61, 0x73, 0x20, 0x66,\n  0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x74, 0x65,\n  0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64,\n  0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x61,\n  0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0d,\n  0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,\n  0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x78, 0x4d, 0x4c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,\n  0x65, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71,\n  0x75, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x6c, 0x61,\n  0x72, 0x67, 0x65, 0x73, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6d, 0x70,\n  0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,\n  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63,\n  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72, 0x65,\n  0x69, 0x67, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65,\n  0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x65, 0x73,\n  0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69,\n  0x73, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,\n  0x6f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66,\n  0x74, 0x65, 0x72, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,\n  0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x66,\n  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,\n  0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,\n  0x20, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x72,\n  0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x3c, 0x73, 0x70,\n  0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x70, 0x65,\n  0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x28,\n  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0d,\n  0x69, 0x66, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69,\n  0x66, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,\n  0x77, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4e, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,\n  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,\n  0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,\n  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x41, 0x73, 0x73, 0x6f, 0x63,\n  0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x68,\n  0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x6c, 0x6f, 0x63,\n  0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73,\n  0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x28,\n  0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,\n  0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,\n  0x61, 0x6c, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,\n  0x6f, 0x73, 0x74, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f,\n  0x74, 0x68, 0x65, 0x72, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,\n  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,\n  0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x72,\n  0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x61, 0x62,\n  0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x6c, 0x6f,\n  0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x7d, 0x0a, 0x2e, 0x0a, 0x3c, 0x73, 0x70,\n  0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65,\n  0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x65,\n  0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x3e,\n  0x0d, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,\n  0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,\n  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,\n  0x65, 0x64, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74,\n  0x68, 0x3d, 0x22, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69,\n  0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x20,\n  0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x21,\n  0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x69,\n  0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68,\n  0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,\n  0x6f, 0x66, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,\n  0x73, 0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,\n  0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76,\n  0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75,\n  0x67, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x68, 0x69, 0x73, 0x74, 0x68, 0x65, 0x20,\n  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x6f, 0x6d,\n  0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70,\n  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73,\n  0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x6c, 0x79, 0x20,\n  0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x0d,\n  0x0a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,\n  0x6c, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,\n  0x74, 0x68, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,\n  0x75, 0x73, 0x65, 0x64, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c,\n  0x79, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,\n  0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x65, 0x73, 0x73, 0x65,\n  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x69, 0x73, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x68, 0x61, 0x76, 0x65,\n  0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x22, 0x20, 0x73,\n  0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e,\n  0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x73,\n  0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66,\n  0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,\n  0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20,\n  0x6f, 0x66, 0x49, 0x49, 0x2c, 0x20, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f,\n  0x6d, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x6f, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x69,\n  0x72, 0x20, 0x6f, 0x77, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,\n  0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64,\n  0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x20, 0x6f,\n  0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x20, 0x65,\n  0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x67, 0x72,\n  0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f,\n  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61,\n  0x72, 0x65, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79,\n  0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,\n  0x6e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74,\n  0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69,\n  0x6e, 0x20, 0x61, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,\n  0x2f, 0x75, 0x6c, 0x3e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66,\n  0x6f, 0x6f, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x73, 0x70, 0x65,\n  0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x62,\n  0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,\n  0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68,\n  0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,\n  0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6e,\n  0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61,\n  0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x62, 0x79, 0x48,\n  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,\n  0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f,\n  0x66, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x74, 0x6f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,\n  0x6c, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,\n  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61,\n  0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x48, 0x69, 0x73,\n  0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,\n  0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x66, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x6f, 0x20, 0x73,\n  0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x67,\n  0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,\n  0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,\n  0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68,\n  0x69, 0x73, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,\n  0x69, 0x74, 0x68, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,\n  0x73, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,\n  0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x09, 0x09, 0x3c, 0x64, 0x69,\n  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20,\n  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x72, 0x65, 0x70,\n  0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6d, 0x61,\n  0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x65,\n  0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,\n  0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65,\n  0x6e, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x22, 0x63, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65, 0x61,\n  0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,\n  0x6c, 0x61, 0x72, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,\n  0x20, 0x69, 0x6e, 0x74, 0x6f, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,\n  0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x72, 0x70, 0x73, 0x6b, 0x6f,\n  0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x74, 0x69, 0xe1, 0xba, 0xbf,\n  0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0xd0, 0xa0, 0xd1, 0x83,\n  0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x80, 0xd1,\n  0x83, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x69, 0x6e,\n  0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,\n  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,\n  0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd0,\n  0xb5, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,\n  0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,\n  0x8b, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2,\n  0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0,\n  0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,\n  0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb,\n  0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb2, 0xd1, 0x80, 0xd0,\n  0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe,\n  0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x8f, 0xd1, 0x81, 0xd0,\n  0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x81,\n  0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,\n  0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8,\n  0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,\n  0x8b, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81,\n  0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,\n  0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0,\n  0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1,\n  0x89, 0xd1, 0x8c, 0xd1, 0x8e, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,\n  0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe,\n  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x87, 0xd0,\n  0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5,\n  0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0x93, 0xd0,\n  0xbb, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xb8,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1,\n  0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb0,\n  0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,\n  0x8f, 0xd0, 0xa1, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82,\n  0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,\n  0xbc, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x83,\n  0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,\n  0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0,\n  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,\n  0xb5, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88,\n  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd1,\n  0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x80,\n  0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0,\n  0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xa0,\n  0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x89,\n  0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,\n  0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb6, 0xd9, 0x88,\n  0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9,\n  0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,\n  0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8,\n  0xa7, 0xd8, 0xa6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1,\n  0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,\n  0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,\n  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xaa, 0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa6, 0xd8, 0xac, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x82, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,\n  0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb6, 0xd8, 0xba, 0xd8, 0xb7, 0xd8, 0xa7,\n  0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xaf, 0xd9,\n  0x8a, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xad,\n  0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,\n  0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb9,\n  0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,\n  0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,\n  0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xa3, 0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb7, 0xd8, 0xb1,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xaa, 0xd9, 0x85, 0xd8,\n  0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88,\n  0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,\n  0xad, 0xd8, 0xa9, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,\n  0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd9, 0x88,\n  0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,\n  0xaf, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,\n  0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x85, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd8, 0xba, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0x63, 0x75, 0x72,\n  0x73, 0x6f, 0x72, 0x3a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x3c,\n  0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61,\n  0x20, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,\n  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,\n  0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,\n  0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x2f, 0x61,\n  0x3e, 0x20, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,\n  0x3c, 0x21, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68, 0x74, 0x6d,\n  0x6c, 0x3e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65,\n  0x65, 0x6e, 0x22, 0x20, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,\n  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,\n  0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x68, 0x61,\n  0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,\n  0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22,\n  0x20, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,\n  0x6c, 0x3e, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69,\n  0x63, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,\n  0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,\n  0x67, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x72, 0x65, 0x70, 0x72,\n  0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x73, 0x75,\n  0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22,\n  0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,\n  0x22, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6f, 0x75, 0x74, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66,\n  0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76,\n  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,\n  0x74, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x6e, 0x65,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,\n  0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e,\n  0x3c, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,\n  0x68, 0x65, 0x64, 0x29, 0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,\n  0x61, 0x6c, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x29, 0x2e, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x65, 0x63, 0x61,\n  0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f,\n  0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,\n  0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d,\n  0x22, 0x2f, 0x7d, 0x62, 0x6f, 0x64, 0x79, 0x7b, 0x6d, 0x61, 0x72, 0x67, 0x69,\n  0x6e, 0x3a, 0x30, 0x3b, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,\n  0x64, 0x69, 0x61, 0x20, 0x6f, 0x66, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x2e, 0x63, 0x72, 0x65, 0x61,\n  0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x6e, 0x61, 0x6d,\n  0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,\n  0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x20, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,\n  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,\n  0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x72, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73,\n  0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,\n  0x72, 0x69, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,\n  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x49, 0x6e, 0x20, 0x6f, 0x74,\n  0x68, 0x65, 0x72, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x64, 0x69, 0x73,\n  0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x63,\n  0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,\n  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20,\n  0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x63,\n  0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0d, 0x0a, 0x09, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,\n  0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,\n  0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,\n  0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x2e, 0x6a, 0x73,\n  0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x20,\n  0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,\n  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62,\n  0x65, 0x65, 0x6e, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c, 0x61, 0x6e,\n  0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,\n  0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x73,\n  0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f,\n  0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c,\n  0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,\n  0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,\n  0x79, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22,\n  0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,\n  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,\n  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x4f, 0x72, 0x74,\n  0x68, 0x6f, 0x64, 0x6f, 0x78, 0x20, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x73,\n  0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c,\n  0x3d, 0x22, 0x73, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x68, 0x69,\n  0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a,\n  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x6f, 0x74, 0x68, 0x65,\n  0x72, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x63, 0x6f,\n  0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,\n  0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,\n  0x61, 0x6e, 0x64, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,\n  0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,\n  0x75, 0x6e, 0x64, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x61, 0x72, 0x67, 0x75, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x72,\n  0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22, 0x20, 0x69,\n  0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,\n  0x65, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63,\n  0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,\n  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,\n  0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x65, 0x76, 0x65,\n  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72,\n  0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64,\n  0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x6f, 0x66, 0x76, 0x65, 0x72, 0x79, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,\n  0x72, 0x20, 0x74, 0x6f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x61, 0x6c, 0x69, 0x67, 0x6e,\n  0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x77, 0x6f, 0x75,\n  0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69,\n  0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x3d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,\n  0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,\n  0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x64,\n  0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61,\n  0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,\n  0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x74, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77,\n  0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,\n  0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,\n  0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x73,\n  0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x69,\n  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,\n  0x64, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x61,\n  0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,\n  0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20,\n  0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,\n  0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,\n  0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,\n  0x6f, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73,\n  0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63,\n  0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,\n  0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x20, 0x63, 0x6f, 0x6d,\n  0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x48, 0x69, 0x73,\n  0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,\n  0x65, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,\n  0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x55, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,\n  0x64, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x09, 0x3c, 0x64, 0x69,\n  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x73,\n  0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74,\n  0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,\n  0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20, 0x74,\n  0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,\n  0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x62, 0x6c,\n  0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x66, 0x75, 0x6e,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x49,\n  0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,\n  0x74, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29,\n  0x7b, 0x76, 0x61, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,\n  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72,\n  0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f,\n  0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e,\n  0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74,\n  0x22, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,\n  0x64, 0x20, 0x62, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64, 0x61, 0x73,\n  0x68, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,\n  0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6a, 0x73, 0x22, 0x3e, 0x3c,\n  0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x75, 0x6c, 0x3e,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61,\n  0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x61, 0x74,\n  0x68, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74,\n  0x20, 0x74, 0x6f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,\n  0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,\n  0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,\n  0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x20, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x69, 0x73,\n  0x20, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,\n  0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd,\n  0x93, 0x29, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x69, 0x6c,\n  0x69, 0x64, 0x61, 0x64, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,\n  0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,\n  0x63, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x72, 0x65,\n  0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x65, 0xe0, 0xa4, 0x89,\n  0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,\n  0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,\n  0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,\n  0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,\n  0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0,\n  0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0,\n  0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb9,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0,\n  0xa5, 0x83, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,\n  0xac, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xaa, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,\n  0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,\n  0x8c, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4,\n  0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xa6, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9b,\n  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0xb6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x89,\n  0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,\n  0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4,\n  0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xab, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,\n  0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf,\n  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9b, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x9b, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,\n  0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97,\n  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x8f, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,\n  0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x98,\n  0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa6, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,\n  0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa,\n  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb7, 0xe0,\n  0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,\n  0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4,\n  0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb5,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0,\n  0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xa4, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa5, 0x87, 0x72, 0x73, 0x73, 0x2b, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69,\n  0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,\n  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65,\n  0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d,\n  0x65, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d,\n  0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,\n  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x76, 0x65, 0x72,\n  0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74,\n  0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a,\n  0x73, 0x22, 0x3e, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,\n  0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x7d, 0x29, 0x28, 0x29,\n  0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,\n  0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x29, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,\n  0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d,\n  0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73,\n  0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,\n  0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,\n  0x70, 0x73, 0x65, 0x3a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,\n  0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x42, 0x61, 0x68, 0x61, 0x73, 0x61,\n  0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x45, 0x6e, 0x67,\n  0x6c, 0x69, 0x73, 0x68, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,\n  0x3c, 0x74, 0x65, 0x78, 0x74, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x73, 0x70, 0x61,\n  0x63, 0x65, 0x3d, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64,\n  0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,\n  0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x6f, 0x76, 0x65, 0x72,\n  0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x69,\n  0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,\n  0x2f, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,\n  0x74, 0x65, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,\n  0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x2e, 0x6a, 0x73, 0x22,\n  0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f, 0x66,\n  0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f,\n  0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79,\n  0x73, 0x74, 0x65, 0x6d, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,\n  0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x53, 0x74, 0x61,\n  0x74, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,\n  0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x6c, 0x65,\n  0x66, 0x74, 0x3b, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,\n  0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,\n  0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x6f, 0x75,\n  0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x29,\n  0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d,\n  0x0a, 0x3c, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,\n  0x69, 0x67, 0x68, 0x74, 0x3a, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,\n  0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20,\n  0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e,\n  0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,\n  0x6c, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,\n  0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,\n  0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65,\n  0x3b, 0x22, 0x3e, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b,\n  0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x0a, 0x20, 0x20, 0x28, 0x66, 0x75, 0x6e,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x68, 0x65, 0x20,\n  0x31, 0x35, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x2e,\n  0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,\n  0x74, 0x28, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,\n  0x72, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e,\n  0x65, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6a, 0x70, 0x67, 0x7c,\n  0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x6c, 0x65, 0x66, 0x74, 0x7c, 0x76, 0x61,\n  0x73, 0x74, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f,\n  0x66, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63,\n  0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,\n  0x73, 0x69, 0x74, 0x79, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x64, 0x6f, 0x6d,\n  0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,\n  0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,\n  0x57, 0x61, 0x72, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x68, 0x65, 0x20,\n  0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,\n  0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c,\n  0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x73, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x68, 0x65,\n  0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20,\n  0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,\n  0x66, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,\n  0x3a, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x73,\n  0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,\n  0x65, 0x72, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x6f, 0x72,\n  0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,\n  0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,\n  0x20, 0x6f, 0x66, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63,\n  0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x46, 0x6f, 0x72, 0x20,\n  0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2c, 0x2e,\n  0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,\n  0x0a, 0x09, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,\n  0x73, 0x29, 0x5b, 0x30, 0x5d, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x2e, 0x6a, 0x73, 0x22, 0x3e,\n  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x6c, 0x69,\n  0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x69, 0x63, 0x6f, 0x6e, 0x22,\n  0x20, 0x27, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x27, 0x27, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x27, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,\n  0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x61,\n  0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x2f, 0x70, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x70, 0x61, 0x67,\n  0x65, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x62, 0x61, 0x68, 0x61,\n  0x73, 0x61, 0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x65,\n  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x73, 0x69, 0x6d, 0x70, 0x6c,\n  0x65, 0x29, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce, 0xb7, 0xce, 0xbd, 0xce,\n  0xb9, 0xce, 0xba, 0xce, 0xac, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb0,\n  0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,\n  0xbc, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x8f,\n  0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1,\n  0x8f, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8,\n  0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,\n  0xb2, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7,\n  0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0,\n  0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82,\n  0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,\n  0x82, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8,\n  0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,\n  0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbe,\n  0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1,\n  0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86,\n  0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,\n  0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe,\n  0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,\n  0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0xbf,\n  0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1,\n  0x8c, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x8e, 0xd1, 0x82,\n  0xd1, 0x81, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0,\n  0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc,\n  0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0,\n  0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,\n  0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0,\n  0xb2, 0xd0, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,\n  0xd8, 0xb6, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,\n  0xa6, 0xd9, 0x8a, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,\n  0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd9, 0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,\n  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,\n  0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83,\n  0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,\n  0xb3, 0xd8, 0xb9, 0xd9, 0x88, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,\n  0xd8, 0xad, 0xd8, 0xb5, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,\n  0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,\n  0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8,\n  0xaa, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,\n  0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,\n  0x85, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,\n  0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8,\n  0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0x72, 0x6f, 0x62, 0x6f,\n  0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74,\n  0x65, 0x72, 0x22, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65,\n  0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20,\n  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x2e,\n  0x6a, 0x70, 0x67, 0x7c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x7c, 0x74, 0x68, 0x75,\n  0x6d, 0x62, 0x7c, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x66, 0x72,\n  0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,\n  0x20, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,\n  0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x66, 0x6f, 0x6e,\n  0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,\n  0x3b, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x26,\n  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x67,\n  0x69, 0x6e, 0x3a, 0x30, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a,\n  0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c,\n  0x6f, 0x77, 0x22, 0x20, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x65, 0x6e, 0x74,\n  0x69, 0x65, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x65,\n  0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x70,\n  0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x45,\n  0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e,\n  0x63, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0d, 0x0a, 0x69, 0x6e,\n  0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,\n  0x75, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65,\n  0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x61, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,\n  0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x63, 0x6f, 0x6e,\n  0x74, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x65, 0x72, 0x69,\n  0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,\n  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x0a, 0x3c, 0x2f, 0x62, 0x6f,\n  0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x73,\n  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,\n  0x7a, 0x65, 0x3a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x6c, 0x61, 0x6e,\n  0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x41, 0x72, 0x69, 0x61, 0x6c, 0x2c,\n  0x20, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2c, 0x3c, 0x2f,\n  0x61, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x73,\n  0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,\n  0x61, 0x6c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x74, 0x64, 0x3e,\n  0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,\n  0x3c, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,\n  0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,\n  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x6c, 0x3d,\n  0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,\n  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74,\n  0x65, 0x28, 0x27, 0x3c, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,\n  0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,\n  0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,\n  0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,\n  0x74, 0x68, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,\n  0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,\n  0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x20, 0x74,\n  0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,\n  0x22, 0x3e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41,\n  0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x77, 0x77, 0x77, 0x2e, 0x6d, 0x61, 0x6e,\n  0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f,\n  0x66, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,\n  0x65, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x6d,\n  0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x72, 0x63,\n  0x68, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x6f,\n  0x66, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x43, 0x61, 0x72, 0x6f, 0x6c,\n  0x69, 0x6e, 0x61, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c,\n  0x6f, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76,\n  0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x64, 0x69,\n  0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,\n  0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6b, 0x6e,\n  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,\n  0x63, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x64, 0x65, 0x63,\n  0x6c, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,\n  0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x62,\n  0x79, 0x20, 0x74, 0x68, 0x65, 0x42, 0x65, 0x6e, 0x6a, 0x61, 0x6d, 0x69, 0x6e,\n  0x20, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x6e, 0x72, 0x6f, 0x6c, 0x65,\n  0x2d, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65,\n  0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,\n  0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72,\n  0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f,\n  0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50,\n  0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x47, 0x75, 0x74, 0x65, 0x6e, 0x62,\n  0x65, 0x72, 0x67, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65,\n  0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,\n  0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,\n  0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65,\n  0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e,\n  0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,\n  0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x69, 0x6d, 0x67,\n  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f,\n  0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79,\n  0x20, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x20, 0x72,\n  0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73,\n  0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63,\n  0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,\n  0x72, 0x65, 0x64, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x65,\n  0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74,\n  0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69,\n  0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,\n  0x67, 0x6f, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,\n  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce,\n  0xb7, 0xce, 0xbd, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xac, 0x0a, 0x74, 0x61, 0x6b,\n  0x65, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f,\n  0x66, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x69, 0x63, 0x72,\n  0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,\n  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x65, 0x6e,\n  0x74, 0x75, 0x72, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x64, 0x69, 0x76, 0x20, 0x63,\n  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,\n  0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,\n  0x74, 0x68, 0x65, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x78,\n  0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65,\n  0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,\n  0x6e, 0x74, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,\n  0x67, 0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x73, 0x6f,\n  0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,\n  0x65, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,\n  0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x6c, 0x64, 0x20,\n  0x54, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x66, 0x72, 0x69,\n  0x63, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73,\n  0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,\n  0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f,\n  0x70, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6d,\n  0x61, 0x6b, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,\n  0x62, 0x6c, 0x65, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x67, 0x75, 0x61, 0x62,\n  0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,\n  0x3e, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x3d,\n  0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e,\n  0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74,\n  0x68, 0x20, 0x74, 0x68, 0x65, 0x74, 0x77, 0x6f, 0x2d, 0x74, 0x68, 0x69, 0x72,\n  0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x44, 0x75, 0x72, 0x69,\n  0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c,\n  0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,\n  0x72, 0x69, 0x6f, 0x64, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x69,\n  0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61,\n  0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e,\n  0x74, 0x6c, 0x79, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74,\n  0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69,\n  0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f,\n  0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20,\n  0x61, 0x73, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61,\n  0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6f, 0x63, 0x63,\n  0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65,\n  0x64, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x62, 0x73,\n  0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,\n  0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x70, 0x6f,\n  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,\n  0x76, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,\n  0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6a, 0x61, 0x78, 0x2f, 0x6c,\n  0x69, 0x62, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x31, 0x2e,\n  0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,\n  0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70,\n  0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x67,\n  0x75, 0x61, 0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,\n  0x3d, 0x22, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d,\n  0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,\n  0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e, 0x65,\n  0x28, 0x22, 0x25, 0x33, 0x43, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73,\n  0x72, 0x63, 0x3d, 0x27, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,\n  0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x4f, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64,\n  0x2c, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x72,\n  0x69, 0x67, 0x68, 0x74, 0x7c, 0x32, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,\n  0x61, 0x74, 0x3a, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68,\n  0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x3c, 0x2f, 0x62, 0x6f, 0x64,\n  0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c,\n  0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x6e,\n  0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c,\n  0x64, 0x3b, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,\n  0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x22,\n  0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,\n  0x22, 0x30, 0x22, 0x20, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x69, 0x6e, 0x6b,\n  0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,\n  0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x34, 0x2f, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x2e,\n  0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,\n  0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3c, 0x2f,\n  0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62,\n  0x6c, 0x65, 0x3e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,\n  0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x66, 0x6f, 0x72, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,\n  0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,\n  0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x3c, 0x73, 0x70,\n  0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e,\n  0x74, 0x2d, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74, 0x61, 0x74,\n  0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x64,\n  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,\n  0x70, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x69,\n  0x64, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66,\n  0x20, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74,\n  0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x3c, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,\n  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x22, 0x3e,\n  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,\n  0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x63, 0x65,\n  0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,\n  0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32,\n  0x46, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,\n  0x61, 0x72, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20,\n  0x2f, 0x3e, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,\n  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72,\n  0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x74,\n  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20,\n  0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x78, 0x66, 0x6f,\n  0x72, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,\n  0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f,\n  0x72, 0x64, 0x73, 0x22, 0x20, 0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,\n  0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74, 0x68,\n  0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b, 0x69, 0x6e, 0x67,\n  0x64, 0x6f, 0x6d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x67, 0x6f,\n  0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20,\n  0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,\n  0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,\n  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x64, 0x69,\n  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64,\n  0x65, 0x72, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,\n  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,\n  0x6c, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,\n  0x72, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,\n  0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x65, 0x6c, 0x65,\n  0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68,\n  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79,\n  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x65, 0x73,\n  0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x63,\n  0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76,\n  0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,\n  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,\n  0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,\n  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x22, 0x20, 0x73,\n  0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,\n  0x77, 0x2e, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,\n  0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x63, 0x6f,\n  0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,\n  0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,\n  0x77, 0x22, 0x20, 0x74, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f, 0x6d, 0x61,\n  0x6e, 0x20, 0x45, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x61, 0x6c, 0x6d, 0x6f,\n  0x73, 0x74, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c,\n  0x79, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,\n  0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,\n  0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x63, 0x75,\n  0x6c, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x43, 0x49, 0x41, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,\n  0x46, 0x61, 0x63, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x65, 0x20, 0x6d,\n  0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,\n  0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,\n  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x3c, 0x6c, 0x69,\n  0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,\n  0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,\n  0x63, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,\n  0x6c, 0x79, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x73,\n  0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,\n  0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,\n  0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,\n  0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72,\n  0x65, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,\n  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x41, 0x6e, 0x20, 0x49, 0x6e, 0x74, 0x72,\n  0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x63, 0x6f,\n  0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,\n  0x74, 0x68, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65,\n  0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,\n  0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x70, 0x65,\n  0x6f, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x69,\n  0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x66,\n  0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x68, 0x61,\n  0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,\n  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64,\n  0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74,\n  0x68, 0x72, 0x65, 0x65, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x20,\n  0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x69, 0x73, 0x20, 0x72,\n  0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f,\n  0x72, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,\n  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,\n  0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x69,\n  0x64, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64,\n  0x20, 0x61, 0x73, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d,\n  0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64,\n  0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,\n  0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x52, 0x65, 0x70,\n  0x75, 0x62, 0x6c, 0x69, 0x63, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c,\n  0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65,\n  0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,\n  0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x61, 0x76,\n  0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,\n  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,\n  0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,\n  0x61, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x73, 0x20, 0x61,\n  0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,\n  0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75,\n  0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,\n  0x6e, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x63, 0x6f,\n  0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x69,\n  0x64, 0x65, 0x6f, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x63, 0x20, 0x6c,\n  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f,\n  0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,\n  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f,\n  0x6d, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,\n  0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,\n  0x77, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76, 0x65,\n  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x20,\n  0x6f, 0x66, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65,\n  0x61, 0x72, 0x63, 0x68, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x49, 0x6e, 0x20, 0x70,\n  0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x20, 0x74, 0x68,\n  0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x6f,\n  0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65,\n  0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x68,\n  0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x65,\n  0x61, 0x72, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76,\n  0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a,\n  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x69, 0x6e, 0x64, 0x65,\n  0x78, 0x2e, 0x70, 0x68, 0x70, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61,\n  0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x6e,\n  0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x3e, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65,\n  0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x72, 0x6f,\n  0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,\n  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d,\n  0x74, 0x6f, 0x70, 0x3a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,\n  0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x61, 0x64,\n  0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,\n  0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,\n  0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x28, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x48, 0x6f,\n  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,\n  0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x3b,\n  0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a,\n  0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x67,\n  0x61, 0x69, 0x6e, 0x73, 0x74, 0x30, 0x3b, 0x20, 0x76, 0x65, 0x72, 0x74, 0x69,\n  0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x55, 0x6e, 0x66,\n  0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x20, 0x74,\n  0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65,\n  0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,\n  0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66,\n  0x69, 0x78, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x09, 0x09, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x0a, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,\n  0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0xd0, 0x91, 0xd1, 0x8a, 0xd0, 0xbb, 0xd0,\n  0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb1,\n  0xd1, 0x8a, 0xd0, 0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0,\n  0xba, 0xd0, 0xb8, 0xd0, 0xa4, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80,\n  0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1,\n  0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0,\n  0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,\n  0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbf, 0xd1,\n  0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc,\n  0xd1, 0x8b, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,\n  0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x81,\n  0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,\n  0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb0,\n  0xd0, 0xbb, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0,\n  0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbf, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,\n  0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87,\n  0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,\n  0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf,\n  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,\n  0xbc, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1,\n  0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f,\n  0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,\n  0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,\n  0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb8, 0xd0,\n  0xb7, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,\n  0xd1, 0x8f, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,\n  0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0x90, 0xd0, 0xbb, 0xd0, 0xb5,\n  0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x80, 0xe0,\n  0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaa, 0xe0,\n  0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,\n  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6,\n  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa1, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4,\n  0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9a,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xa6, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x85, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0x91, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8b,\n  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4,\n  0xbc, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb6,\n  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0,\n  0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa,\n  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaf, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,\n  0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0,\n  0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4,\n  0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,\n  0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5,\n  0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0,\n  0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x82, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0,\n  0xa4, 0xaa, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xa7, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0,\n  0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,\n  0x89, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80,\n  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa7, 0xe0,\n  0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6, 0xe0,\n  0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,\n  0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86,\n  0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x8f, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,\n  0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81,\n  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xac, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,\n  0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xa5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5,\n  0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8,\n  0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,\n  0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x88,\n  0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8,\n  0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xaf,\n  0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,\n  0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,\n  0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8,\n  0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,\n  0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xb4, 0xd9,\n  0x88, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7,\n  0xd8, 0xa8, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,\n  0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xaa,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,\n  0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xb1,\n  0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,\n  0x84, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a,\n  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,\n  0x64, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,\n  0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78,\n  0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67,\n  0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x74,\n  0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61,\n  0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,\n  0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x74, 0x61,\n  0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,\n  0x6e, 0x67, 0x3d, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,\n  0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x74, 0x65, 0x78,\n  0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, 0x74,\n  0x65, 0x72, 0x3b, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x76, 0x65,\n  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x62, 0x61, 0x63, 0x6b,\n  0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,\n  0x20, 0x23, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x2f, 0x64, 0x69, 0x76, 0x3e,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64,\n  0x3d, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x23, 0x22, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,\n  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,\n  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x2f,\n  0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x77, 0x77, 0x77, 0x2e, 0x77, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,\n  0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x22, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,\n  0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x63,\n  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x27,\n  0x3c, 0x73, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20,\n  0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x73, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,\n  0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72,\n  0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x2e,\n  0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,\n  0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67,\n  0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20,\n  0x0a, 0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c,\n  0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2f,\n  0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c,\n  0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,\n  0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x65, 0x6e,\n  0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38,\n  0x22, 0x3f, 0x3e, 0x0a, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,\n  0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x3f, 0x61, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,\n  0x77, 0x77, 0x2e, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79,\n  0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,\n  0x64, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,\n  0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x20,\n  0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a,\n  0x74, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,\n  0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,\n  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,\n  0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x68,\n  0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d,\n  0x75, 0x74, 0x66, 0x2d, 0x38, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,\n  0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x74, 0x61,\n  0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30,\n  0x30, 0x25, 0x22, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,\n  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,\n  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,\n  0x73, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x76, 0x65,\n  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72,\n  0x74, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74,\n  0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61,\n  0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x3d, 0x67, 0x62,\n  0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f,\n  0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,\n  0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6d, 0x45,\n  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x20,\n  0x6f, 0x66, 0x20, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x64, 0x69,\n  0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70,\n  0x6c, 0x61, 0x79, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x67, 0x65,\n  0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28,\n  0x69, 0x64, 0x29, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63,\n  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d,\n  0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x29,\n  0x3b, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65,\n  0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a, 0xd0, 0x91, 0xd1, 0x8a, 0xd0,\n  0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8,\n  0x0a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,\n  0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3e, 0x50, 0x72, 0x69, 0x76, 0x61,\n  0x63, 0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e,\n  0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,\n  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,\n  0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,\n  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61,\n  0x72, 0x67, 0x69, 0x6e, 0x3a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x3e, 0x3c,\n  0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x69, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71,\n  0x75, 0x6f, 0x74, 0x3b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72, 0x65, 0x66,\n  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x74,\n  0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x70, 0x75,\n  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57,\n  0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x20, 0x44, 0x2e,\n  0x43, 0x2e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,\n  0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x61, 0x6d, 0x6f, 0x6e, 0x67,\n  0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,\n  0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,\n  0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,\n  0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,\n  0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x66,\n  0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72,\n  0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x20,\n  0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x69,\n  0x73, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,\n  0x67, 0x20, 0x6f, 0x66, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,\n  0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x73, 0x74, 0x79,\n  0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x2f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x20, 0x55,\n  0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x65, 0x78, 0x70, 0x61,\n  0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,\n  0x64, 0x65, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x66,\n  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x64, 0x69, 0x63,\n  0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,\n  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,\n  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,\n  0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,\n  0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62,\n  0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,\n  0x6f, 0x66, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x3e,\n  0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74,\n  0x61, 0x62, 0x6c, 0x65, 0x3e, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,\n  0x20, 0x6f, 0x66, 0x20, 0x49, 0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x0a, 0x3c,\n  0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,\n  0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e,\n  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,\n  0x74, 0x68, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x77,\n  0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,\n  0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,\n  0x68, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x72,\n  0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6d, 0x70, 0x6c, 0x69,\n  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65,\n  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,\n  0x6c, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66,\n  0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,\n  0x73, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,\n  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x4e,\n  0x6f, 0x74, 0x65, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,\n  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20,\n  0x74, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,\n  0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,\n  0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,\n  0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72,\n  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,\n  0x74, 0x68, 0x65, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x65,\n  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65,\n  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,\n  0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x6f,\n  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x79,\n  0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,\n  0x72, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f,\n  0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,\n  0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d,\n  0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x70,\n  0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x6f, 0x66, 0x20, 0x42, 0x72, 0x69, 0x74,\n  0x69, 0x73, 0x68, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x68,\n  0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69,\n  0x63, 0x69, 0x7a, 0x65, 0x64, 0x28, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75,\n  0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,\n  0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,\n  0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x30, 0x22, 0x20,\n  0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22,\n  0x30, 0x22, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20,\n  0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x72, 0x65, 0x64, 0x69,\n  0x72, 0x65, 0x63, 0x74, 0x73, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x20, 0x46,\n  0x6f, 0x72, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,\n  0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x25, 0x33, 0x45, 0x25, 0x33,\n  0x43, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x25, 0x33, 0x45, 0x22, 0x29,\n  0x29, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x3c, 0x6c, 0x69, 0x3e,\n  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,\n  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78,\n  0x74, 0x2d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,\n  0x6e, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69,\n  0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3c, 0x6d,\n  0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69,\n  0x76, 0x3d, 0x22, 0x58, 0x2d, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65,\n  0x28, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78,\n  0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,\n  0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,\n  0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76,\n  0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,\n  0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x72, 0x65,\n  0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76,\n  0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x74, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74,\n  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x68, 0x6f, 0x72, 0x74,\n  0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,\n  0x66, 0x3d, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73, 0x63,\n  0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x3d, 0x2f, 0x61, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20,\n  0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,\n  0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d, 0x43, 0x6f,\n  0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e,\n  0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20,\n  0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x2f, 0x75,\n  0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x73, 0x73, 0x6f, 0x63,\n  0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,\n  0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x2f, 0x61, 0x3e,\n  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,\n  0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x72,\n  0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d,\n  0x65, 0x3d, 0x22, 0x71, 0x22, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77,\n  0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x62,\n  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73,\n  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65,\n  0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,\n  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,\n  0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x36, 0x3e, 0x3c, 0x75, 0x6c,\n  0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,\n  0x22, 0x20, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,\n  0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20,\n  0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,\n  0x22, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,\n  0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x20, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x2f, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,\n  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x68, 0x74, 0x6d,\n  0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74,\n  0x66, 0x2d, 0x38, 0x22, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x74, 0x72, 0x61,\n  0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x74, 0x65, 0x0d, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,\n  0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x3e,\n  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,\n  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c,\n  0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e,\n  0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69,\n  0x6d, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68,\n  0x65, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x63,\n  0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x20, 0x6d,\n  0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,\n  0x6f, 0x6e, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69,\n  0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x21, 0x44, 0x4f,\n  0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x3c, 0x68,\n  0x74, 0x6d, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,\n  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61,\n  0x6d, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,\n  0x74, 0x3a, 0x76, 0x6f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x22, 0x65, 0x66,\n  0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f,\n  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d,\n  0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x67,\n  0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73,\n  0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,\n  0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,\n  0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a,\n  0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,\n  0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c,\n  0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x6f,\n  0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63,\n  0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,\n  0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x64, 0x75, 0x72, 0x69,\n  0x6e, 0x67, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,\n  0x6d, 0x65, 0x2c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,\n  0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63,\n  0x6f, 0x6e, 0x22, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,\n  0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x69,\n  0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x65,\n  0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x6d,\n  0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,\n  0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,\n  0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,\n  0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c,\n  0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,\n  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65,\n  0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x20,\n  0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69,\n  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x26, 0x61, 0x6d, 0x70,\n  0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x62,\n  0x73, 0x70, 0x3b, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,\n  0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x71, 0x75, 0x69,\n  0x74, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20,\n  0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x69,\n  0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,\n  0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,\n  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x63,\n  0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,\n  0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20,\n  0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,\n  0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,\n  0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x20, 0x76,\n  0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,\n  0x73, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,\n  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x28, 0x64, 0x6f, 0x63, 0x75,\n  0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,\n  0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x67,\n  0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,\n  0x70, 0x65, 0x64, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,\n  0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x20, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,\n  0x20, 0x2f, 0x3e, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,\n  0x67, 0x65, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6d, 0x6f,\n  0x72, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,\n  0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x61,\n  0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74,\n  0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x74, 0x68,\n  0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x70, 0x65, 0x72, 0x70, 0x65, 0x6e, 0x64,\n  0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,\n  0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,\n  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,\n  0x22, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73,\n  0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c,\n  0x6f, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,\n  0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x70, 0x72,\n  0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e,\n  0x6f, 0x6d, 0x69, 0x63, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,\n  0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72,\n  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,\n  0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61,\n  0x6c, 0x20, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f,\n  0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0x20, 0x28, 0x45, 0x75, 0x72,\n  0x6f, 0x70, 0x65, 0x75, 0x29, 0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0,\n  0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,\n  0x83, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81,\n  0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,\n  0x81, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9,\n  0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,\n  0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84,\n  0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,\n  0xb8, 0xd1, 0x83, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb,\n  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,\n  0xbe, 0xd0, 0xb1, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbc,\n  0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,\n  0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0, 0xbd,\n  0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,\n  0xb8, 0xd1, 0x8f, 0xd0, 0xa0, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x83,\n  0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,\n  0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,\n  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1,\n  0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0xd1, 0x82,\n  0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,\n  0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82,\n  0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd8,\n  0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xac,\n  0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,\n  0xb4, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,\n  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,\n  0xa7, 0xd8, 0xad, 0xd8, 0xa7, 0xd8, 0xaa, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20,\n  0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, 0x38,\n  0x22, 0x20, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28,\n  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x64, 0x69, 0x73,\n  0x70, 0x6c, 0x61, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,\n  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,\n  0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f,\n  0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x3c, 0x69, 0x6d, 0x67, 0x20,\n  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,\n  0x77, 0x77, 0x2e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x68,\n  0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63,\n  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22,\n  0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,\n  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x3c, 0x2f, 0x61, 0x3e,\n  0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61,\n  0x73, 0x73, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,\n  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c,\n  0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22,\n  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,\n  0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,\n  0x2f, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61,\n  0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0d, 0x0a, 0x3c,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x74, 0x65, 0x78, 0x74, 0x2f, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b,\n  0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a,\n  0x28, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65,\n  0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x7d, 0x68, 0x65, 0x69, 0x67, 0x68,\n  0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,\n  0x31, 0x22, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x52,\n  0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x3c,\n  0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,\n  0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65,\n  0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x6e, 0x64, 0x65,\n  0x72, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e,\n  0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64,\n  0x69, 0x76, 0x3e, 0x0a, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,\n  0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c,\n  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,\n  0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x23, 0x76, 0x69, 0x65, 0x77, 0x70,\n  0x6f, 0x72, 0x74, 0x7b, 0x6d, 0x69, 0x6e, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68,\n  0x74, 0x3a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72,\n  0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,\n  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x72, 0x65,\n  0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20,\n  0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74,\n  0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x3c, 0x21, 0x44, 0x4f, 0x43,\n  0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x21,\n  0x2d, 0x2d, 0x5b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,\n  0x6e, 0x61, 0x6c, 0x20, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3e, 0x0a,\n  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,\n  0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x77, 0xe0, 0xb8, 0xa0, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xb2,\n  0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xa2, 0xe1, 0x83, 0xa5, 0xe1,\n  0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0xa3, 0xe1, 0x83,\n  0x9a, 0xe1, 0x83, 0x98, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad,\n  0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94, 0x29, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0,\n  0xa4, 0xa1, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5,\n  0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c,\n  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,\n  0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4,\n  0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,\n  0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4,\n  0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0,\n  0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,\n  0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0,\n  0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,\n  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0,\n  0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xa8,\n  0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,\n  0xa4, 0xaa, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,\n  0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xad, 0xe0, 0xa4,\n  0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,\n  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,\n  0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8d,\n  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0,\n  0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,\n  0xbe, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa1, 0x64,\n  0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x63,\n  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d,\n  0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n  0x70, 0x72, 0x6f, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,\n  0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d,\n  0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x3c, 0x6d, 0x65, 0x74,\n  0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74,\n  0x66, 0x2d, 0x38, 0x22, 0x3e, 0x3a, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x63, 0x6f,\n  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,\n  0x2f, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,\n  0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x73, 0x74, 0x79,\n  0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,\n  0x2f, 0x63, 0x73, 0x73, 0x22, 0x3e, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,\n  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,\n  0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39,\n  0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x74, 0x79,\n  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,\n  0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,\n  0x6e, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,\n  0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x20,\n  0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65,\n  0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e,\n  0x22, 0x20, 0x2f, 0x3e, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,\n  0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,\n  0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,\n  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c, 0x2f, 0x61, 0x3e,\n  0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d,\n  0x22, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,\n  0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,\n  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x79,\n  0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e,\n  0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,\n  0x74, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70,\n  0x6c, 0x69, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44,\n  0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x65, 0x6c,\n  0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20,\n  0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75,\n  0x65, 0x3d, 0x22, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,\n  0x73, 0x70, 0x61, 0x6e, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x73, 0x0a,\n  0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,\n  0x61, 0x67, 0x65, 0x3d, 0x22, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69,\n  0x70, 0x74, 0x22, 0x20, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,\n  0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,\n  0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,\n  0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d, 0x65,\n  0x64, 0x69, 0x61, 0x3d, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,\n  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x27, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63,\n  0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x70, 0x65,\n  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72,\n  0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,\n  0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31,\n  0x22, 0x20, 0x3d, 0x27, 0x2b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,\n  0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x3c, 0x6c,\n  0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61, 0x6c, 0x74, 0x65,\n  0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x2c,\n  0x20, 0x74, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2c, 0x20, 0x74,\n  0x65, 0x78, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,\n  0x22, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x6d,\n  0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20,\n  0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x0a, 0x3c, 0x61, 0x20,\n  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,\n  0x77, 0x77, 0x77, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,\n  0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,\n  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,\n  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x6e, 0x67,\n  0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64,\n  0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3e, 0xc2, 0xb7,\n  0x3c, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x6c, 0x3d, 0x30,\n  0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74,\n  0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,\n  0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x75, 0x72,\n  0x6c, 0x28, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69,\n  0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x09, 0x09,\n  0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,\n  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20,\n  0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22,\n  0x74, 0x72, 0x75, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,\n  0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c,\n  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x74, 0x69,\n  0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,\n  0x61, 0x6c, 0x75, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69,\n  0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,\n  0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68,\n  0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x65, 0x3d, 0x28, 0x6e,\n  0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54,\n  0x69, 0x6d, 0x65, 0x28, 0x29, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3,\n  0xaa, 0x73, 0x20, 0x28, 0x64, 0x6f, 0x20, 0x42, 0x72, 0x61, 0x73, 0x69, 0x6c,\n  0x29, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,\n  0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0,\n  0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,\n  0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,\n  0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,\n  0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2,\n  0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0,\n  0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f,\n  0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,\n  0xbd, 0xd0, 0xb0, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20,\n  0x68, 0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x22,\n  0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x3c, 0x6d, 0x65,\n  0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,\n  0x3d, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,\n  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68,\n  0x74, 0x74, 0x70, 0x3a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c,\n  0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,\n  0x77, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20,\n  0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x54, 0x44, 0x54,\n  0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x6e,\n  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x77, 0x77, 0x77,\n  0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68,\n  0x74, 0x6d, 0x6c, 0x31, 0x2f, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65,\n  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x27, 0x3b, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,\n  0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70,\n  0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x73,\n  0x65, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3c, 0x69, 0x6e, 0x70,\n  0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64,\n  0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6a, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70,\n  0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,\n  0x63, 0x72, 0x69, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x29,\n  0x2e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,\n  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x69, 0x6d, 0x61,\n  0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,\n  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x55, 0x41, 0x2d, 0x43, 0x6f, 0x6d,\n  0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,\n  0x65, 0x6e, 0x74, 0x3d, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72,\n  0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,\n  0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68,\n  0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x3c, 0x6c,\n  0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c,\n  0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,\n  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x3d, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,\n  0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d,\n  0x65, 0x6e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22,\n  0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,\n  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74,\n  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x70, 0x75,\n  0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,\n  0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x20,\n  0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,\n  0x63, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,\n  0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,\n  0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,\n  0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x64, 0x74, 0x64,\n  0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e,\n  0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43,\n  0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e,\n  0x30, 0x31, 0x20, 0x54, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,\n  0x4e, 0x61, 0x6d, 0x65, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,\n  0x29, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x3c, 0x73,\n  0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,\n  0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x22, 0x20, 0x73, 0x74,\n  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,\n  0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,\n  0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,\n  0x42, 0x79, 0x49, 0x64, 0x28, 0x3d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,\n  0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,\n  0x6e, 0x74, 0x28, 0x27, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,\n  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n  0x27, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,\n  0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64,\n  0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,\n  0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x73, 0x6e, 0x69, 0x63,\n  0x61, 0x6c, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,\n  0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x43, 0x2f, 0x2f, 0x44, 0x54,\n  0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e, 0x30, 0x31, 0x20, 0x54,\n  0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20,\n  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73,\n  0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74,\n  0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,\n  0x22, 0x3e, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e,\n  0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d,\n  0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43,\n  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x64, 0x69,\n  0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,\n  0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x68, 0x74, 0x6d, 0x6c,\n  0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66,\n  0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,\n  0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e,\n  0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,\n  0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,\n  0x77, 0x77, 0x2e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,\n  0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,\n  0x3e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,\n  0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,\n  0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf, 0xd1,\n  0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0,\n  0xb7, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe,\n  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82,\n  0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,\n  0xa4, 0xb8, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87,\n  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0,\n  0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,\n  0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89,\n  0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0,\n  0xa4, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,\n  0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,\n  0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,\n  0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,\n  0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,\n  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,\n]);\n\n// Used by the browser version\nexports.init = function() {\n  return exports.dictionary;\n};\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Lookup table to map the previous two bytes to a context id.\n\n   There are four different context modeling modes defined here:\n     CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,\n     CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,\n     CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,\n     CONTEXT_SIGNED: second-order context model tuned for signed integers.\n\n   The context id for the UTF8 context model is calculated as follows. If p1\n   and p2 are the previous two bytes, we calcualte the context as\n\n     context = kContextLookup[p1] | kContextLookup[p2 + 256].\n\n   If the previous two bytes are ASCII characters (i.e. < 128), this will be\n   equivalent to\n\n     context = 4 * context1(p1) + context2(p2),\n\n   where context1 is based on the previous byte in the following way:\n\n     0  : non-ASCII control\n     1  : \\t, \\n, \\r\n     2  : space\n     3  : other punctuation\n     4  : \" '\n     5  : %\n     6  : ( < [ {\n     7  : ) > ] }\n     8  : , ; :\n     9  : .\n     10 : =\n     11 : number\n     12 : upper-case vowel\n     13 : upper-case consonant\n     14 : lower-case vowel\n     15 : lower-case consonant\n\n   and context2 is based on the second last byte:\n\n     0 : control, space\n     1 : punctuation\n     2 : upper-case letter, number\n     3 : lower-case letter\n\n   If the last byte is ASCII, and the second last byte is not (in a valid UTF8\n   stream it will be a continuation byte, value between 128 and 191), the\n   context is the same as if the second last byte was an ASCII control or space.\n\n   If the last byte is a UTF8 lead byte (value >= 192), then the next byte will\n   be a continuation byte and the context id is 2 or 3 depending on the LSB of\n   the last byte and to a lesser extent on the second last byte if it is ASCII.\n\n   If the last byte is a UTF8 continuation byte, the second last byte can be:\n     - continuation byte: the next byte is probably ASCII or lead byte (assuming\n       4-byte UTF8 characters are rare) and the context id is 0 or 1.\n     - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1\n     - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3\n\n   The possible value combinations of the previous two bytes, the range of\n   context ids and the type of the next byte is summarized in the table below:\n\n   |--------\\-----------------------------------------------------------------|\n   |         \\                         Last byte                              |\n   | Second   \\---------------------------------------------------------------|\n   | last byte \\    ASCII            |   cont. byte        |   lead byte      |\n   |            \\   (0-127)          |   (128-191)         |   (192-)         |\n   |=============|===================|=====================|==================|\n   |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |\n   |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |\n   |-------------|-------------------|---------------------|------------------|\n   |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |\n   |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |\n   |-------------|-------------------|---------------------|------------------|\n   |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |\n   |  (192-207)  |                   |  context: 0 - 1     |                  |\n   |-------------|-------------------|---------------------|------------------|\n   |  lead byte  | not valid         |  next: cont.        |  not valid       |\n   |  (208-)     |                   |  context: 2 - 3     |                  |\n   |-------------|-------------------|---------------------|------------------|\n\n   The context id for the signed context mode is calculated as:\n\n     context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].\n\n   For any context modeling modes, the context ids can be calculated by |-ing\n   together two lookups from one table using context model dependent offsets:\n\n     context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].\n\n   where offset1 and offset2 are dependent on the context mode.\n*/\n\nvar CONTEXT_LSB6         = 0;\nvar CONTEXT_MSB6         = 1;\nvar CONTEXT_UTF8         = 2;\nvar CONTEXT_SIGNED       = 3;\n\n/* Common context lookup table for all context modes. */\nexports.lookup = new Uint8Array([\n  /* CONTEXT_UTF8, last byte. */\n  /* ASCII range. */\n   0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  4,  0,  0,\n   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,\n  44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,\n  12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,\n  52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,\n  12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,\n  60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12,  0,\n  /* UTF8 continuation byte range. */\n  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n  /* UTF8 lead byte range. */\n  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n  /* CONTEXT_UTF8 second last byte. */\n  /* ASCII range. */\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,\n  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,\n  1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,\n  /* UTF8 continuation byte range. */\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  /* UTF8 lead byte range. */\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  /* CONTEXT_SIGNED, second last byte. */\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,\n  /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */\n   0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n  48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,\n  /* CONTEXT_LSB6, last byte. */\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n  /* CONTEXT_MSB6, last byte. */\n   0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,\n   4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,\n   8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,\n  12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,\n  16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,\n  20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,\n  24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,\n  28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31,\n  32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35,\n  36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,\n  40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43,\n  44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,\n  48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51,\n  52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55,\n  56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59,\n  60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,\n  /* CONTEXT_{M,L}SB6, second last byte, */\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n]);\n\nexports.lookupOffsets = new Uint16Array([\n  /* CONTEXT_LSB6 */\n  1024, 1536,\n  /* CONTEXT_MSB6 */\n  1280, 1536,\n  /* CONTEXT_UTF8 */\n  0, 256,\n  /* CONTEXT_SIGNED */\n  768, 512,\n]);\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Lookup tables to map prefix codes to value ranges. This is used during\n   decoding of the block lengths, literal insertion lengths and copy lengths.\n*/\n\n/* Represents the range of values belonging to a prefix code: */\n/* [offset, offset + 2^nbits) */\nfunction PrefixCodeRange(offset, nbits) {\n  this.offset = offset;\n  this.nbits = nbits;\n}\n\nexports.kBlockLengthPrefixCode = [\n  new PrefixCodeRange(1, 2), new PrefixCodeRange(5, 2), new PrefixCodeRange(9, 2), new PrefixCodeRange(13, 2),\n  new PrefixCodeRange(17, 3), new PrefixCodeRange(25, 3), new PrefixCodeRange(33, 3), new PrefixCodeRange(41, 3),\n  new PrefixCodeRange(49, 4), new PrefixCodeRange(65, 4), new PrefixCodeRange(81, 4), new PrefixCodeRange(97, 4),\n  new PrefixCodeRange(113, 5), new PrefixCodeRange(145, 5), new PrefixCodeRange(177, 5), new PrefixCodeRange(209, 5),\n  new PrefixCodeRange(241, 6), new PrefixCodeRange(305, 6), new PrefixCodeRange(369, 7), new PrefixCodeRange(497, 8),\n  new PrefixCodeRange(753, 9), new PrefixCodeRange(1265, 10), new PrefixCodeRange(2289, 11), new PrefixCodeRange(4337, 12),\n  new PrefixCodeRange(8433, 13), new PrefixCodeRange(16625, 24)\n];\n\nexports.kInsertLengthPrefixCode = [\n  new PrefixCodeRange(0, 0), new PrefixCodeRange(1, 0), new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0),\n  new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 1), new PrefixCodeRange(8, 1),\n  new PrefixCodeRange(10, 2), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 3), new PrefixCodeRange(26, 3),\n  new PrefixCodeRange(34, 4), new PrefixCodeRange(50, 4), new PrefixCodeRange(66, 5), new PrefixCodeRange(98, 5),\n  new PrefixCodeRange(130, 6), new PrefixCodeRange(194, 7), new PrefixCodeRange(322, 8), new PrefixCodeRange(578, 9),\n  new PrefixCodeRange(1090, 10), new PrefixCodeRange(2114, 12), new PrefixCodeRange(6210, 14), new PrefixCodeRange(22594, 24),\n];\n\nexports.kCopyLengthPrefixCode = [\n  new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0),\n  new PrefixCodeRange(6, 0), new PrefixCodeRange(7, 0), new PrefixCodeRange(8, 0), new PrefixCodeRange(9, 0),\n  new PrefixCodeRange(10, 1), new PrefixCodeRange(12, 1), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 2),\n  new PrefixCodeRange(22, 3), new PrefixCodeRange(30, 3), new PrefixCodeRange(38, 4), new PrefixCodeRange(54, 4),\n  new PrefixCodeRange(70, 5), new PrefixCodeRange(102, 5), new PrefixCodeRange(134, 6), new PrefixCodeRange(198, 7),\n  new PrefixCodeRange(326, 8), new PrefixCodeRange(582, 9), new PrefixCodeRange(1094, 10), new PrefixCodeRange(2118, 24),\n];\n\nexports.kInsertRangeLut = [\n  0, 0, 8, 8, 0, 16, 8, 16, 16,\n];\n\nexports.kCopyRangeLut = [\n  0, 8, 0, 8, 16, 0, 16, 8, 16,\n];\n","/* Copyright 2013 Google Inc. All Rights Reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Transformations on dictionary words.\n*/\n\nvar BrotliDictionary = require('./dictionary');\n\nvar kIdentity       = 0;\nvar kOmitLast1      = 1;\nvar kOmitLast2      = 2;\nvar kOmitLast3      = 3;\nvar kOmitLast4      = 4;\nvar kOmitLast5      = 5;\nvar kOmitLast6      = 6;\nvar kOmitLast7      = 7;\nvar kOmitLast8      = 8;\nvar kOmitLast9      = 9;\nvar kUppercaseFirst = 10;\nvar kUppercaseAll   = 11;\nvar kOmitFirst1     = 12;\nvar kOmitFirst2     = 13;\nvar kOmitFirst3     = 14;\nvar kOmitFirst4     = 15;\nvar kOmitFirst5     = 16;\nvar kOmitFirst6     = 17;\nvar kOmitFirst7     = 18;\nvar kOmitFirst8     = 19;\nvar kOmitFirst9     = 20;\n\nfunction Transform(prefix, transform, suffix) {\n  this.prefix = new Uint8Array(prefix.length);\n  this.transform = transform;\n  this.suffix = new Uint8Array(suffix.length);\n  \n  for (var i = 0; i < prefix.length; i++)\n    this.prefix[i] = prefix.charCodeAt(i);\n  \n  for (var i = 0; i < suffix.length; i++)\n    this.suffix[i] = suffix.charCodeAt(i);\n}\n\nvar kTransforms = [\n     new Transform(         \"\", kIdentity,       \"\"           ),\n     new Transform(         \"\", kIdentity,       \" \"          ),\n     new Transform(        \" \", kIdentity,       \" \"          ),\n     new Transform(         \"\", kOmitFirst1,     \"\"           ),\n     new Transform(         \"\", kUppercaseFirst, \" \"          ),\n     new Transform(         \"\", kIdentity,       \" the \"      ),\n     new Transform(        \" \", kIdentity,       \"\"           ),\n     new Transform(       \"s \", kIdentity,       \" \"          ),\n     new Transform(         \"\", kIdentity,       \" of \"       ),\n     new Transform(         \"\", kUppercaseFirst, \"\"           ),\n     new Transform(         \"\", kIdentity,       \" and \"      ),\n     new Transform(         \"\", kOmitFirst2,     \"\"           ),\n     new Transform(         \"\", kOmitLast1,      \"\"           ),\n     new Transform(       \", \", kIdentity,       \" \"          ),\n     new Transform(         \"\", kIdentity,       \", \"         ),\n     new Transform(        \" \", kUppercaseFirst, \" \"          ),\n     new Transform(         \"\", kIdentity,       \" in \"       ),\n     new Transform(         \"\", kIdentity,       \" to \"       ),\n     new Transform(       \"e \", kIdentity,       \" \"          ),\n     new Transform(         \"\", kIdentity,       \"\\\"\"         ),\n     new Transform(         \"\", kIdentity,       \".\"          ),\n     new Transform(         \"\", kIdentity,       \"\\\">\"        ),\n     new Transform(         \"\", kIdentity,       \"\\n\"         ),\n     new Transform(         \"\", kOmitLast3,      \"\"           ),\n     new Transform(         \"\", kIdentity,       \"]\"          ),\n     new Transform(         \"\", kIdentity,       \" for \"      ),\n     new Transform(         \"\", kOmitFirst3,     \"\"           ),\n     new Transform(         \"\", kOmitLast2,      \"\"           ),\n     new Transform(         \"\", kIdentity,       \" a \"        ),\n     new Transform(         \"\", kIdentity,       \" that \"     ),\n     new Transform(        \" \", kUppercaseFirst, \"\"           ),\n     new Transform(         \"\", kIdentity,       \". \"         ),\n     new Transform(        \".\", kIdentity,       \"\"           ),\n     new Transform(        \" \", kIdentity,       \", \"         ),\n     new Transform(         \"\", kOmitFirst4,     \"\"           ),\n     new Transform(         \"\", kIdentity,       \" with \"     ),\n     new Transform(         \"\", kIdentity,       \"'\"          ),\n     new Transform(         \"\", kIdentity,       \" from \"     ),\n     new Transform(         \"\", kIdentity,       \" by \"       ),\n     new Transform(         \"\", kOmitFirst5,     \"\"           ),\n     new Transform(         \"\", kOmitFirst6,     \"\"           ),\n     new Transform(    \" the \", kIdentity,       \"\"           ),\n     new Transform(         \"\", kOmitLast4,      \"\"           ),\n     new Transform(         \"\", kIdentity,       \". The \"     ),\n     new Transform(         \"\", kUppercaseAll,   \"\"           ),\n     new Transform(         \"\", kIdentity,       \" on \"       ),\n     new Transform(         \"\", kIdentity,       \" as \"       ),\n     new Transform(         \"\", kIdentity,       \" is \"       ),\n     new Transform(         \"\", kOmitLast7,      \"\"           ),\n     new Transform(         \"\", kOmitLast1,      \"ing \"       ),\n     new Transform(         \"\", kIdentity,       \"\\n\\t\"       ),\n     new Transform(         \"\", kIdentity,       \":\"          ),\n     new Transform(        \" \", kIdentity,       \". \"         ),\n     new Transform(         \"\", kIdentity,       \"ed \"        ),\n     new Transform(         \"\", kOmitFirst9,     \"\"           ),\n     new Transform(         \"\", kOmitFirst7,     \"\"           ),\n     new Transform(         \"\", kOmitLast6,      \"\"           ),\n     new Transform(         \"\", kIdentity,       \"(\"          ),\n     new Transform(         \"\", kUppercaseFirst, \", \"         ),\n     new Transform(         \"\", kOmitLast8,      \"\"           ),\n     new Transform(         \"\", kIdentity,       \" at \"       ),\n     new Transform(         \"\", kIdentity,       \"ly \"        ),\n     new Transform(    \" the \", kIdentity,       \" of \"       ),\n     new Transform(         \"\", kOmitLast5,      \"\"           ),\n     new Transform(         \"\", kOmitLast9,      \"\"           ),\n     new Transform(        \" \", kUppercaseFirst, \", \"         ),\n     new Transform(         \"\", kUppercaseFirst, \"\\\"\"         ),\n     new Transform(        \".\", kIdentity,       \"(\"          ),\n     new Transform(         \"\", kUppercaseAll,   \" \"          ),\n     new Transform(         \"\", kUppercaseFirst, \"\\\">\"        ),\n     new Transform(         \"\", kIdentity,       \"=\\\"\"        ),\n     new Transform(        \" \", kIdentity,       \".\"          ),\n     new Transform(    \".com/\", kIdentity,       \"\"           ),\n     new Transform(    \" the \", kIdentity,       \" of the \"   ),\n     new Transform(         \"\", kUppercaseFirst, \"'\"          ),\n     new Transform(         \"\", kIdentity,       \". This \"    ),\n     new Transform(         \"\", kIdentity,       \",\"          ),\n     new Transform(        \".\", kIdentity,       \" \"          ),\n     new Transform(         \"\", kUppercaseFirst, \"(\"          ),\n     new Transform(         \"\", kUppercaseFirst, \".\"          ),\n     new Transform(         \"\", kIdentity,       \" not \"      ),\n     new Transform(        \" \", kIdentity,       \"=\\\"\"        ),\n     new Transform(         \"\", kIdentity,       \"er \"        ),\n     new Transform(        \" \", kUppercaseAll,   \" \"          ),\n     new Transform(         \"\", kIdentity,       \"al \"        ),\n     new Transform(        \" \", kUppercaseAll,   \"\"           ),\n     new Transform(         \"\", kIdentity,       \"='\"         ),\n     new Transform(         \"\", kUppercaseAll,   \"\\\"\"         ),\n     new Transform(         \"\", kUppercaseFirst, \". \"         ),\n     new Transform(        \" \", kIdentity,       \"(\"          ),\n     new Transform(         \"\", kIdentity,       \"ful \"       ),\n     new Transform(        \" \", kUppercaseFirst, \". \"         ),\n     new Transform(         \"\", kIdentity,       \"ive \"       ),\n     new Transform(         \"\", kIdentity,       \"less \"      ),\n     new Transform(         \"\", kUppercaseAll,   \"'\"          ),\n     new Transform(         \"\", kIdentity,       \"est \"       ),\n     new Transform(        \" \", kUppercaseFirst, \".\"          ),\n     new Transform(         \"\", kUppercaseAll,   \"\\\">\"        ),\n     new Transform(        \" \", kIdentity,       \"='\"         ),\n     new Transform(         \"\", kUppercaseFirst, \",\"          ),\n     new Transform(         \"\", kIdentity,       \"ize \"       ),\n     new Transform(         \"\", kUppercaseAll,   \".\"          ),\n     new Transform( \"\\xc2\\xa0\", kIdentity,       \"\"           ),\n     new Transform(        \" \", kIdentity,       \",\"          ),\n     new Transform(         \"\", kUppercaseFirst, \"=\\\"\"        ),\n     new Transform(         \"\", kUppercaseAll,   \"=\\\"\"        ),\n     new Transform(         \"\", kIdentity,       \"ous \"       ),\n     new Transform(         \"\", kUppercaseAll,   \", \"         ),\n     new Transform(         \"\", kUppercaseFirst, \"='\"         ),\n     new Transform(        \" \", kUppercaseFirst, \",\"          ),\n     new Transform(        \" \", kUppercaseAll,   \"=\\\"\"        ),\n     new Transform(        \" \", kUppercaseAll,   \", \"         ),\n     new Transform(         \"\", kUppercaseAll,   \",\"          ),\n     new Transform(         \"\", kUppercaseAll,   \"(\"          ),\n     new Transform(         \"\", kUppercaseAll,   \". \"         ),\n     new Transform(        \" \", kUppercaseAll,   \".\"          ),\n     new Transform(         \"\", kUppercaseAll,   \"='\"         ),\n     new Transform(        \" \", kUppercaseAll,   \". \"         ),\n     new Transform(        \" \", kUppercaseFirst, \"=\\\"\"        ),\n     new Transform(        \" \", kUppercaseAll,   \"='\"         ),\n     new Transform(        \" \", kUppercaseFirst, \"='\"         )\n];\n\nexports.kTransforms = kTransforms;\nexports.kNumTransforms = kTransforms.length;\n\nfunction ToUpperCase(p, i) {\n  if (p[i] < 0xc0) {\n    if (p[i] >= 97 && p[i] <= 122) {\n      p[i] ^= 32;\n    }\n    return 1;\n  }\n  \n  /* An overly simplified uppercasing model for utf-8. */\n  if (p[i] < 0xe0) {\n    p[i + 1] ^= 32;\n    return 2;\n  }\n  \n  /* An arbitrary transform for three byte characters. */\n  p[i + 2] ^= 5;\n  return 3;\n}\n\nexports.transformDictionaryWord = function(dst, idx, word, len, transform) {\n  var prefix = kTransforms[transform].prefix;\n  var suffix = kTransforms[transform].suffix;\n  var t = kTransforms[transform].transform;\n  var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);\n  var i = 0;\n  var start_idx = idx;\n  var uppercase;\n  \n  if (skip > len) {\n    skip = len;\n  }\n  \n  var prefix_pos = 0;\n  while (prefix_pos < prefix.length) {\n    dst[idx++] = prefix[prefix_pos++];\n  }\n  \n  word += skip;\n  len -= skip;\n  \n  if (t <= kOmitLast9) {\n    len -= t;\n  }\n  \n  for (i = 0; i < len; i++) {\n    dst[idx++] = BrotliDictionary.dictionary[word + i];\n  }\n  \n  uppercase = idx - len;\n  \n  if (t === kUppercaseFirst) {\n    ToUpperCase(dst, uppercase);\n  } else if (t === kUppercaseAll) {\n    while (len > 0) {\n      var step = ToUpperCase(dst, uppercase);\n      uppercase += step;\n      len -= step;\n    }\n  }\n  \n  var suffix_pos = 0;\n  while (suffix_pos < suffix.length) {\n    dst[idx++] = suffix[suffix_pos++];\n  }\n  \n  return idx - start_idx;\n}\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var AI, AL, B2, BA, BB, BK, CB, CJ, CL, CM, CP, CR, EX, GL, H2, H3, HL, HY, ID, IN, IS, JL, JT, JV, LF, NL, NS, NU, OP, PO, PR, QU, RI, SA, SG, SP, SY, WJ, XX, ZW;\n\n  exports.OP = OP = 0;\n\n  exports.CL = CL = 1;\n\n  exports.CP = CP = 2;\n\n  exports.QU = QU = 3;\n\n  exports.GL = GL = 4;\n\n  exports.NS = NS = 5;\n\n  exports.EX = EX = 6;\n\n  exports.SY = SY = 7;\n\n  exports.IS = IS = 8;\n\n  exports.PR = PR = 9;\n\n  exports.PO = PO = 10;\n\n  exports.NU = NU = 11;\n\n  exports.AL = AL = 12;\n\n  exports.HL = HL = 13;\n\n  exports.ID = ID = 14;\n\n  exports.IN = IN = 15;\n\n  exports.HY = HY = 16;\n\n  exports.BA = BA = 17;\n\n  exports.BB = BB = 18;\n\n  exports.B2 = B2 = 19;\n\n  exports.ZW = ZW = 20;\n\n  exports.CM = CM = 21;\n\n  exports.WJ = WJ = 22;\n\n  exports.H2 = H2 = 23;\n\n  exports.H3 = H3 = 24;\n\n  exports.JL = JL = 25;\n\n  exports.JV = JV = 26;\n\n  exports.JT = JT = 27;\n\n  exports.RI = RI = 28;\n\n  exports.AI = AI = 29;\n\n  exports.BK = BK = 30;\n\n  exports.CB = CB = 31;\n\n  exports.CJ = CJ = 32;\n\n  exports.CR = CR = 33;\n\n  exports.LF = LF = 34;\n\n  exports.NL = NL = 35;\n\n  exports.SA = SA = 36;\n\n  exports.SG = SG = 37;\n\n  exports.SP = SP = 38;\n\n  exports.XX = XX = 39;\n\n}).call(this);\n","// Generated by CoffeeScript 1.7.1\n(function() {\n  var CI_BRK, CP_BRK, DI_BRK, IN_BRK, PR_BRK;\n\n  exports.DI_BRK = DI_BRK = 0;\n\n  exports.IN_BRK = IN_BRK = 1;\n\n  exports.CI_BRK = CI_BRK = 2;\n\n  exports.CP_BRK = CP_BRK = 3;\n\n  exports.PR_BRK = PR_BRK = 4;\n\n  exports.pairTable = [[PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, CP_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, DI_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, PR_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK], [IN_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, IN_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, DI_BRK], [DI_BRK, PR_BRK, PR_BRK, IN_BRK, IN_BRK, IN_BRK, PR_BRK, PR_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK, IN_BRK, DI_BRK, DI_BRK, PR_BRK, CI_BRK, PR_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, DI_BRK, IN_BRK]];\n\n}).call(this);\n","import stream from 'stream';\nimport fs from 'fs';\nimport zlib from 'zlib';\nimport CryptoJS from 'crypto-js';\nimport fontkit from 'fontkit';\nimport { EventEmitter } from 'events';\nimport LineBreaker from 'linebreak';\nimport PNG from 'png-js';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\n/*\r\nPDFAbstractReference - abstract class for PDF reference\r\n*/\nvar PDFAbstractReference =\n/*#__PURE__*/\nfunction () {\n  function PDFAbstractReference() {\n    _classCallCheck(this, PDFAbstractReference);\n  }\n\n  _createClass(PDFAbstractReference, [{\n    key: \"toString\",\n    value: function toString() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }]);\n\n  return PDFAbstractReference;\n}();\n\nvar PDFNameTree =\n/*#__PURE__*/\nfunction () {\n  function PDFNameTree() {\n    _classCallCheck(this, PDFNameTree);\n\n    this._items = {};\n  }\n\n  _createClass(PDFNameTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      return this._items[key] = val;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this._items[key];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Needs to be sorted by key\n      var sortedKeys = Object.keys(this._items).sort(function (a, b) {\n        return a.localeCompare(b);\n      });\n      var out = ['<<'];\n\n      if (sortedKeys.length > 1) {\n        var first = sortedKeys[0],\n            last = sortedKeys[sortedKeys.length - 1];\n        out.push(\"  /Limits \".concat(PDFObject.convert([new String(first), new String(last)])));\n      }\n\n      out.push('  /Names [');\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          out.push(\"    \".concat(PDFObject.convert(new String(key)), \" \").concat(PDFObject.convert(this._items[key])));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      out.push(']');\n      out.push('>>');\n      return out.join('\\n');\n    }\n  }]);\n\n  return PDFNameTree;\n}();\n\nvar pad = function pad(str, length) {\n  return (Array(length + 1).join('0') + str).slice(-length);\n};\n\nvar escapableRe = /[\\n\\r\\t\\b\\f\\(\\)\\\\]/g;\nvar escapable = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\\\': '\\\\\\\\',\n  '(': '\\\\(',\n  ')': '\\\\)'\n}; // Convert little endian UTF-16 to big endian\n\nvar swapBytes = function swapBytes(buff) {\n  var l = buff.length;\n\n  if (l & 0x01) {\n    throw new Error('Buffer length must be even');\n  } else {\n    for (var i = 0, end = l - 1; i < end; i += 2) {\n      var a = buff[i];\n      buff[i] = buff[i + 1];\n      buff[i + 1] = a;\n    }\n  }\n\n  return buff;\n};\n\nvar PDFObject =\n/*#__PURE__*/\nfunction () {\n  function PDFObject() {\n    _classCallCheck(this, PDFObject);\n  }\n\n  _createClass(PDFObject, null, [{\n    key: \"convert\",\n    value: function convert(object) {\n      var encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // String literals are converted to the PDF name type\n      if (typeof object === 'string') {\n        return \"/\".concat(object); // String objects are converted to PDF strings (UTF-16)\n      } else if (object instanceof String) {\n        var string = object; // Detect if this is a unicode string\n\n        var isUnicode = false;\n\n        for (var i = 0, end = string.length; i < end; i++) {\n          if (string.charCodeAt(i) > 0x7f) {\n            isUnicode = true;\n            break;\n          }\n        } // If so, encode it as big endian UTF-16\n\n\n        var stringBuffer;\n\n        if (isUnicode) {\n          stringBuffer = swapBytes(Buffer.from(\"\\uFEFF\".concat(string), 'utf16le'));\n        } else {\n          stringBuffer = Buffer.from(string.valueOf(), 'ascii');\n        } // Encrypt the string when necessary\n\n\n        if (encryptFn) {\n          string = encryptFn(stringBuffer).toString('binary');\n        } else {\n          string = stringBuffer.toString('binary');\n        } // Escape characters as required by the spec\n\n\n        string = string.replace(escapableRe, function (c) {\n          return escapable[c];\n        });\n        return \"(\".concat(string, \")\"); // Buffers are converted to PDF hex strings\n      } else if (Buffer.isBuffer(object)) {\n        return \"<\".concat(object.toString('hex'), \">\");\n      } else if (object instanceof PDFAbstractReference || object instanceof PDFNameTree) {\n        return object.toString();\n      } else if (object instanceof Date) {\n        var _string = \"D:\".concat(pad(object.getUTCFullYear(), 4)) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z'; // Encrypt the string when necessary\n\n\n        if (encryptFn) {\n          _string = encryptFn(new Buffer(_string, 'ascii')).toString('binary'); // Escape characters as required by the spec\n\n          _string = _string.replace(escapableRe, function (c) {\n            return escapable[c];\n          });\n        }\n\n        return \"(\".concat(_string, \")\");\n      } else if (Array.isArray(object)) {\n        var items = object.map(function (e) {\n          return PDFObject.convert(e, encryptFn);\n        }).join(' ');\n        return \"[\".concat(items, \"]\");\n      } else if ({}.toString.call(object) === '[object Object]') {\n        var out = ['<<'];\n\n        for (var key in object) {\n          var val = object[key];\n          out.push(\"/\".concat(key, \" \").concat(PDFObject.convert(val, encryptFn)));\n        }\n\n        out.push('>>');\n        return out.join('\\n');\n      } else if (typeof object === 'number') {\n        return PDFObject.number(object);\n      } else {\n        return \"\".concat(object);\n      }\n    }\n  }, {\n    key: \"number\",\n    value: function number(n) {\n      if (n > -1e21 && n < 1e21) {\n        return Math.round(n * 1e6) / 1e6;\n      }\n\n      throw new Error(\"unsupported number: \".concat(n));\n    }\n  }]);\n\n  return PDFObject;\n}();\n\nvar PDFReference =\n/*#__PURE__*/\nfunction (_PDFAbstractReference) {\n  _inherits(PDFReference, _PDFAbstractReference);\n\n  function PDFReference(document, id) {\n    var _this;\n\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, PDFReference);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFReference).call(this));\n    _this.document = document;\n    _this.id = id;\n    _this.data = data;\n    _this.gen = 0;\n    _this.compress = _this.document.compress && !_this.data.Filter;\n    _this.uncompressedLength = 0;\n    _this.buffer = [];\n    return _this;\n  }\n\n  _createClass(PDFReference, [{\n    key: \"write\",\n    value: function write(chunk) {\n      if (!Buffer.isBuffer(chunk)) {\n        chunk = new Buffer(chunk + '\\n', 'binary');\n      }\n\n      this.uncompressedLength += chunk.length;\n\n      if (this.data.Length == null) {\n        this.data.Length = 0;\n      }\n\n      this.buffer.push(chunk);\n      this.data.Length += chunk.length;\n\n      if (this.compress) {\n        return this.data.Filter = 'FlateDecode';\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(chunk) {\n      if (chunk) {\n        this.write(chunk);\n      }\n\n      return this.finalize();\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      this.offset = this.document._offset;\n      var encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;\n\n      if (this.buffer.length) {\n        this.buffer = Buffer.concat(this.buffer);\n\n        if (this.compress) {\n          this.buffer = zlib.deflateSync(this.buffer);\n        }\n\n        if (encryptFn) {\n          this.buffer = encryptFn(this.buffer);\n        }\n\n        this.data.Length = this.buffer.length;\n      }\n\n      this.document._write(\"\".concat(this.id, \" \").concat(this.gen, \" obj\"));\n\n      this.document._write(PDFObject.convert(this.data, encryptFn));\n\n      if (this.buffer.length) {\n        this.document._write('stream');\n\n        this.document._write(this.buffer);\n\n        this.buffer = []; // free up memory\n\n        this.document._write('\\nendstream');\n      }\n\n      this.document._write('endobj');\n\n      this.document._refEnd(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.id, \" \").concat(this.gen, \" R\");\n    }\n  }]);\n\n  return PDFReference;\n}(PDFAbstractReference);\n\n/*\r\nPDFPage - represents a single page in the PDF document\r\nBy Devon Govett\r\n*/\nvar DEFAULT_MARGINS = {\n  top: 72,\n  left: 72,\n  bottom: 72,\n  right: 72\n};\nvar SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0]\n};\n\nvar PDFPage =\n/*#__PURE__*/\nfunction () {\n  function PDFPage(document) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, PDFPage);\n\n    this.document = document;\n    this.size = options.size || 'letter';\n    this.layout = options.layout || 'portrait'; // process margins\n\n    if (typeof options.margin === 'number') {\n      this.margins = {\n        top: options.margin,\n        left: options.margin,\n        bottom: options.margin,\n        right: options.margin\n      }; // default to 1 inch margins\n    } else {\n      this.margins = options.margins || DEFAULT_MARGINS;\n    } // calculate page dimensions\n\n\n    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];\n    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];\n    this.content = this.document.ref(); // Initialize the Font, XObject, and ExtGState dictionaries\n\n    this.resources = this.document.ref({\n      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']\n    }); // The page dictionary\n\n    this.dictionary = this.document.ref({\n      Type: 'Page',\n      Parent: this.document._root.data.Pages,\n      MediaBox: [0, 0, this.width, this.height],\n      Contents: this.content,\n      Resources: this.resources\n    });\n  } // Lazily create these dictionaries\n\n\n  _createClass(PDFPage, [{\n    key: \"maxY\",\n    value: function maxY() {\n      return this.height - this.margins.bottom;\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      return this.content.write(chunk);\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.dictionary.end();\n      this.resources.end();\n      return this.content.end();\n    }\n  }, {\n    key: \"fonts\",\n    get: function get() {\n      var data = this.resources.data;\n      return data.Font != null ? data.Font : data.Font = {};\n    }\n  }, {\n    key: \"xobjects\",\n    get: function get() {\n      var data = this.resources.data;\n      return data.XObject != null ? data.XObject : data.XObject = {};\n    }\n  }, {\n    key: \"ext_gstates\",\n    get: function get() {\n      var data = this.resources.data;\n      return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};\n    }\n  }, {\n    key: \"patterns\",\n    get: function get() {\n      var data = this.resources.data;\n      return data.Pattern != null ? data.Pattern : data.Pattern = {};\n    }\n  }, {\n    key: \"annotations\",\n    get: function get() {\n      var data = this.dictionary.data;\n      return data.Annots != null ? data.Annots : data.Annots = [];\n    }\n  }]);\n\n  return PDFPage;\n}();\n\n/**\r\n * Check if value is in a range group.\r\n * @param {number} value\r\n * @param {number[]} rangeGroup\r\n * @returns {boolean}\r\n */\nfunction inRange(value, rangeGroup) {\n  if (value < rangeGroup[0]) return false;\n  var startRange = 0;\n  var endRange = rangeGroup.length / 2;\n\n  while (startRange <= endRange) {\n    var middleRange = Math.floor((startRange + endRange) / 2); // actual array index\n\n    var arrayIndex = middleRange * 2; // Check if value is in range pointed by actual index\n\n    if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {\n      return true;\n    }\n\n    if (value > rangeGroup[arrayIndex + 1]) {\n      // Search Right Side Of Array\n      startRange = middleRange + 1;\n    } else {\n      // Search Left Side Of Array\n      endRange = middleRange - 1;\n    }\n  }\n\n  return false;\n}\n\n/* eslint-disable prettier/prettier */\n\n/**\r\n * A.1 Unassigned code points in Unicode 3.2\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-A.1\r\n */\n\nvar unassigned_code_points = [0x0221, 0x0221, 0x0234, 0x024f, 0x02ae, 0x02af, 0x02ef, 0x02ff, 0x0350, 0x035f, 0x0370, 0x0373, 0x0376, 0x0379, 0x037b, 0x037d, 0x037f, 0x0383, 0x038b, 0x038b, 0x038d, 0x038d, 0x03a2, 0x03a2, 0x03cf, 0x03cf, 0x03f7, 0x03ff, 0x0487, 0x0487, 0x04cf, 0x04cf, 0x04f6, 0x04f7, 0x04fa, 0x04ff, 0x0510, 0x0530, 0x0557, 0x0558, 0x0560, 0x0560, 0x0588, 0x0588, 0x058b, 0x0590, 0x05a2, 0x05a2, 0x05ba, 0x05ba, 0x05c5, 0x05cf, 0x05eb, 0x05ef, 0x05f5, 0x060b, 0x060d, 0x061a, 0x061c, 0x061e, 0x0620, 0x0620, 0x063b, 0x063f, 0x0656, 0x065f, 0x06ee, 0x06ef, 0x06ff, 0x06ff, 0x070e, 0x070e, 0x072d, 0x072f, 0x074b, 0x077f, 0x07b2, 0x0900, 0x0904, 0x0904, 0x093a, 0x093b, 0x094e, 0x094f, 0x0955, 0x0957, 0x0971, 0x0980, 0x0984, 0x0984, 0x098d, 0x098e, 0x0991, 0x0992, 0x09a9, 0x09a9, 0x09b1, 0x09b1, 0x09b3, 0x09b5, 0x09ba, 0x09bb, 0x09bd, 0x09bd, 0x09c5, 0x09c6, 0x09c9, 0x09ca, 0x09ce, 0x09d6, 0x09d8, 0x09db, 0x09de, 0x09de, 0x09e4, 0x09e5, 0x09fb, 0x0a01, 0x0a03, 0x0a04, 0x0a0b, 0x0a0e, 0x0a11, 0x0a12, 0x0a29, 0x0a29, 0x0a31, 0x0a31, 0x0a34, 0x0a34, 0x0a37, 0x0a37, 0x0a3a, 0x0a3b, 0x0a3d, 0x0a3d, 0x0a43, 0x0a46, 0x0a49, 0x0a4a, 0x0a4e, 0x0a58, 0x0a5d, 0x0a5d, 0x0a5f, 0x0a65, 0x0a75, 0x0a80, 0x0a84, 0x0a84, 0x0a8c, 0x0a8c, 0x0a8e, 0x0a8e, 0x0a92, 0x0a92, 0x0aa9, 0x0aa9, 0x0ab1, 0x0ab1, 0x0ab4, 0x0ab4, 0x0aba, 0x0abb, 0x0ac6, 0x0ac6, 0x0aca, 0x0aca, 0x0ace, 0x0acf, 0x0ad1, 0x0adf, 0x0ae1, 0x0ae5, 0x0af0, 0x0b00, 0x0b04, 0x0b04, 0x0b0d, 0x0b0e, 0x0b11, 0x0b12, 0x0b29, 0x0b29, 0x0b31, 0x0b31, 0x0b34, 0x0b35, 0x0b3a, 0x0b3b, 0x0b44, 0x0b46, 0x0b49, 0x0b4a, 0x0b4e, 0x0b55, 0x0b58, 0x0b5b, 0x0b5e, 0x0b5e, 0x0b62, 0x0b65, 0x0b71, 0x0b81, 0x0b84, 0x0b84, 0x0b8b, 0x0b8d, 0x0b91, 0x0b91, 0x0b96, 0x0b98, 0x0b9b, 0x0b9b, 0x0b9d, 0x0b9d, 0x0ba0, 0x0ba2, 0x0ba5, 0x0ba7, 0x0bab, 0x0bad, 0x0bb6, 0x0bb6, 0x0bba, 0x0bbd, 0x0bc3, 0x0bc5, 0x0bc9, 0x0bc9, 0x0bce, 0x0bd6, 0x0bd8, 0x0be6, 0x0bf3, 0x0c00, 0x0c04, 0x0c04, 0x0c0d, 0x0c0d, 0x0c11, 0x0c11, 0x0c29, 0x0c29, 0x0c34, 0x0c34, 0x0c3a, 0x0c3d, 0x0c45, 0x0c45, 0x0c49, 0x0c49, 0x0c4e, 0x0c54, 0x0c57, 0x0c5f, 0x0c62, 0x0c65, 0x0c70, 0x0c81, 0x0c84, 0x0c84, 0x0c8d, 0x0c8d, 0x0c91, 0x0c91, 0x0ca9, 0x0ca9, 0x0cb4, 0x0cb4, 0x0cba, 0x0cbd, 0x0cc5, 0x0cc5, 0x0cc9, 0x0cc9, 0x0cce, 0x0cd4, 0x0cd7, 0x0cdd, 0x0cdf, 0x0cdf, 0x0ce2, 0x0ce5, 0x0cf0, 0x0d01, 0x0d04, 0x0d04, 0x0d0d, 0x0d0d, 0x0d11, 0x0d11, 0x0d29, 0x0d29, 0x0d3a, 0x0d3d, 0x0d44, 0x0d45, 0x0d49, 0x0d49, 0x0d4e, 0x0d56, 0x0d58, 0x0d5f, 0x0d62, 0x0d65, 0x0d70, 0x0d81, 0x0d84, 0x0d84, 0x0d97, 0x0d99, 0x0db2, 0x0db2, 0x0dbc, 0x0dbc, 0x0dbe, 0x0dbf, 0x0dc7, 0x0dc9, 0x0dcb, 0x0dce, 0x0dd5, 0x0dd5, 0x0dd7, 0x0dd7, 0x0de0, 0x0df1, 0x0df5, 0x0e00, 0x0e3b, 0x0e3e, 0x0e5c, 0x0e80, 0x0e83, 0x0e83, 0x0e85, 0x0e86, 0x0e89, 0x0e89, 0x0e8b, 0x0e8c, 0x0e8e, 0x0e93, 0x0e98, 0x0e98, 0x0ea0, 0x0ea0, 0x0ea4, 0x0ea4, 0x0ea6, 0x0ea6, 0x0ea8, 0x0ea9, 0x0eac, 0x0eac, 0x0eba, 0x0eba, 0x0ebe, 0x0ebf, 0x0ec5, 0x0ec5, 0x0ec7, 0x0ec7, 0x0ece, 0x0ecf, 0x0eda, 0x0edb, 0x0ede, 0x0eff, 0x0f48, 0x0f48, 0x0f6b, 0x0f70, 0x0f8c, 0x0f8f, 0x0f98, 0x0f98, 0x0fbd, 0x0fbd, 0x0fcd, 0x0fce, 0x0fd0, 0x0fff, 0x1022, 0x1022, 0x1028, 0x1028, 0x102b, 0x102b, 0x1033, 0x1035, 0x103a, 0x103f, 0x105a, 0x109f, 0x10c6, 0x10cf, 0x10f9, 0x10fa, 0x10fc, 0x10ff, 0x115a, 0x115e, 0x11a3, 0x11a7, 0x11fa, 0x11ff, 0x1207, 0x1207, 0x1247, 0x1247, 0x1249, 0x1249, 0x124e, 0x124f, 0x1257, 0x1257, 0x1259, 0x1259, 0x125e, 0x125f, 0x1287, 0x1287, 0x1289, 0x1289, 0x128e, 0x128f, 0x12af, 0x12af, 0x12b1, 0x12b1, 0x12b6, 0x12b7, 0x12bf, 0x12bf, 0x12c1, 0x12c1, 0x12c6, 0x12c7, 0x12cf, 0x12cf, 0x12d7, 0x12d7, 0x12ef, 0x12ef, 0x130f, 0x130f, 0x1311, 0x1311, 0x1316, 0x1317, 0x131f, 0x131f, 0x1347, 0x1347, 0x135b, 0x1360, 0x137d, 0x139f, 0x13f5, 0x1400, 0x1677, 0x167f, 0x169d, 0x169f, 0x16f1, 0x16ff, 0x170d, 0x170d, 0x1715, 0x171f, 0x1737, 0x173f, 0x1754, 0x175f, 0x176d, 0x176d, 0x1771, 0x1771, 0x1774, 0x177f, 0x17dd, 0x17df, 0x17ea, 0x17ff, 0x180f, 0x180f, 0x181a, 0x181f, 0x1878, 0x187f, 0x18aa, 0x1dff, 0x1e9c, 0x1e9f, 0x1efa, 0x1eff, 0x1f16, 0x1f17, 0x1f1e, 0x1f1f, 0x1f46, 0x1f47, 0x1f4e, 0x1f4f, 0x1f58, 0x1f58, 0x1f5a, 0x1f5a, 0x1f5c, 0x1f5c, 0x1f5e, 0x1f5e, 0x1f7e, 0x1f7f, 0x1fb5, 0x1fb5, 0x1fc5, 0x1fc5, 0x1fd4, 0x1fd5, 0x1fdc, 0x1fdc, 0x1ff0, 0x1ff1, 0x1ff5, 0x1ff5, 0x1fff, 0x1fff, 0x2053, 0x2056, 0x2058, 0x205e, 0x2064, 0x2069, 0x2072, 0x2073, 0x208f, 0x209f, 0x20b2, 0x20cf, 0x20eb, 0x20ff, 0x213b, 0x213c, 0x214c, 0x2152, 0x2184, 0x218f, 0x23cf, 0x23ff, 0x2427, 0x243f, 0x244b, 0x245f, 0x24ff, 0x24ff, 0x2614, 0x2615, 0x2618, 0x2618, 0x267e, 0x267f, 0x268a, 0x2700, 0x2705, 0x2705, 0x270a, 0x270b, 0x2728, 0x2728, 0x274c, 0x274c, 0x274e, 0x274e, 0x2753, 0x2755, 0x2757, 0x2757, 0x275f, 0x2760, 0x2795, 0x2797, 0x27b0, 0x27b0, 0x27bf, 0x27cf, 0x27ec, 0x27ef, 0x2b00, 0x2e7f, 0x2e9a, 0x2e9a, 0x2ef4, 0x2eff, 0x2fd6, 0x2fef, 0x2ffc, 0x2fff, 0x3040, 0x3040, 0x3097, 0x3098, 0x3100, 0x3104, 0x312d, 0x3130, 0x318f, 0x318f, 0x31b8, 0x31ef, 0x321d, 0x321f, 0x3244, 0x3250, 0x327c, 0x327e, 0x32cc, 0x32cf, 0x32ff, 0x32ff, 0x3377, 0x337a, 0x33de, 0x33df, 0x33ff, 0x33ff, 0x4db6, 0x4dff, 0x9fa6, 0x9fff, 0xa48d, 0xa48f, 0xa4c7, 0xabff, 0xd7a4, 0xd7ff, 0xfa2e, 0xfa2f, 0xfa6b, 0xfaff, 0xfb07, 0xfb12, 0xfb18, 0xfb1c, 0xfb37, 0xfb37, 0xfb3d, 0xfb3d, 0xfb3f, 0xfb3f, 0xfb42, 0xfb42, 0xfb45, 0xfb45, 0xfbb2, 0xfbd2, 0xfd40, 0xfd4f, 0xfd90, 0xfd91, 0xfdc8, 0xfdcf, 0xfdfd, 0xfdff, 0xfe10, 0xfe1f, 0xfe24, 0xfe2f, 0xfe47, 0xfe48, 0xfe53, 0xfe53, 0xfe67, 0xfe67, 0xfe6c, 0xfe6f, 0xfe75, 0xfe75, 0xfefd, 0xfefe, 0xff00, 0xff00, 0xffbf, 0xffc1, 0xffc8, 0xffc9, 0xffd0, 0xffd1, 0xffd8, 0xffd9, 0xffdd, 0xffdf, 0xffe7, 0xffe7, 0xffef, 0xfff8, 0x10000, 0x102ff, 0x1031f, 0x1031f, 0x10324, 0x1032f, 0x1034b, 0x103ff, 0x10426, 0x10427, 0x1044e, 0x1cfff, 0x1d0f6, 0x1d0ff, 0x1d127, 0x1d129, 0x1d1de, 0x1d3ff, 0x1d455, 0x1d455, 0x1d49d, 0x1d49d, 0x1d4a0, 0x1d4a1, 0x1d4a3, 0x1d4a4, 0x1d4a7, 0x1d4a8, 0x1d4ad, 0x1d4ad, 0x1d4ba, 0x1d4ba, 0x1d4bc, 0x1d4bc, 0x1d4c1, 0x1d4c1, 0x1d4c4, 0x1d4c4, 0x1d506, 0x1d506, 0x1d50b, 0x1d50c, 0x1d515, 0x1d515, 0x1d51d, 0x1d51d, 0x1d53a, 0x1d53a, 0x1d53f, 0x1d53f, 0x1d545, 0x1d545, 0x1d547, 0x1d549, 0x1d551, 0x1d551, 0x1d6a4, 0x1d6a7, 0x1d7ca, 0x1d7cd, 0x1d800, 0x1fffd, 0x2a6d7, 0x2f7ff, 0x2fa1e, 0x2fffd, 0x30000, 0x3fffd, 0x40000, 0x4fffd, 0x50000, 0x5fffd, 0x60000, 0x6fffd, 0x70000, 0x7fffd, 0x80000, 0x8fffd, 0x90000, 0x9fffd, 0xa0000, 0xafffd, 0xb0000, 0xbfffd, 0xc0000, 0xcfffd, 0xd0000, 0xdfffd, 0xe0000, 0xe0000, 0xe0002, 0xe001f, 0xe0080, 0xefffd];\n/* eslint-enable */\n\nvar isUnassignedCodePoint = function isUnassignedCodePoint(character) {\n  return inRange(character, unassigned_code_points);\n};\n/* eslint-disable prettier/prettier */\n\n/**\r\n * B.1 Commonly mapped to nothing\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-B.1\r\n */\n\n\nvar commonly_mapped_to_nothing = [0x00ad, 0x00ad, 0x034f, 0x034f, 0x1806, 0x1806, 0x180b, 0x180b, 0x180c, 0x180c, 0x180d, 0x180d, 0x200b, 0x200b, 0x200c, 0x200c, 0x200d, 0x200d, 0x2060, 0x2060, 0xfe00, 0xfe00, 0xfe01, 0xfe01, 0xfe02, 0xfe02, 0xfe03, 0xfe03, 0xfe04, 0xfe04, 0xfe05, 0xfe05, 0xfe06, 0xfe06, 0xfe07, 0xfe07, 0xfe08, 0xfe08, 0xfe09, 0xfe09, 0xfe0a, 0xfe0a, 0xfe0b, 0xfe0b, 0xfe0c, 0xfe0c, 0xfe0d, 0xfe0d, 0xfe0e, 0xfe0e, 0xfe0f, 0xfe0f, 0xfeff, 0xfeff];\n/* eslint-enable */\n\nvar isCommonlyMappedToNothing = function isCommonlyMappedToNothing(character) {\n  return inRange(character, commonly_mapped_to_nothing);\n};\n/* eslint-disable prettier/prettier */\n\n/**\r\n * C.1.2 Non-ASCII space characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.1.2\r\n */\n\n\nvar non_ASCII_space_characters = [0x00a0, 0x00a0\n/* NO-BREAK SPACE */\n, 0x1680, 0x1680\n/* OGHAM SPACE MARK */\n, 0x2000, 0x2000\n/* EN QUAD */\n, 0x2001, 0x2001\n/* EM QUAD */\n, 0x2002, 0x2002\n/* EN SPACE */\n, 0x2003, 0x2003\n/* EM SPACE */\n, 0x2004, 0x2004\n/* THREE-PER-EM SPACE */\n, 0x2005, 0x2005\n/* FOUR-PER-EM SPACE */\n, 0x2006, 0x2006\n/* SIX-PER-EM SPACE */\n, 0x2007, 0x2007\n/* FIGURE SPACE */\n, 0x2008, 0x2008\n/* PUNCTUATION SPACE */\n, 0x2009, 0x2009\n/* THIN SPACE */\n, 0x200a, 0x200a\n/* HAIR SPACE */\n, 0x200b, 0x200b\n/* ZERO WIDTH SPACE */\n, 0x202f, 0x202f\n/* NARROW NO-BREAK SPACE */\n, 0x205f, 0x205f\n/* MEDIUM MATHEMATICAL SPACE */\n, 0x3000, 0x3000\n/* IDEOGRAPHIC SPACE */\n];\n/* eslint-enable */\n\nvar isNonASCIISpaceCharacter = function isNonASCIISpaceCharacter(character) {\n  return inRange(character, non_ASCII_space_characters);\n};\n/* eslint-disable prettier/prettier */\n\n\nvar non_ASCII_controls_characters = [\n/**\r\n * C.2.2 Non-ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2\r\n */\n0x0080, 0x009f\n/* [CONTROL CHARACTERS] */\n, 0x06dd, 0x06dd\n/* ARABIC END OF AYAH */\n, 0x070f, 0x070f\n/* SYRIAC ABBREVIATION MARK */\n, 0x180e, 0x180e\n/* MONGOLIAN VOWEL SEPARATOR */\n, 0x200c, 0x200c\n/* ZERO WIDTH NON-JOINER */\n, 0x200d, 0x200d\n/* ZERO WIDTH JOINER */\n, 0x2028, 0x2028\n/* LINE SEPARATOR */\n, 0x2029, 0x2029\n/* PARAGRAPH SEPARATOR */\n, 0x2060, 0x2060\n/* WORD JOINER */\n, 0x2061, 0x2061\n/* FUNCTION APPLICATION */\n, 0x2062, 0x2062\n/* INVISIBLE TIMES */\n, 0x2063, 0x2063\n/* INVISIBLE SEPARATOR */\n, 0x206a, 0x206f\n/* [CONTROL CHARACTERS] */\n, 0xfeff, 0xfeff\n/* ZERO WIDTH NO-BREAK SPACE */\n, 0xfff9, 0xfffc\n/* [CONTROL CHARACTERS] */\n, 0x1d173, 0x1d17a\n/* [MUSICAL CONTROL CHARACTERS] */\n];\nvar non_character_codepoints = [\n/**\r\n * C.4 Non-character code points\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.4\r\n */\n0xfdd0, 0xfdef\n/* [NONCHARACTER CODE POINTS] */\n, 0xfffe, 0xffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x1fffe, 0x1ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x2fffe, 0x2ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x3fffe, 0x3ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x4fffe, 0x4ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x5fffe, 0x5ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x6fffe, 0x6ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x7fffe, 0x7ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x8fffe, 0x8ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x9fffe, 0x9ffff\n/* [NONCHARACTER CODE POINTS] */\n, 0xafffe, 0xaffff\n/* [NONCHARACTER CODE POINTS] */\n, 0xbfffe, 0xbffff\n/* [NONCHARACTER CODE POINTS] */\n, 0xcfffe, 0xcffff\n/* [NONCHARACTER CODE POINTS] */\n, 0xdfffe, 0xdffff\n/* [NONCHARACTER CODE POINTS] */\n, 0xefffe, 0xeffff\n/* [NONCHARACTER CODE POINTS] */\n, 0x10fffe, 0x10ffff\n/* [NONCHARACTER CODE POINTS] */\n];\n/**\r\n * 2.3.  Prohibited Output\r\n */\n\nvar prohibited_characters = [\n/**\r\n * C.2.1 ASCII control characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1\r\n */\n0, 0x001f\n/* [CONTROL CHARACTERS] */\n, 0x007f, 0x007f\n/* DELETE */\n,\n/**\r\n * C.8 Change display properties or are deprecated\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.8\r\n */\n0x0340, 0x0340\n/* COMBINING GRAVE TONE MARK */\n, 0x0341, 0x0341\n/* COMBINING ACUTE TONE MARK */\n, 0x200e, 0x200e\n/* LEFT-TO-RIGHT MARK */\n, 0x200f, 0x200f\n/* RIGHT-TO-LEFT MARK */\n, 0x202a, 0x202a\n/* LEFT-TO-RIGHT EMBEDDING */\n, 0x202b, 0x202b\n/* RIGHT-TO-LEFT EMBEDDING */\n, 0x202c, 0x202c\n/* POP DIRECTIONAL FORMATTING */\n, 0x202d, 0x202d\n/* LEFT-TO-RIGHT OVERRIDE */\n, 0x202e, 0x202e\n/* RIGHT-TO-LEFT OVERRIDE */\n, 0x206a, 0x206a\n/* INHIBIT SYMMETRIC SWAPPING */\n, 0x206b, 0x206b\n/* ACTIVATE SYMMETRIC SWAPPING */\n, 0x206c, 0x206c\n/* INHIBIT ARABIC FORM SHAPING */\n, 0x206d, 0x206d\n/* ACTIVATE ARABIC FORM SHAPING */\n, 0x206e, 0x206e\n/* NATIONAL DIGIT SHAPES */\n, 0x206f, 0x206f\n/* NOMINAL DIGIT SHAPES */\n,\n/**\r\n * C.7 Inappropriate for canonical representation\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.7\r\n */\n0x2ff0, 0x2ffb\n/* [IDEOGRAPHIC DESCRIPTION CHARACTERS] */\n,\n/**\r\n * C.5 Surrogate codes\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.5\r\n */\n0xd800, 0xdfff,\n/**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */\n0xe000, 0xf8ff\n/* [PRIVATE USE, PLANE 0] */\n,\n/**\r\n * C.6 Inappropriate for plain text\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.6\r\n */\n0xfff9, 0xfff9\n/* INTERLINEAR ANNOTATION ANCHOR */\n, 0xfffa, 0xfffa\n/* INTERLINEAR ANNOTATION SEPARATOR */\n, 0xfffb, 0xfffb\n/* INTERLINEAR ANNOTATION TERMINATOR */\n, 0xfffc, 0xfffc\n/* OBJECT REPLACEMENT CHARACTER */\n, 0xfffd, 0xfffd\n/* REPLACEMENT CHARACTER */\n,\n/**\r\n * C.9 Tagging characters\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.9\r\n */\n0xe0001, 0xe0001\n/* LANGUAGE TAG */\n, 0xe0020, 0xe007f\n/* [TAGGING CHARACTERS] */\n,\n/**\r\n * C.3 Private use\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-C.3\r\n */\n0xf0000, 0xffffd\n/* [PRIVATE USE, PLANE 15] */\n, 0x100000, 0x10fffd\n/* [PRIVATE USE, PLANE 16] */\n];\n/* eslint-enable */\n\nvar isProhibitedCharacter = function isProhibitedCharacter(character) {\n  return inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);\n};\n/* eslint-disable prettier/prettier */\n\n/**\r\n * D.1 Characters with bidirectional property \"R\" or \"AL\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.1\r\n */\n\n\nvar bidirectional_r_al = [0x05be, 0x05be, 0x05c0, 0x05c0, 0x05c3, 0x05c3, 0x05d0, 0x05ea, 0x05f0, 0x05f4, 0x061b, 0x061b, 0x061f, 0x061f, 0x0621, 0x063a, 0x0640, 0x064a, 0x066d, 0x066f, 0x0671, 0x06d5, 0x06dd, 0x06dd, 0x06e5, 0x06e6, 0x06fa, 0x06fe, 0x0700, 0x070d, 0x0710, 0x0710, 0x0712, 0x072c, 0x0780, 0x07a5, 0x07b1, 0x07b1, 0x200f, 0x200f, 0xfb1d, 0xfb1d, 0xfb1f, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdfc, 0xfe70, 0xfe74, 0xfe76, 0xfefc];\n/* eslint-enable */\n\nvar isBidirectionalRAL = function isBidirectionalRAL(character) {\n  return inRange(character, bidirectional_r_al);\n};\n/* eslint-disable prettier/prettier */\n\n/**\r\n * D.2 Characters with bidirectional property \"L\"\r\n * @link https://tools.ietf.org/html/rfc3454#appendix-D.2\r\n */\n\n\nvar bidirectional_l = [0x0041, 0x005a, 0x0061, 0x007a, 0x00aa, 0x00aa, 0x00b5, 0x00b5, 0x00ba, 0x00ba, 0x00c0, 0x00d6, 0x00d8, 0x00f6, 0x00f8, 0x0220, 0x0222, 0x0233, 0x0250, 0x02ad, 0x02b0, 0x02b8, 0x02bb, 0x02c1, 0x02d0, 0x02d1, 0x02e0, 0x02e4, 0x02ee, 0x02ee, 0x037a, 0x037a, 0x0386, 0x0386, 0x0388, 0x038a, 0x038c, 0x038c, 0x038e, 0x03a1, 0x03a3, 0x03ce, 0x03d0, 0x03f5, 0x0400, 0x0482, 0x048a, 0x04ce, 0x04d0, 0x04f5, 0x04f8, 0x04f9, 0x0500, 0x050f, 0x0531, 0x0556, 0x0559, 0x055f, 0x0561, 0x0587, 0x0589, 0x0589, 0x0903, 0x0903, 0x0905, 0x0939, 0x093d, 0x0940, 0x0949, 0x094c, 0x0950, 0x0950, 0x0958, 0x0961, 0x0964, 0x0970, 0x0982, 0x0983, 0x0985, 0x098c, 0x098f, 0x0990, 0x0993, 0x09a8, 0x09aa, 0x09b0, 0x09b2, 0x09b2, 0x09b6, 0x09b9, 0x09be, 0x09c0, 0x09c7, 0x09c8, 0x09cb, 0x09cc, 0x09d7, 0x09d7, 0x09dc, 0x09dd, 0x09df, 0x09e1, 0x09e6, 0x09f1, 0x09f4, 0x09fa, 0x0a05, 0x0a0a, 0x0a0f, 0x0a10, 0x0a13, 0x0a28, 0x0a2a, 0x0a30, 0x0a32, 0x0a33, 0x0a35, 0x0a36, 0x0a38, 0x0a39, 0x0a3e, 0x0a40, 0x0a59, 0x0a5c, 0x0a5e, 0x0a5e, 0x0a66, 0x0a6f, 0x0a72, 0x0a74, 0x0a83, 0x0a83, 0x0a85, 0x0a8b, 0x0a8d, 0x0a8d, 0x0a8f, 0x0a91, 0x0a93, 0x0aa8, 0x0aaa, 0x0ab0, 0x0ab2, 0x0ab3, 0x0ab5, 0x0ab9, 0x0abd, 0x0ac0, 0x0ac9, 0x0ac9, 0x0acb, 0x0acc, 0x0ad0, 0x0ad0, 0x0ae0, 0x0ae0, 0x0ae6, 0x0aef, 0x0b02, 0x0b03, 0x0b05, 0x0b0c, 0x0b0f, 0x0b10, 0x0b13, 0x0b28, 0x0b2a, 0x0b30, 0x0b32, 0x0b33, 0x0b36, 0x0b39, 0x0b3d, 0x0b3e, 0x0b40, 0x0b40, 0x0b47, 0x0b48, 0x0b4b, 0x0b4c, 0x0b57, 0x0b57, 0x0b5c, 0x0b5d, 0x0b5f, 0x0b61, 0x0b66, 0x0b70, 0x0b83, 0x0b83, 0x0b85, 0x0b8a, 0x0b8e, 0x0b90, 0x0b92, 0x0b95, 0x0b99, 0x0b9a, 0x0b9c, 0x0b9c, 0x0b9e, 0x0b9f, 0x0ba3, 0x0ba4, 0x0ba8, 0x0baa, 0x0bae, 0x0bb5, 0x0bb7, 0x0bb9, 0x0bbe, 0x0bbf, 0x0bc1, 0x0bc2, 0x0bc6, 0x0bc8, 0x0bca, 0x0bcc, 0x0bd7, 0x0bd7, 0x0be7, 0x0bf2, 0x0c01, 0x0c03, 0x0c05, 0x0c0c, 0x0c0e, 0x0c10, 0x0c12, 0x0c28, 0x0c2a, 0x0c33, 0x0c35, 0x0c39, 0x0c41, 0x0c44, 0x0c60, 0x0c61, 0x0c66, 0x0c6f, 0x0c82, 0x0c83, 0x0c85, 0x0c8c, 0x0c8e, 0x0c90, 0x0c92, 0x0ca8, 0x0caa, 0x0cb3, 0x0cb5, 0x0cb9, 0x0cbe, 0x0cbe, 0x0cc0, 0x0cc4, 0x0cc7, 0x0cc8, 0x0cca, 0x0ccb, 0x0cd5, 0x0cd6, 0x0cde, 0x0cde, 0x0ce0, 0x0ce1, 0x0ce6, 0x0cef, 0x0d02, 0x0d03, 0x0d05, 0x0d0c, 0x0d0e, 0x0d10, 0x0d12, 0x0d28, 0x0d2a, 0x0d39, 0x0d3e, 0x0d40, 0x0d46, 0x0d48, 0x0d4a, 0x0d4c, 0x0d57, 0x0d57, 0x0d60, 0x0d61, 0x0d66, 0x0d6f, 0x0d82, 0x0d83, 0x0d85, 0x0d96, 0x0d9a, 0x0db1, 0x0db3, 0x0dbb, 0x0dbd, 0x0dbd, 0x0dc0, 0x0dc6, 0x0dcf, 0x0dd1, 0x0dd8, 0x0ddf, 0x0df2, 0x0df4, 0x0e01, 0x0e30, 0x0e32, 0x0e33, 0x0e40, 0x0e46, 0x0e4f, 0x0e5b, 0x0e81, 0x0e82, 0x0e84, 0x0e84, 0x0e87, 0x0e88, 0x0e8a, 0x0e8a, 0x0e8d, 0x0e8d, 0x0e94, 0x0e97, 0x0e99, 0x0e9f, 0x0ea1, 0x0ea3, 0x0ea5, 0x0ea5, 0x0ea7, 0x0ea7, 0x0eaa, 0x0eab, 0x0ead, 0x0eb0, 0x0eb2, 0x0eb3, 0x0ebd, 0x0ebd, 0x0ec0, 0x0ec4, 0x0ec6, 0x0ec6, 0x0ed0, 0x0ed9, 0x0edc, 0x0edd, 0x0f00, 0x0f17, 0x0f1a, 0x0f34, 0x0f36, 0x0f36, 0x0f38, 0x0f38, 0x0f3e, 0x0f47, 0x0f49, 0x0f6a, 0x0f7f, 0x0f7f, 0x0f85, 0x0f85, 0x0f88, 0x0f8b, 0x0fbe, 0x0fc5, 0x0fc7, 0x0fcc, 0x0fcf, 0x0fcf, 0x1000, 0x1021, 0x1023, 0x1027, 0x1029, 0x102a, 0x102c, 0x102c, 0x1031, 0x1031, 0x1038, 0x1038, 0x1040, 0x1057, 0x10a0, 0x10c5, 0x10d0, 0x10f8, 0x10fb, 0x10fb, 0x1100, 0x1159, 0x115f, 0x11a2, 0x11a8, 0x11f9, 0x1200, 0x1206, 0x1208, 0x1246, 0x1248, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1286, 0x1288, 0x1288, 0x128a, 0x128d, 0x1290, 0x12ae, 0x12b0, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12ce, 0x12d0, 0x12d6, 0x12d8, 0x12ee, 0x12f0, 0x130e, 0x1310, 0x1310, 0x1312, 0x1315, 0x1318, 0x131e, 0x1320, 0x1346, 0x1348, 0x135a, 0x1361, 0x137c, 0x13a0, 0x13f4, 0x1401, 0x1676, 0x1681, 0x169a, 0x16a0, 0x16f0, 0x1700, 0x170c, 0x170e, 0x1711, 0x1720, 0x1731, 0x1735, 0x1736, 0x1740, 0x1751, 0x1760, 0x176c, 0x176e, 0x1770, 0x1780, 0x17b6, 0x17be, 0x17c5, 0x17c7, 0x17c8, 0x17d4, 0x17da, 0x17dc, 0x17dc, 0x17e0, 0x17e9, 0x1810, 0x1819, 0x1820, 0x1877, 0x1880, 0x18a8, 0x1e00, 0x1e9b, 0x1ea0, 0x1ef9, 0x1f00, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x200e, 0x200e, 0x2071, 0x2071, 0x207f, 0x207f, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2131, 0x2133, 0x2139, 0x213d, 0x213f, 0x2145, 0x2149, 0x2160, 0x2183, 0x2336, 0x237a, 0x2395, 0x2395, 0x249c, 0x24e9, 0x3005, 0x3007, 0x3021, 0x3029, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312c, 0x3131, 0x318e, 0x3190, 0x31b7, 0x31f0, 0x321c, 0x3220, 0x3243, 0x3260, 0x327b, 0x327f, 0x32b0, 0x32c0, 0x32cb, 0x32d0, 0x32fe, 0x3300, 0x3376, 0x337b, 0x33dd, 0x33e0, 0x33fe, 0x3400, 0x4db5, 0x4e00, 0x9fa5, 0xa000, 0xa48c, 0xac00, 0xd7a3, 0xd800, 0xfa2d, 0xfa30, 0xfa6a, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xff21, 0xff3a, 0xff41, 0xff5a, 0xff66, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10300, 0x1031e, 0x10320, 0x10323, 0x10330, 0x1034a, 0x10400, 0x10425, 0x10428, 0x1044d, 0x1d000, 0x1d0f5, 0x1d100, 0x1d126, 0x1d12a, 0x1d166, 0x1d16a, 0x1d172, 0x1d183, 0x1d184, 0x1d18c, 0x1d1a9, 0x1d1ae, 0x1d1dd, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c0, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a3, 0x1d6a8, 0x1d7c9, 0x20000, 0x2a6d6, 0x2f800, 0x2fa1d, 0xf0000, 0xffffd, 0x100000, 0x10fffd];\n/* eslint-enable */\n\nvar isBidirectionalL = function isBidirectionalL(character) {\n  return inRange(character, bidirectional_l);\n};\n\n/**\r\n * non-ASCII space characters [StringPrep, C.1.2] that can be\r\n * mapped to SPACE (U+0020)\r\n */\n\nvar mapping2space = isNonASCIISpaceCharacter;\n/**\r\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\r\n * that can be mapped to nothing.\r\n */\n\nvar mapping2nothing = isCommonlyMappedToNothing; // utils\n\nvar getCodePoint = function getCodePoint(character) {\n  return character.codePointAt(0);\n};\n\nvar first = function first(x) {\n  return x[0];\n};\n\nvar last = function last(x) {\n  return x[x.length - 1];\n};\n/**\r\n * Convert provided string into an array of Unicode Code Points.\r\n * Based on https://stackoverflow.com/a/21409165/1556249\r\n * and https://www.npmjs.com/package/code-point-at.\r\n * @param {string} input\r\n * @returns {number[]}\r\n */\n\n\nfunction toCodePoints(input) {\n  var codepoints = [];\n  var size = input.length;\n\n  for (var i = 0; i < size; i += 1) {\n    var before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      var next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n/**\r\n * SASLprep.\r\n * @param {string} input\r\n * @param {Object} opts\r\n * @param {boolean} opts.allowUnassigned\r\n * @returns {string}\r\n */\n\n\nfunction saslprep(input) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  } // 1. Map\n\n\n  var mapped_input = toCodePoints(input) // 1.1 mapping to space\n  .map(function (character) {\n    return mapping2space(character) ? 0x20 : character;\n  }) // 1.2 mapping to nothing\n  .filter(function (character) {\n    return !mapping2nothing(character);\n  }); // 2. Normalize\n\n  var normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');\n  var normalized_map = toCodePoints(normalized_input); // 3. Prohibit\n\n  var hasProhibited = normalized_map.some(isProhibitedCharacter);\n\n  if (hasProhibited) {\n    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n  } // Unassigned Code Points\n\n\n  if (opts.allowUnassigned !== true) {\n    var hasUnassigned = normalized_map.some(isUnassignedCodePoint);\n\n    if (hasUnassigned) {\n      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n    }\n  } // 4. check bidi\n\n\n  var hasBidiRAL = normalized_map.some(isBidirectionalRAL);\n  var hasBidiL = normalized_map.some(isBidirectionalL); // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n  /**\r\n   * 4.2 If a string contains any RandALCat character, a RandALCat\r\n   * character MUST be the first character of the string, and a\r\n   * RandALCat character MUST be the last character of the string.\r\n   */\n\n\n  var isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));\n  var isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n\n  return normalized_input;\n}\n\nvar PDFSecurity =\n/*#__PURE__*/\nfunction () {\n  _createClass(PDFSecurity, null, [{\n    key: \"generateFileID\",\n    value: function generateFileID() {\n      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var infoStr = \"\".concat(info.CreationDate.getTime(), \"\\n\");\n\n      for (var key in info) {\n        if (!info.hasOwnProperty(key)) {\n          continue;\n        }\n\n        infoStr += \"\".concat(key, \": \").concat(info[key].toString(), \"\\n\");\n      }\n\n      return wordArrayToBuffer(CryptoJS.MD5(infoStr));\n    }\n  }, {\n    key: \"generateRandomWordArray\",\n    value: function generateRandomWordArray(bytes) {\n      return CryptoJS.lib.WordArray.random(bytes);\n    }\n  }, {\n    key: \"create\",\n    value: function create(document) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!options.ownerPassword && !options.userPassword) {\n        return null;\n      }\n\n      return new PDFSecurity(document, options);\n    }\n  }]);\n\n  function PDFSecurity(document) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, PDFSecurity);\n\n    if (!options.ownerPassword && !options.userPassword) {\n      throw new Error('None of owner password and user password is defined.');\n    }\n\n    this.document = document;\n\n    this._setupEncryption(options);\n  }\n\n  _createClass(PDFSecurity, [{\n    key: \"_setupEncryption\",\n    value: function _setupEncryption(options) {\n      switch (options.pdfVersion) {\n        case '1.4':\n        case '1.5':\n          this.version = 2;\n          break;\n\n        case '1.6':\n        case '1.7':\n          this.version = 4;\n          break;\n\n        case '1.7ext3':\n          this.version = 5;\n          break;\n\n        default:\n          this.version = 1;\n          break;\n      }\n\n      var encDict = {\n        Filter: 'Standard'\n      };\n\n      switch (this.version) {\n        case 1:\n        case 2:\n        case 4:\n          this._setupEncryptionV1V2V4(this.version, encDict, options);\n\n          break;\n\n        case 5:\n          this._setupEncryptionV5(encDict, options);\n\n          break;\n      }\n\n      this.dictionary = this.document.ref(encDict);\n    }\n  }, {\n    key: \"_setupEncryptionV1V2V4\",\n    value: function _setupEncryptionV1V2V4(v, encDict, options) {\n      var r, permissions;\n\n      switch (v) {\n        case 1:\n          r = 2;\n          this.keyBits = 40;\n          permissions = getPermissionsR2(options.permissions);\n          break;\n\n        case 2:\n          r = 3;\n          this.keyBits = 128;\n          permissions = getPermissionsR3(options.permissions);\n          break;\n\n        case 4:\n          r = 4;\n          this.keyBits = 128;\n          permissions = getPermissionsR3(options.permissions);\n          break;\n      }\n\n      var paddedUserPassword = processPasswordR2R3R4(options.userPassword);\n      var paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;\n      var ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);\n      this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);\n      var userPasswordEntry;\n\n      if (r === 2) {\n        userPasswordEntry = getUserPasswordR2(this.encryptionKey);\n      } else {\n        userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);\n      }\n\n      encDict.V = v;\n\n      if (v >= 2) {\n        encDict.Length = this.keyBits;\n      }\n\n      if (v === 4) {\n        encDict.CF = {\n          StdCF: {\n            AuthEvent: 'DocOpen',\n            CFM: 'AESV2',\n            Length: this.keyBits / 8\n          }\n        };\n        encDict.StmF = 'StdCF';\n        encDict.StrF = 'StdCF';\n      }\n\n      encDict.R = r;\n      encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n      encDict.U = wordArrayToBuffer(userPasswordEntry);\n      encDict.P = permissions;\n    }\n  }, {\n    key: \"_setupEncryptionV5\",\n    value: function _setupEncryptionV5(encDict, options) {\n      this.keyBits = 256;\n      var permissions = getPermissionsR3(options);\n      var processedUserPassword = processPasswordR5(options.userPassword);\n      var processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;\n      this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);\n      var userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);\n      var userKeySalt = CryptoJS.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);\n      var userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);\n      var ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);\n      var ownerKeySalt = CryptoJS.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);\n      var ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);\n      var permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);\n      encDict.V = 5;\n      encDict.Length = this.keyBits;\n      encDict.CF = {\n        StdCF: {\n          AuthEvent: 'DocOpen',\n          CFM: 'AESV3',\n          Length: this.keyBits / 8\n        }\n      };\n      encDict.StmF = 'StdCF';\n      encDict.StrF = 'StdCF';\n      encDict.R = 5;\n      encDict.O = wordArrayToBuffer(ownerPasswordEntry);\n      encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);\n      encDict.U = wordArrayToBuffer(userPasswordEntry);\n      encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);\n      encDict.P = permissions;\n      encDict.Perms = wordArrayToBuffer(permsEntry);\n    }\n  }, {\n    key: \"getEncryptFn\",\n    value: function getEncryptFn(obj, gen) {\n      var digest;\n\n      if (this.version < 5) {\n        digest = this.encryptionKey.clone().concat(CryptoJS.lib.WordArray.create([(obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff, (gen & 0xff00) << 16], 5));\n      }\n\n      if (this.version === 1 || this.version === 2) {\n        var _key = CryptoJS.MD5(digest);\n\n        _key.sigBytes = Math.min(16, this.keyBits / 8 + 5);\n        return function (buffer) {\n          return wordArrayToBuffer(CryptoJS.RC4.encrypt(CryptoJS.lib.WordArray.create(buffer), _key).ciphertext);\n        };\n      }\n\n      var key;\n\n      if (this.version === 4) {\n        key = CryptoJS.MD5(digest.concat(CryptoJS.lib.WordArray.create([0x73416c54], 4)));\n      } else {\n        key = this.encryptionKey;\n      }\n\n      var iv = PDFSecurity.generateRandomWordArray(16);\n      var options = {\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7,\n        iv: iv\n      };\n      return function (buffer) {\n        return wordArrayToBuffer(iv.clone().concat(CryptoJS.AES.encrypt(CryptoJS.lib.WordArray.create(buffer), key, options).ciphertext));\n      };\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.dictionary.end();\n    }\n  }]);\n\n  return PDFSecurity;\n}();\n\nfunction getPermissionsR2() {\n  var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var permissions = 0xffffffc0 >> 0;\n\n  if (permissionObject.printing) {\n    permissions |= 4;\n  }\n\n  if (permissionObject.modifying) {\n    permissions |= 8;\n  }\n\n  if (permissionObject.copying) {\n    permissions |= 16;\n  }\n\n  if (permissionObject.annotating) {\n    permissions |= 32;\n  }\n\n  return permissions;\n}\n\nfunction getPermissionsR3() {\n  var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var permissions = 0xfffff0c0 >> 0;\n\n  if (permissionObject.printing === 'lowResolution') {\n    permissions |= 4;\n  }\n\n  if (permissionObject.printing === 'highResolution') {\n    permissions |= 2052;\n  }\n\n  if (permissionObject.modifying) {\n    permissions |= 8;\n  }\n\n  if (permissionObject.copying) {\n    permissions |= 16;\n  }\n\n  if (permissionObject.annotating) {\n    permissions |= 32;\n  }\n\n  if (permissionObject.fillingForms) {\n    permissions |= 256;\n  }\n\n  if (permissionObject.contentAccessibility) {\n    permissions |= 512;\n  }\n\n  if (permissionObject.documentAssembly) {\n    permissions |= 1024;\n  }\n\n  return permissions;\n}\n\nfunction getUserPasswordR2(encryptionKey) {\n  return CryptoJS.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;\n}\n\nfunction getUserPasswordR3R4(documentId, encryptionKey) {\n  var key = encryptionKey.clone();\n  var cipher = CryptoJS.MD5(processPasswordR2R3R4().concat(CryptoJS.lib.WordArray.create(documentId)));\n\n  for (var i = 0; i < 20; i++) {\n    var xorRound = Math.ceil(key.sigBytes / 4);\n\n    for (var j = 0; j < xorRound; j++) {\n      key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);\n    }\n\n    cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;\n  }\n\n  return cipher.concat(CryptoJS.lib.WordArray.create(null, 16));\n}\n\nfunction getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {\n  var digest = paddedOwnerPassword;\n  var round = r >= 3 ? 51 : 1;\n\n  for (var i = 0; i < round; i++) {\n    digest = CryptoJS.MD5(digest);\n  }\n\n  var key = digest.clone();\n  key.sigBytes = keyBits / 8;\n  var cipher = paddedUserPassword;\n  round = r >= 3 ? 20 : 1;\n\n  for (var _i = 0; _i < round; _i++) {\n    var xorRound = Math.ceil(key.sigBytes / 4);\n\n    for (var j = 0; j < xorRound; j++) {\n      key.words[j] = digest.words[j] ^ (_i | _i << 8 | _i << 16 | _i << 24);\n    }\n\n    cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;\n  }\n\n  return cipher;\n}\n\nfunction getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {\n  var key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(CryptoJS.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(CryptoJS.lib.WordArray.create(documentId));\n  var round = r >= 3 ? 51 : 1;\n\n  for (var i = 0; i < round; i++) {\n    key = CryptoJS.MD5(key);\n    key.sigBytes = keyBits / 8;\n  }\n\n  return key;\n}\n\nfunction getUserPasswordR5(processedUserPassword, generateRandomWordArray) {\n  var validationSalt = generateRandomWordArray(8);\n  var keySalt = generateRandomWordArray(8);\n  return CryptoJS.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);\n}\n\nfunction getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {\n  var key = CryptoJS.SHA256(processedUserPassword.clone().concat(userKeySalt));\n  var options = {\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.NoPadding,\n    iv: CryptoJS.lib.WordArray.create(null, 16)\n  };\n  return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;\n}\n\nfunction getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {\n  var validationSalt = generateRandomWordArray(8);\n  var keySalt = generateRandomWordArray(8);\n  return CryptoJS.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);\n}\n\nfunction getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {\n  var key = CryptoJS.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));\n  var options = {\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.NoPadding,\n    iv: CryptoJS.lib.WordArray.create(null, 16)\n  };\n  return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;\n}\n\nfunction getEncryptionKeyR5(generateRandomWordArray) {\n  return generateRandomWordArray(32);\n}\n\nfunction getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {\n  var cipher = CryptoJS.lib.WordArray.create([lsbFirstWord(permissions), 0xffffffff, 0x54616462], 12).concat(generateRandomWordArray(4));\n  var options = {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.NoPadding\n  };\n  return CryptoJS.AES.encrypt(cipher, encryptionKey, options).ciphertext;\n}\n\nfunction processPasswordR2R3R4() {\n  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var out = new Buffer(32);\n  var length = password.length;\n  var index = 0;\n\n  while (index < length && index < 32) {\n    var code = password.charCodeAt(index);\n\n    if (code > 0xff) {\n      throw new Error('Password contains one or more invalid characters.');\n    }\n\n    out[index] = code;\n    index++;\n  }\n\n  while (index < 32) {\n    out[index] = PASSWORD_PADDING[index - length];\n    index++;\n  }\n\n  return CryptoJS.lib.WordArray.create(out);\n}\n\nfunction processPasswordR5() {\n  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  password = unescape(encodeURIComponent(saslprep(password)));\n  var length = Math.min(127, password.length);\n  var out = new Buffer(length);\n\n  for (var i = 0; i < length; i++) {\n    out[i] = password.charCodeAt(i);\n  }\n\n  return CryptoJS.lib.WordArray.create(out);\n}\n\nfunction lsbFirstWord(data) {\n  return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;\n}\n\nfunction wordArrayToBuffer(wordArray) {\n  var byteArray = [];\n\n  for (var i = 0; i < wordArray.sigBytes; i++) {\n    byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);\n  }\n\n  return Buffer.from(byteArray);\n}\n\nvar PASSWORD_PADDING = [0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a];\n\nvar number = PDFObject.number;\n\nvar PDFGradient =\n/*#__PURE__*/\nfunction () {\n  function PDFGradient(doc) {\n    _classCallCheck(this, PDFGradient);\n\n    this.doc = doc;\n    this.stops = [];\n    this.embedded = false;\n    this.transform = [1, 0, 0, 1, 0, 0];\n  }\n\n  _createClass(PDFGradient, [{\n    key: \"stop\",\n    value: function stop(pos, color, opacity) {\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      color = this.doc._normalizeColor(color);\n\n      if (this.stops.length === 0) {\n        if (color.length === 3) {\n          this._colorSpace = 'DeviceRGB';\n        } else if (color.length === 4) {\n          this._colorSpace = 'DeviceCMYK';\n        } else if (color.length === 1) {\n          this._colorSpace = 'DeviceGray';\n        } else {\n          throw new Error('Unknown color space');\n        }\n      } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {\n        throw new Error('All gradient stops must use the same color space');\n      }\n\n      opacity = Math.max(0, Math.min(1, opacity));\n      this.stops.push([pos, color, opacity]);\n      return this;\n    }\n  }, {\n    key: \"setTransform\",\n    value: function setTransform(m11, m12, m21, m22, dx, dy) {\n      this.transform = [m11, m12, m21, m22, dx, dy];\n      return this;\n    }\n  }, {\n    key: \"embed\",\n    value: function embed(m) {\n      var fn;\n\n      if (this.stops.length === 0) {\n        return;\n      }\n\n      this.embedded = true;\n      this.matrix = m; // if the last stop comes before 100%, add a copy at 100%\n\n      var last = this.stops[this.stops.length - 1];\n\n      if (last[0] < 1) {\n        this.stops.push([1, last[1], last[2]]);\n      }\n\n      var bounds = [];\n      var encode = [];\n      var stops = [];\n\n      for (var i = 0, stopsLength = this.stops.length - 1; i < stopsLength; i++) {\n        encode.push(0, 1);\n\n        if (i + 2 !== stopsLength) {\n          bounds.push(this.stops[i + 1][0]);\n        }\n\n        fn = this.doc.ref({\n          FunctionType: 2,\n          Domain: [0, 1],\n          C0: this.stops[i + 0][1],\n          C1: this.stops[i + 1][1],\n          N: 1\n        });\n        stops.push(fn);\n        fn.end();\n      } // if there are only two stops, we don't need a stitching function\n\n\n      if (stops.length === 1) {\n        fn = stops[0];\n      } else {\n        fn = this.doc.ref({\n          FunctionType: 3,\n          // stitching function\n          Domain: [0, 1],\n          Functions: stops,\n          Bounds: bounds,\n          Encode: encode\n        });\n        fn.end();\n      }\n\n      this.id = \"Sh\".concat(++this.doc._gradCount);\n      var shader = this.shader(fn);\n      shader.end();\n      var pattern = this.doc.ref({\n        Type: 'Pattern',\n        PatternType: 2,\n        Shading: shader,\n        Matrix: this.matrix.map(function (v) {\n          return number(v);\n        })\n      });\n      pattern.end();\n\n      if (this.stops.some(function (stop) {\n        return stop[2] < 1;\n      })) {\n        var grad = this.opacityGradient();\n        grad._colorSpace = 'DeviceGray';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.stops[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var stop = _step.value;\n            grad.stop(stop[0], [stop[2]]);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        grad = grad.embed(this.matrix);\n        var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];\n        var form = this.doc.ref({\n          Type: 'XObject',\n          Subtype: 'Form',\n          FormType: 1,\n          BBox: pageBBox,\n          Group: {\n            Type: 'Group',\n            S: 'Transparency',\n            CS: 'DeviceGray'\n          },\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: grad\n            }\n          }\n        });\n        form.write('/Pattern cs /Sh1 scn');\n        form.end(\"\".concat(pageBBox.join(' '), \" re f\"));\n        var gstate = this.doc.ref({\n          Type: 'ExtGState',\n          SMask: {\n            Type: 'Mask',\n            S: 'Luminosity',\n            G: form\n          }\n        });\n        gstate.end();\n        var opacityPattern = this.doc.ref({\n          Type: 'Pattern',\n          PatternType: 1,\n          PaintType: 1,\n          TilingType: 2,\n          BBox: pageBBox,\n          XStep: pageBBox[2],\n          YStep: pageBBox[3],\n          Resources: {\n            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],\n            Pattern: {\n              Sh1: pattern\n            },\n            ExtGState: {\n              Gs1: gstate\n            }\n          }\n        });\n        opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');\n        opacityPattern.end(\"\".concat(pageBBox.join(' '), \" re f\"));\n        this.doc.page.patterns[this.id] = opacityPattern;\n      } else {\n        this.doc.page.patterns[this.id] = pattern;\n      }\n\n      return pattern;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(op) {\n      // apply gradient transform to existing document ctm\n      var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6),\n          m0 = _this$doc$_ctm[0],\n          m1 = _this$doc$_ctm[1],\n          m2 = _this$doc$_ctm[2],\n          m3 = _this$doc$_ctm[3],\n          m4 = _this$doc$_ctm[4],\n          m5 = _this$doc$_ctm[5];\n\n      var _this$transform = _slicedToArray(this.transform, 6),\n          m11 = _this$transform[0],\n          m12 = _this$transform[1],\n          m21 = _this$transform[2],\n          m22 = _this$transform[3],\n          dx = _this$transform[4],\n          dy = _this$transform[5];\n\n      var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];\n\n      if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {\n        this.embed(m);\n      }\n\n      return this.doc.addContent(\"/\".concat(this.id, \" \").concat(op));\n    }\n  }]);\n\n  return PDFGradient;\n}();\n\nvar PDFLinearGradient =\n/*#__PURE__*/\nfunction (_PDFGradient) {\n  _inherits(PDFLinearGradient, _PDFGradient);\n\n  function PDFLinearGradient(doc, x1, y1, x2, y2) {\n    var _this;\n\n    _classCallCheck(this, PDFLinearGradient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFLinearGradient).call(this, doc));\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n\n  _createClass(PDFLinearGradient, [{\n    key: \"shader\",\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 2,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.x2, this.y2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: \"opacityGradient\",\n    value: function opacityGradient() {\n      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n    }\n  }]);\n\n  return PDFLinearGradient;\n}(PDFGradient);\n\nvar PDFRadialGradient =\n/*#__PURE__*/\nfunction (_PDFGradient2) {\n  _inherits(PDFRadialGradient, _PDFGradient2);\n\n  function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {\n    var _this2;\n\n    _classCallCheck(this, PDFRadialGradient);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PDFRadialGradient).call(this, doc));\n    _this2.doc = doc;\n    _this2.x1 = x1;\n    _this2.y1 = y1;\n    _this2.r1 = r1;\n    _this2.x2 = x2;\n    _this2.y2 = y2;\n    _this2.r2 = r2;\n    return _this2;\n  }\n\n  _createClass(PDFRadialGradient, [{\n    key: \"shader\",\n    value: function shader(fn) {\n      return this.doc.ref({\n        ShadingType: 3,\n        ColorSpace: this._colorSpace,\n        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],\n        Function: fn,\n        Extend: [true, true]\n      });\n    }\n  }, {\n    key: \"opacityGradient\",\n    value: function opacityGradient() {\n      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n    }\n  }]);\n\n  return PDFRadialGradient;\n}(PDFGradient);\n\nvar Gradient = {\n  PDFGradient: PDFGradient,\n  PDFLinearGradient: PDFLinearGradient,\n  PDFRadialGradient: PDFRadialGradient\n};\n\nvar PDFGradient$1 = Gradient.PDFGradient,\n    PDFLinearGradient$1 = Gradient.PDFLinearGradient,\n    PDFRadialGradient$1 = Gradient.PDFRadialGradient;\nvar ColorMixin = {\n  initColor: function initColor() {\n    // The opacity dictionaries\n    this._opacityRegistry = {};\n    this._opacityCount = 0;\n    return this._gradCount = 0;\n  },\n  _normalizeColor: function _normalizeColor(color) {\n    if (color instanceof PDFGradient$1) {\n      return color;\n    }\n\n    if (typeof color === 'string') {\n      if (color.charAt(0) === '#') {\n        if (color.length === 4) {\n          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');\n        }\n\n        var hex = parseInt(color.slice(1), 16);\n        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];\n      } else if (namedColors[color]) {\n        color = namedColors[color];\n      }\n    }\n\n    if (Array.isArray(color)) {\n      // RGB\n      if (color.length === 3) {\n        color = color.map(function (part) {\n          return part / 255;\n        }); // CMYK\n      } else if (color.length === 4) {\n        color = color.map(function (part) {\n          return part / 100;\n        });\n      }\n\n      return color;\n    }\n\n    return null;\n  },\n  _setColor: function _setColor(color, stroke) {\n    color = this._normalizeColor(color);\n\n    if (!color) {\n      return false;\n    }\n\n    var op = stroke ? 'SCN' : 'scn';\n\n    if (color instanceof PDFGradient$1) {\n      this._setColorSpace('Pattern', stroke);\n\n      color.apply(op);\n    } else {\n      var space = color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';\n\n      this._setColorSpace(space, stroke);\n\n      color = color.join(' ');\n      this.addContent(\"\".concat(color, \" \").concat(op));\n    }\n\n    return true;\n  },\n  _setColorSpace: function _setColorSpace(space, stroke) {\n    var op = stroke ? 'CS' : 'cs';\n    return this.addContent(\"/\".concat(space, \" \").concat(op));\n  },\n  fillColor: function fillColor(color, opacity) {\n    var set = this._setColor(color, false);\n\n    if (set) {\n      this.fillOpacity(opacity);\n    } // save this for text wrapper, which needs to reset\n    // the fill color on new pages\n\n\n    this._fillColor = [color, opacity];\n    return this;\n  },\n  strokeColor: function strokeColor(color, opacity) {\n    var set = this._setColor(color, true);\n\n    if (set) {\n      this.strokeOpacity(opacity);\n    }\n\n    return this;\n  },\n  opacity: function opacity(_opacity) {\n    this._doOpacity(_opacity, _opacity);\n\n    return this;\n  },\n  fillOpacity: function fillOpacity(opacity) {\n    this._doOpacity(opacity, null);\n\n    return this;\n  },\n  strokeOpacity: function strokeOpacity(opacity) {\n    this._doOpacity(null, opacity);\n\n    return this;\n  },\n  _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {\n    var dictionary, name;\n\n    if (fillOpacity == null && strokeOpacity == null) {\n      return;\n    }\n\n    if (fillOpacity != null) {\n      fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n    }\n\n    if (strokeOpacity != null) {\n      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n    }\n\n    var key = \"\".concat(fillOpacity, \"_\").concat(strokeOpacity);\n\n    if (this._opacityRegistry[key]) {\n      var _this$_opacityRegistr = _slicedToArray(this._opacityRegistry[key], 2);\n\n      dictionary = _this$_opacityRegistr[0];\n      name = _this$_opacityRegistr[1];\n    } else {\n      dictionary = {\n        Type: 'ExtGState'\n      };\n\n      if (fillOpacity != null) {\n        dictionary.ca = fillOpacity;\n      }\n\n      if (strokeOpacity != null) {\n        dictionary.CA = strokeOpacity;\n      }\n\n      dictionary = this.ref(dictionary);\n      dictionary.end();\n      var id = ++this._opacityCount;\n      name = \"Gs\".concat(id);\n      this._opacityRegistry[key] = [dictionary, name];\n    }\n\n    this.page.ext_gstates[name] = dictionary;\n    return this.addContent(\"/\".concat(name, \" gs\"));\n  },\n  linearGradient: function linearGradient(x1, y1, x2, y2) {\n    return new PDFLinearGradient$1(this, x1, y1, x2, y2);\n  },\n  radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {\n    return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);\n  }\n};\nvar namedColors = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\nvar cx, cy, px, py, sx, sy;\ncx = cy = px = py = sx = sy = 0;\nvar parameters = {\n  A: 7,\n  a: 7,\n  C: 6,\n  c: 6,\n  H: 1,\n  h: 1,\n  L: 2,\n  l: 2,\n  M: 2,\n  m: 2,\n  Q: 4,\n  q: 4,\n  S: 4,\n  s: 4,\n  T: 2,\n  t: 2,\n  V: 1,\n  v: 1,\n  Z: 0,\n  z: 0\n};\n\nvar parse = function parse(path) {\n  var cmd;\n  var ret = [];\n  var args = [];\n  var curArg = '';\n  var foundDecimal = false;\n  var params = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var c = _step.value;\n\n      if (parameters[c] != null) {\n        params = parameters[c];\n\n        if (cmd) {\n          // save existing command\n          if (curArg.length > 0) {\n            args[args.length] = +curArg;\n          }\n\n          ret[ret.length] = {\n            cmd: cmd,\n            args: args\n          };\n          args = [];\n          curArg = '';\n          foundDecimal = false;\n        }\n\n        cmd = c;\n      } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {\n        if (curArg.length === 0) {\n          continue;\n        }\n\n        if (args.length === params) {\n          // handle reused commands\n          ret[ret.length] = {\n            cmd: cmd,\n            args: args\n          };\n          args = [+curArg]; // handle assumed commands\n\n          if (cmd === 'M') {\n            cmd = 'L';\n          }\n\n          if (cmd === 'm') {\n            cmd = 'l';\n          }\n        } else {\n          args[args.length] = +curArg;\n        }\n\n        foundDecimal = c === '.'; // fix for negative numbers or repeated decimals with no delimeter between commands\n\n        curArg = ['-', '.'].includes(c) ? c : '';\n      } else {\n        curArg += c;\n\n        if (c === '.') {\n          foundDecimal = true;\n        }\n      }\n    } // add the last command\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (curArg.length > 0) {\n    if (args.length === params) {\n      // handle reused commands\n      ret[ret.length] = {\n        cmd: cmd,\n        args: args\n      };\n      args = [+curArg]; // handle assumed commands\n\n      if (cmd === 'M') {\n        cmd = 'L';\n      }\n\n      if (cmd === 'm') {\n        cmd = 'l';\n      }\n    } else {\n      args[args.length] = +curArg;\n    }\n  }\n\n  ret[ret.length] = {\n    cmd: cmd,\n    args: args\n  };\n  return ret;\n};\n\nvar _apply = function apply(commands, doc) {\n  // current point, control point, and subpath starting point\n  cx = cy = px = py = sx = sy = 0; // run the commands\n\n  for (var i = 0; i < commands.length; i++) {\n    var c = commands[i];\n\n    if (typeof runners[c.cmd] === 'function') {\n      runners[c.cmd](doc, c.args);\n    }\n  }\n};\n\nvar runners = {\n  M: function M(doc, a) {\n    cx = a[0];\n    cy = a[1];\n    px = py = null;\n    sx = cx;\n    sy = cy;\n    return doc.moveTo(cx, cy);\n  },\n  m: function m(doc, a) {\n    cx += a[0];\n    cy += a[1];\n    px = py = null;\n    sx = cx;\n    sy = cy;\n    return doc.moveTo(cx, cy);\n  },\n  C: function C(doc, a) {\n    cx = a[4];\n    cy = a[5];\n    px = a[2];\n    py = a[3];\n    return doc.bezierCurveTo.apply(doc, _toConsumableArray(a || []));\n  },\n  c: function c(doc, a) {\n    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n    px = cx + a[2];\n    py = cy + a[3];\n    cx += a[4];\n    return cy += a[5];\n  },\n  S: function S(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    }\n\n    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n    px = a[0];\n    py = a[1];\n    cx = a[2];\n    return cy = a[3];\n  },\n  s: function s(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    }\n\n    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n    px = cx + a[0];\n    py = cy + a[1];\n    cx += a[2];\n    return cy += a[3];\n  },\n  Q: function Q(doc, a) {\n    px = a[0];\n    py = a[1];\n    cx = a[2];\n    cy = a[3];\n    return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n  },\n  q: function q(doc, a) {\n    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n    px = cx + a[0];\n    py = cy + a[1];\n    cx += a[2];\n    return cy += a[3];\n  },\n  T: function T(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    } else {\n      px = cx - (px - cx);\n      py = cy - (py - cy);\n    }\n\n    doc.quadraticCurveTo(px, py, a[0], a[1]);\n    px = cx - (px - cx);\n    py = cy - (py - cy);\n    cx = a[0];\n    return cy = a[1];\n  },\n  t: function t(doc, a) {\n    if (px === null) {\n      px = cx;\n      py = cy;\n    } else {\n      px = cx - (px - cx);\n      py = cy - (py - cy);\n    }\n\n    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n    cx += a[0];\n    return cy += a[1];\n  },\n  A: function A(doc, a) {\n    solveArc(doc, cx, cy, a);\n    cx = a[5];\n    return cy = a[6];\n  },\n  a: function a(doc, _a) {\n    _a[5] += cx;\n    _a[6] += cy;\n    solveArc(doc, cx, cy, _a);\n    cx = _a[5];\n    return cy = _a[6];\n  },\n  L: function L(doc, a) {\n    cx = a[0];\n    cy = a[1];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  l: function l(doc, a) {\n    cx += a[0];\n    cy += a[1];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  H: function H(doc, a) {\n    cx = a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  h: function h(doc, a) {\n    cx += a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  V: function V(doc, a) {\n    cy = a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  v: function v(doc, a) {\n    cy += a[0];\n    px = py = null;\n    return doc.lineTo(cx, cy);\n  },\n  Z: function Z(doc) {\n    doc.closePath();\n    cx = sx;\n    return cy = sy;\n  },\n  z: function z(doc) {\n    doc.closePath();\n    cx = sx;\n    return cy = sy;\n  }\n};\n\nvar solveArc = function solveArc(doc, x, y, coords) {\n  var _coords = _slicedToArray(coords, 7),\n      rx = _coords[0],\n      ry = _coords[1],\n      rot = _coords[2],\n      large = _coords[3],\n      sweep = _coords[4],\n      ex = _coords[5],\n      ey = _coords[6];\n\n  var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = segs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var seg = _step2.value;\n      var bez = segmentToBezier.apply(void 0, _toConsumableArray(seg || []));\n      doc.bezierCurveTo.apply(doc, _toConsumableArray(bez || []));\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}; // from Inkscape svgtopdf, thanks!\n\n\nvar arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n  var th = rotateX * (Math.PI / 180);\n  var sin_th = Math.sin(th);\n  var cos_th = Math.cos(th);\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n  py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n  var pl = px * px / (rx * rx) + py * py / (ry * ry);\n\n  if (pl > 1) {\n    pl = Math.sqrt(pl);\n    rx *= pl;\n    ry *= pl;\n  }\n\n  var a00 = cos_th / rx;\n  var a01 = sin_th / rx;\n  var a10 = -sin_th / ry;\n  var a11 = cos_th / ry;\n  var x0 = a00 * ox + a01 * oy;\n  var y0 = a10 * ox + a11 * oy;\n  var x1 = a00 * x + a01 * y;\n  var y1 = a10 * x + a11 * y;\n  var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n  var sfactor_sq = 1 / d - 0.25;\n\n  if (sfactor_sq < 0) {\n    sfactor_sq = 0;\n  }\n\n  var sfactor = Math.sqrt(sfactor_sq);\n\n  if (sweep === large) {\n    sfactor = -sfactor;\n  }\n\n  var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n  var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n  var th0 = Math.atan2(y0 - yc, x0 - xc);\n  var th1 = Math.atan2(y1 - yc, x1 - xc);\n  var th_arc = th1 - th0;\n\n  if (th_arc < 0 && sweep === 1) {\n    th_arc += 2 * Math.PI;\n  } else if (th_arc > 0 && sweep === 0) {\n    th_arc -= 2 * Math.PI;\n  }\n\n  var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n  var result = [];\n\n  for (var i = 0; i < segments; i++) {\n    var th2 = th0 + i * th_arc / segments;\n    var th3 = th0 + (i + 1) * th_arc / segments;\n    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n  }\n\n  return result;\n};\n\nvar segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n  var a00 = cos_th * rx;\n  var a01 = -sin_th * ry;\n  var a10 = sin_th * rx;\n  var a11 = cos_th * ry;\n  var th_half = 0.5 * (th1 - th0);\n  var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n  var x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n  var y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n  var x3 = cx + Math.cos(th1);\n  var y3 = cy + Math.sin(th1);\n  var x2 = x3 + t * Math.sin(th1);\n  var y2 = y3 - t * Math.cos(th1);\n  return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];\n};\n\nvar SVGPath =\n/*#__PURE__*/\nfunction () {\n  function SVGPath() {\n    _classCallCheck(this, SVGPath);\n  }\n\n  _createClass(SVGPath, null, [{\n    key: \"apply\",\n    value: function apply(doc, path) {\n      var commands = parse(path);\n\n      _apply(commands, doc);\n    }\n  }]);\n\n  return SVGPath;\n}();\n\nvar number$1 = PDFObject.number; // This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\n\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar VectorMixin = {\n  initVector: function initVector() {\n    this._ctm = [1, 0, 0, 1, 0, 0]; // current transformation matrix\n\n    return this._ctmStack = [];\n  },\n  save: function save() {\n    this._ctmStack.push(this._ctm.slice()); // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n\n\n    return this.addContent('q');\n  },\n  restore: function restore() {\n    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];\n    return this.addContent('Q');\n  },\n  closePath: function closePath() {\n    return this.addContent('h');\n  },\n  lineWidth: function lineWidth(w) {\n    return this.addContent(\"\".concat(number$1(w), \" w\"));\n  },\n  _CAP_STYLES: {\n    BUTT: 0,\n    ROUND: 1,\n    SQUARE: 2\n  },\n  lineCap: function lineCap(c) {\n    if (typeof c === 'string') {\n      c = this._CAP_STYLES[c.toUpperCase()];\n    }\n\n    return this.addContent(\"\".concat(c, \" J\"));\n  },\n  _JOIN_STYLES: {\n    MITER: 0,\n    ROUND: 1,\n    BEVEL: 2\n  },\n  lineJoin: function lineJoin(j) {\n    if (typeof j === 'string') {\n      j = this._JOIN_STYLES[j.toUpperCase()];\n    }\n\n    return this.addContent(\"\".concat(j, \" j\"));\n  },\n  miterLimit: function miterLimit(m) {\n    return this.addContent(\"\".concat(number$1(m), \" M\"));\n  },\n  dash: function dash(length) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var originalLength = length;\n\n    if (!Array.isArray(length)) {\n      length = [length, options.space || length];\n    }\n\n    var valid = length.every(function (x) {\n      return Number.isFinite(x) && x > 0;\n    });\n\n    if (!valid) {\n      throw new Error(\"dash(\".concat(JSON.stringify(originalLength), \", \").concat(JSON.stringify(options), \") invalid, lengths must be numeric and greater than zero\"));\n    }\n\n    length = length.map(number$1).join(' ');\n    return this.addContent(\"[\".concat(length, \"] \").concat(number$1(options.phase || 0), \" d\"));\n  },\n  undash: function undash() {\n    return this.addContent('[] 0 d');\n  },\n  moveTo: function moveTo(x, y) {\n    return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" m\"));\n  },\n  lineTo: function lineTo(x, y) {\n    return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" l\"));\n  },\n  bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.addContent(\"\".concat(number$1(cp1x), \" \").concat(number$1(cp1y), \" \").concat(number$1(cp2x), \" \").concat(number$1(cp2y), \" \").concat(number$1(x), \" \").concat(number$1(y), \" c\"));\n  },\n  quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {\n    return this.addContent(\"\".concat(number$1(cpx), \" \").concat(number$1(cpy), \" \").concat(number$1(x), \" \").concat(number$1(y), \" v\"));\n  },\n  rect: function rect(x, y, w, h) {\n    return this.addContent(\"\".concat(number$1(x), \" \").concat(number$1(y), \" \").concat(number$1(w), \" \").concat(number$1(h), \" re\"));\n  },\n  roundedRect: function roundedRect(x, y, w, h, r) {\n    if (r == null) {\n      r = 0;\n    }\n\n    r = Math.min(r, 0.5 * w, 0.5 * h); // amount to inset control points from corners (see `ellipse`)\n\n    var c = r * (1.0 - KAPPA);\n    this.moveTo(x + r, y);\n    this.lineTo(x + w - r, y);\n    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n    this.lineTo(x + w, y + h - r);\n    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n    this.lineTo(x + r, y + h);\n    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n    this.lineTo(x, y + r);\n    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n    return this.closePath();\n  },\n  ellipse: function ellipse(x, y, r1, r2) {\n    // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n    if (r2 == null) {\n      r2 = r1;\n    }\n\n    x -= r1;\n    y -= r2;\n    var ox = r1 * KAPPA;\n    var oy = r2 * KAPPA;\n    var xe = x + r1 * 2;\n    var ye = y + r2 * 2;\n    var xm = x + r1;\n    var ym = y + r2;\n    this.moveTo(x, ym);\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    return this.closePath();\n  },\n  circle: function circle(x, y, radius) {\n    return this.ellipse(x, y, radius);\n  },\n  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    if (anticlockwise == null) {\n      anticlockwise = false;\n    }\n\n    var TWO_PI = 2.0 * Math.PI;\n    var HALF_PI = 0.5 * Math.PI;\n    var deltaAng = endAngle - startAngle;\n\n    if (Math.abs(deltaAng) > TWO_PI) {\n      // draw only full circle if more than that is specified\n      deltaAng = TWO_PI;\n    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n      // necessary to flip direction of rendering\n      var dir = anticlockwise ? -1 : 1;\n      deltaAng = dir * TWO_PI + deltaAng;\n    }\n\n    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n    var segAng = deltaAng / numSegs;\n    var handleLen = segAng / HALF_PI * KAPPA * radius;\n    var curAng = startAngle; // component distances between anchor point and control point\n\n    var deltaCx = -Math.sin(curAng) * handleLen;\n    var deltaCy = Math.cos(curAng) * handleLen; // anchor point\n\n    var ax = x + Math.cos(curAng) * radius;\n    var ay = y + Math.sin(curAng) * radius; // calculate and render segments\n\n    this.moveTo(ax, ay);\n\n    for (var segIdx = 0; segIdx < numSegs; segIdx++) {\n      // starting control point\n      var cp1x = ax + deltaCx;\n      var cp1y = ay + deltaCy; // step angle\n\n      curAng += segAng; // next anchor point\n\n      ax = x + Math.cos(curAng) * radius;\n      ay = y + Math.sin(curAng) * radius; // next control point delta\n\n      deltaCx = -Math.sin(curAng) * handleLen;\n      deltaCy = Math.cos(curAng) * handleLen; // ending control point\n\n      var cp2x = ax - deltaCx;\n      var cp2y = ay - deltaCy; // render segment\n\n      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n    }\n\n    return this;\n  },\n  polygon: function polygon() {\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n\n    this.moveTo.apply(this, _toConsumableArray(points.shift() || []));\n\n    for (var _i = 0, _points = points; _i < _points.length; _i++) {\n      var point = _points[_i];\n      this.lineTo.apply(this, _toConsumableArray(point || []));\n    }\n\n    return this.closePath();\n  },\n  path: function path(_path) {\n    SVGPath.apply(this, _path);\n    return this;\n  },\n  _windingRule: function _windingRule(rule) {\n    if (/even-?odd/.test(rule)) {\n      return '*';\n    }\n\n    return '';\n  },\n  fill: function fill(color, rule) {\n    if (/(even-?odd)|(non-?zero)/.test(color)) {\n      rule = color;\n      color = null;\n    }\n\n    if (color) {\n      this.fillColor(color);\n    }\n\n    return this.addContent(\"f\".concat(this._windingRule(rule)));\n  },\n  stroke: function stroke(color) {\n    if (color) {\n      this.strokeColor(color);\n    }\n\n    return this.addContent('S');\n  },\n  fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {\n    if (strokeColor == null) {\n      strokeColor = fillColor;\n    }\n\n    var isFillRule = /(even-?odd)|(non-?zero)/;\n\n    if (isFillRule.test(fillColor)) {\n      rule = fillColor;\n      fillColor = null;\n    }\n\n    if (isFillRule.test(strokeColor)) {\n      rule = strokeColor;\n      strokeColor = fillColor;\n    }\n\n    if (fillColor) {\n      this.fillColor(fillColor);\n      this.strokeColor(strokeColor);\n    }\n\n    return this.addContent(\"B\".concat(this._windingRule(rule)));\n  },\n  clip: function clip(rule) {\n    return this.addContent(\"W\".concat(this._windingRule(rule), \" n\"));\n  },\n  transform: function transform(m11, m12, m21, m22, dx, dy) {\n    // keep track of the current transformation matrix\n    var m = this._ctm;\n\n    var _m = _slicedToArray(m, 6),\n        m0 = _m[0],\n        m1 = _m[1],\n        m2 = _m[2],\n        m3 = _m[3],\n        m4 = _m[4],\n        m5 = _m[5];\n\n    m[0] = m0 * m11 + m2 * m12;\n    m[1] = m1 * m11 + m3 * m12;\n    m[2] = m0 * m21 + m2 * m22;\n    m[3] = m1 * m21 + m3 * m22;\n    m[4] = m0 * dx + m2 * dy + m4;\n    m[5] = m1 * dx + m3 * dy + m5;\n    var values = [m11, m12, m21, m22, dx, dy].map(function (v) {\n      return number$1(v);\n    }).join(' ');\n    return this.addContent(\"\".concat(values, \" cm\"));\n  },\n  translate: function translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  },\n  rotate: function rotate(angle) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var y;\n    var rad = angle * Math.PI / 180;\n    var cos = Math.cos(rad);\n    var sin = Math.sin(rad);\n    var x = y = 0;\n\n    if (options.origin != null) {\n      var _options$origin = _slicedToArray(options.origin, 2);\n\n      x = _options$origin[0];\n      y = _options$origin[1];\n      var x1 = x * cos - y * sin;\n      var y1 = x * sin + y * cos;\n      x -= x1;\n      y -= y1;\n    }\n\n    return this.transform(cos, sin, -sin, cos, x, y);\n  },\n  scale: function scale(xFactor, yFactor) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var y;\n\n    if (yFactor == null) {\n      yFactor = xFactor;\n    }\n\n    if (typeof yFactor === 'object') {\n      options = yFactor;\n      yFactor = xFactor;\n    }\n\n    var x = y = 0;\n\n    if (options.origin != null) {\n      var _options$origin2 = _slicedToArray(options.origin, 2);\n\n      x = _options$origin2[0];\n      y = _options$origin2[1];\n      x -= xFactor * x;\n      y -= yFactor * y;\n    }\n\n    return this.transform(xFactor, 0, 0, yFactor, x, y);\n  }\n};\n\nvar WIN_ANSI_MAP = {\n  402: 131,\n  8211: 150,\n  8212: 151,\n  8216: 145,\n  8217: 146,\n  8218: 130,\n  8220: 147,\n  8221: 148,\n  8222: 132,\n  8224: 134,\n  8225: 135,\n  8226: 149,\n  8230: 133,\n  8364: 128,\n  8240: 137,\n  8249: 139,\n  8250: 155,\n  710: 136,\n  8482: 153,\n  338: 140,\n  339: 156,\n  732: 152,\n  352: 138,\n  353: 154,\n  376: 159,\n  381: 142,\n  382: 158\n};\nvar characters = \".notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n  \\nspace         exclam         quotedbl       numbersign\\ndollar        percent        ampersand      quotesingle\\nparenleft     parenright     asterisk       plus\\ncomma         hyphen         period         slash\\nzero          one            two            three\\nfour          five           six            seven\\neight         nine           colon          semicolon\\nless          equal          greater        question\\n  \\nat            A              B              C\\nD             E              F              G\\nH             I              J              K\\nL             M              N              O\\nP             Q              R              S\\nT             U              V              W\\nX             Y              Z              bracketleft\\nbackslash     bracketright   asciicircum    underscore\\n  \\ngrave         a              b              c\\nd             e              f              g\\nh             i              j              k\\nl             m              n              o\\np             q              r              s\\nt             u              v              w\\nx             y              z              braceleft\\nbar           braceright     asciitilde     .notdef\\n  \\nEuro          .notdef        quotesinglbase florin\\nquotedblbase  ellipsis       dagger         daggerdbl\\ncircumflex    perthousand    Scaron         guilsinglleft\\nOE            .notdef        Zcaron         .notdef\\n.notdef       quoteleft      quoteright     quotedblleft\\nquotedblright bullet         endash         emdash\\ntilde         trademark      scaron         guilsinglright\\noe            .notdef        zcaron         ydieresis\\n  \\nspace         exclamdown     cent           sterling\\ncurrency      yen            brokenbar      section\\ndieresis      copyright      ordfeminine    guillemotleft\\nlogicalnot    hyphen         registered     macron\\ndegree        plusminus      twosuperior    threesuperior\\nacute         mu             paragraph      periodcentered\\ncedilla       onesuperior    ordmasculine   guillemotright\\nonequarter    onehalf        threequarters  questiondown\\n  \\nAgrave        Aacute         Acircumflex    Atilde\\nAdieresis     Aring          AE             Ccedilla\\nEgrave        Eacute         Ecircumflex    Edieresis\\nIgrave        Iacute         Icircumflex    Idieresis\\nEth           Ntilde         Ograve         Oacute\\nOcircumflex   Otilde         Odieresis      multiply\\nOslash        Ugrave         Uacute         Ucircumflex\\nUdieresis     Yacute         Thorn          germandbls\\n  \\nagrave        aacute         acircumflex    atilde\\nadieresis     aring          ae             ccedilla\\negrave        eacute         ecircumflex    edieresis\\nigrave        iacute         icircumflex    idieresis\\neth           ntilde         ograve         oacute\\nocircumflex   otilde         odieresis      divide\\noslash        ugrave         uacute         ucircumflex\\nudieresis     yacute         thorn          ydieresis\".split(/\\s+/);\n\nvar AFMFont =\n/*#__PURE__*/\nfunction () {\n  _createClass(AFMFont, null, [{\n    key: \"open\",\n    value: function open(filename) {\n      return new AFMFont(fs.readFileSync(filename, 'utf8'));\n    }\n  }]);\n\n  function AFMFont(contents) {\n    _classCallCheck(this, AFMFont);\n\n    this.contents = contents;\n    this.attributes = {};\n    this.glyphWidths = {};\n    this.boundingBoxes = {};\n    this.kernPairs = {};\n    this.parse(); // todo: remove charWidths since appears to not be used\n\n    this.charWidths = new Array(256);\n\n    for (var char = 0; char <= 255; char++) {\n      this.charWidths[char] = this.glyphWidths[characters[char]];\n    }\n\n    this.bbox = this.attributes['FontBBox'].split(/\\s+/).map(function (e) {\n      return +e;\n    });\n    this.ascender = +(this.attributes['Ascender'] || 0);\n    this.descender = +(this.attributes['Descender'] || 0);\n    this.xHeight = +(this.attributes['XHeight'] || 0);\n    this.capHeight = +(this.attributes['CapHeight'] || 0);\n    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n  }\n\n  _createClass(AFMFont, [{\n    key: \"parse\",\n    value: function parse() {\n      var section = '';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.contents.split('\\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var line = _step.value;\n          var match;\n          var a;\n\n          if (match = line.match(/^Start(\\w+)/)) {\n            section = match[1];\n            continue;\n          } else if (match = line.match(/^End(\\w+)/)) {\n            section = '';\n            continue;\n          }\n\n          switch (section) {\n            case 'FontMetrics':\n              match = line.match(/(^\\w+)\\s+(.*)/);\n              var key = match[1];\n              var value = match[2];\n\n              if (a = this.attributes[key]) {\n                if (!Array.isArray(a)) {\n                  a = this.attributes[key] = [a];\n                }\n\n                a.push(value);\n              } else {\n                this.attributes[key] = value;\n              }\n\n              break;\n\n            case 'CharMetrics':\n              if (!/^CH?\\s/.test(line)) {\n                continue;\n              }\n\n              var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n              this.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n              break;\n\n            case 'KernPairs':\n              match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n\n              if (match) {\n                this.kernPairs[match[1] + '\\0' + match[2]] = parseInt(match[3]);\n              }\n\n              break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"encodeText\",\n    value: function encodeText(text) {\n      var res = [];\n\n      for (var i = 0, len = text.length; i < len; i++) {\n        var char = text.charCodeAt(i);\n        char = WIN_ANSI_MAP[char] || char;\n        res.push(char.toString(16));\n      }\n\n      return res;\n    }\n  }, {\n    key: \"glyphsForString\",\n    value: function glyphsForString(string) {\n      var glyphs = [];\n\n      for (var i = 0, len = string.length; i < len; i++) {\n        var charCode = string.charCodeAt(i);\n        glyphs.push(this.characterToGlyph(charCode));\n      }\n\n      return glyphs;\n    }\n  }, {\n    key: \"characterToGlyph\",\n    value: function characterToGlyph(character) {\n      return characters[WIN_ANSI_MAP[character] || character] || '.notdef';\n    }\n  }, {\n    key: \"widthOfGlyph\",\n    value: function widthOfGlyph(glyph) {\n      return this.glyphWidths[glyph] || 0;\n    }\n  }, {\n    key: \"getKernPair\",\n    value: function getKernPair(left, right) {\n      return this.kernPairs[left + '\\0' + right] || 0;\n    }\n  }, {\n    key: \"advancesForGlyphs\",\n    value: function advancesForGlyphs(glyphs) {\n      var advances = [];\n\n      for (var index = 0; index < glyphs.length; index++) {\n        var left = glyphs[index];\n        var right = glyphs[index + 1];\n        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n      }\n\n      return advances;\n    }\n  }]);\n\n  return AFMFont;\n}();\n\nvar PDFFont =\n/*#__PURE__*/\nfunction () {\n  function PDFFont() {\n    _classCallCheck(this, PDFFont);\n  }\n\n  _createClass(PDFFont, [{\n    key: \"encode\",\n    value: function encode() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: \"widthOfString\",\n    value: function widthOfString() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.embedded || this.dictionary == null) {\n        return;\n      }\n\n      this.embed();\n      return this.embedded = true;\n    }\n  }, {\n    key: \"embed\",\n    value: function embed() {\n      throw new Error('Must be implemented by subclasses');\n    }\n  }, {\n    key: \"lineHeight\",\n    value: function lineHeight(size, includeGap) {\n      if (includeGap == null) {\n        includeGap = false;\n      }\n\n      var gap = includeGap ? this.lineGap : 0;\n      return (this.ascender + gap - this.descender) / 1000 * size;\n    }\n  }]);\n\n  return PDFFont;\n}();\n\nvar STANDARD_FONTS = {\n  Courier: function Courier() {\n    return fs.readFileSync(__dirname + '/data/Courier.afm', 'utf8');\n  },\n  'Courier-Bold': function CourierBold() {\n    return fs.readFileSync(__dirname + '/data/Courier-Bold.afm', 'utf8');\n  },\n  'Courier-Oblique': function CourierOblique() {\n    return fs.readFileSync(__dirname + '/data/Courier-Oblique.afm', 'utf8');\n  },\n  'Courier-BoldOblique': function CourierBoldOblique() {\n    return fs.readFileSync(__dirname + '/data/Courier-BoldOblique.afm', 'utf8');\n  },\n  Helvetica: function Helvetica() {\n    return fs.readFileSync(__dirname + '/data/Helvetica.afm', 'utf8');\n  },\n  'Helvetica-Bold': function HelveticaBold() {\n    return fs.readFileSync(__dirname + '/data/Helvetica-Bold.afm', 'utf8');\n  },\n  'Helvetica-Oblique': function HelveticaOblique() {\n    return fs.readFileSync(__dirname + '/data/Helvetica-Oblique.afm', 'utf8');\n  },\n  'Helvetica-BoldOblique': function HelveticaBoldOblique() {\n    return fs.readFileSync(__dirname + '/data/Helvetica-BoldOblique.afm', 'utf8');\n  },\n  'Times-Roman': function TimesRoman() {\n    return fs.readFileSync(__dirname + '/data/Times-Roman.afm', 'utf8');\n  },\n  'Times-Bold': function TimesBold() {\n    return fs.readFileSync(__dirname + '/data/Times-Bold.afm', 'utf8');\n  },\n  'Times-Italic': function TimesItalic() {\n    return fs.readFileSync(__dirname + '/data/Times-Italic.afm', 'utf8');\n  },\n  'Times-BoldItalic': function TimesBoldItalic() {\n    return fs.readFileSync(__dirname + '/data/Times-BoldItalic.afm', 'utf8');\n  },\n  Symbol: function Symbol() {\n    return fs.readFileSync(__dirname + '/data/Symbol.afm', 'utf8');\n  },\n  ZapfDingbats: function ZapfDingbats() {\n    return fs.readFileSync(__dirname + '/data/ZapfDingbats.afm', 'utf8');\n  }\n};\n\nvar StandardFont =\n/*#__PURE__*/\nfunction (_PDFFont) {\n  _inherits(StandardFont, _PDFFont);\n\n  function StandardFont(document, name, id) {\n    var _this;\n\n    _classCallCheck(this, StandardFont);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StandardFont).call(this));\n    _this.document = document;\n    _this.name = name;\n    _this.id = id;\n    _this.font = new AFMFont(STANDARD_FONTS[_this.name]());\n    var _this$font = _this.font;\n    _this.ascender = _this$font.ascender;\n    _this.descender = _this$font.descender;\n    _this.bbox = _this$font.bbox;\n    _this.lineGap = _this$font.lineGap;\n    _this.xHeight = _this$font.xHeight;\n    _this.capHeight = _this$font.capHeight;\n    return _this;\n  }\n\n  _createClass(StandardFont, [{\n    key: \"embed\",\n    value: function embed() {\n      this.dictionary.data = {\n        Type: 'Font',\n        BaseFont: this.name,\n        Subtype: 'Type1',\n        Encoding: 'WinAnsiEncoding'\n      };\n      return this.dictionary.end();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text) {\n      var encoded = this.font.encodeText(text);\n      var glyphs = this.font.glyphsForString(\"\".concat(text));\n      var advances = this.font.advancesForGlyphs(glyphs);\n      var positions = [];\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        positions.push({\n          xAdvance: advances[i],\n          yAdvance: 0,\n          xOffset: 0,\n          yOffset: 0,\n          advanceWidth: this.font.widthOfGlyph(glyph)\n        });\n      }\n\n      return [encoded, positions];\n    }\n  }, {\n    key: \"widthOfString\",\n    value: function widthOfString(string, size) {\n      var glyphs = this.font.glyphsForString(\"\".concat(string));\n      var advances = this.font.advancesForGlyphs(glyphs);\n      var width = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = advances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var advance = _step.value;\n          width += advance;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var scale = size / 1000;\n      return width * scale;\n    }\n  }], [{\n    key: \"isStandardFont\",\n    value: function isStandardFont(name) {\n      return name in STANDARD_FONTS;\n    }\n  }]);\n\n  return StandardFont;\n}(PDFFont);\n\nvar toHex = function toHex(num) {\n  return \"0000\".concat(num.toString(16)).slice(-4);\n};\n\nvar EmbeddedFont =\n/*#__PURE__*/\nfunction (_PDFFont) {\n  _inherits(EmbeddedFont, _PDFFont);\n\n  function EmbeddedFont(document, font, id) {\n    var _this;\n\n    _classCallCheck(this, EmbeddedFont);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmbeddedFont).call(this));\n    _this.document = document;\n    _this.font = font;\n    _this.id = id;\n    _this.subset = _this.font.createSubset();\n    _this.unicode = [[0]];\n    _this.widths = [_this.font.getGlyph(0).advanceWidth];\n    _this.name = _this.font.postscriptName;\n    _this.scale = 1000 / _this.font.unitsPerEm;\n    _this.ascender = _this.font.ascent * _this.scale;\n    _this.descender = _this.font.descent * _this.scale;\n    _this.xHeight = _this.font.xHeight * _this.scale;\n    _this.capHeight = _this.font.capHeight * _this.scale;\n    _this.lineGap = _this.font.lineGap * _this.scale;\n    _this.bbox = _this.font.bbox;\n\n    if (document.options.fontLayoutCache !== false) {\n      _this.layoutCache = Object.create(null);\n    }\n\n    return _this;\n  }\n\n  _createClass(EmbeddedFont, [{\n    key: \"layoutRun\",\n    value: function layoutRun(text, features) {\n      var run = this.font.layout(text, features); // Normalize position values\n\n      for (var i = 0; i < run.positions.length; i++) {\n        var position = run.positions[i];\n\n        for (var key in position) {\n          position[key] *= this.scale;\n        }\n\n        position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n      }\n\n      return run;\n    }\n  }, {\n    key: \"layoutCached\",\n    value: function layoutCached(text) {\n      if (!this.layoutCache) {\n        return this.layoutRun(text);\n      }\n\n      var cached;\n\n      if (cached = this.layoutCache[text]) {\n        return cached;\n      }\n\n      var run = this.layoutRun(text);\n      this.layoutCache[text] = run;\n      return run;\n    }\n  }, {\n    key: \"layout\",\n    value: function layout(text, features, onlyWidth) {\n      // Skip the cache if any user defined features are applied\n      if (features) {\n        return this.layoutRun(text, features);\n      }\n\n      var glyphs = onlyWidth ? null : [];\n      var positions = onlyWidth ? null : [];\n      var advanceWidth = 0; // Split the string by words to increase cache efficiency.\n      // For this purpose, spaces and tabs are a good enough delimeter.\n\n      var last = 0;\n      var index = 0;\n\n      while (index <= text.length) {\n        var needle;\n\n        if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\\t'].includes(needle))) {\n          var run = this.layoutCached(text.slice(last, ++index));\n\n          if (!onlyWidth) {\n            glyphs = glyphs.concat(run.glyphs);\n            positions = positions.concat(run.positions);\n          }\n\n          advanceWidth += run.advanceWidth;\n          last = index;\n        } else {\n          index++;\n        }\n      }\n\n      return {\n        glyphs: glyphs,\n        positions: positions,\n        advanceWidth: advanceWidth\n      };\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, features) {\n      var _this$layout = this.layout(text, features),\n          glyphs = _this$layout.glyphs,\n          positions = _this$layout.positions;\n\n      var res = [];\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        var gid = this.subset.includeGlyph(glyph.id);\n        res.push(\"0000\".concat(gid.toString(16)).slice(-4));\n\n        if (this.widths[gid] == null) {\n          this.widths[gid] = glyph.advanceWidth * this.scale;\n        }\n\n        if (this.unicode[gid] == null) {\n          this.unicode[gid] = glyph.codePoints;\n        }\n      }\n\n      return [res, positions];\n    }\n  }, {\n    key: \"widthOfString\",\n    value: function widthOfString(string, size, features) {\n      var width = this.layout(string, features, true).advanceWidth;\n      var scale = size / 1000;\n      return width * scale;\n    }\n  }, {\n    key: \"embed\",\n    value: function embed() {\n      var _this2 = this;\n\n      var isCFF = this.subset.cff != null;\n      var fontFile = this.document.ref();\n\n      if (isCFF) {\n        fontFile.data.Subtype = 'CIDFontType0C';\n      }\n\n      this.subset.encodeStream().on('data', function (data) {\n        return fontFile.write(data);\n      }).on('end', function () {\n        return fontFile.end();\n      });\n      var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;\n      var flags = 0;\n\n      if (this.font.post.isFixedPitch) {\n        flags |= 1 << 0;\n      }\n\n      if (1 <= familyClass && familyClass <= 7) {\n        flags |= 1 << 1;\n      }\n\n      flags |= 1 << 2; // assume the font uses non-latin characters\n\n      if (familyClass === 10) {\n        flags |= 1 << 3;\n      }\n\n      if (this.font.head.macStyle.italic) {\n        flags |= 1 << 6;\n      } // generate a tag (6 uppercase letters. 16 is the char code offset from '1' to 'A'. 74 will map to 'Z')\n\n\n      var tag = [1, 2, 3, 4, 5, 6].map(function (i) {\n        return String.fromCharCode((_this2.id.charCodeAt(i) || 74) + 16);\n      }).join('');\n      var name = tag + '+' + this.font.postscriptName;\n      var bbox = this.font.bbox;\n      var descriptor = this.document.ref({\n        Type: 'FontDescriptor',\n        FontName: name,\n        Flags: flags,\n        FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],\n        ItalicAngle: this.font.italicAngle,\n        Ascent: this.ascender,\n        Descent: this.descender,\n        CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n        XHeight: (this.font.xHeight || 0) * this.scale,\n        StemV: 0\n      }); // not sure how to calculate this\n\n      if (isCFF) {\n        descriptor.data.FontFile3 = fontFile;\n      } else {\n        descriptor.data.FontFile2 = fontFile;\n      }\n\n      descriptor.end();\n      var descendantFont = this.document.ref({\n        Type: 'Font',\n        Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',\n        BaseFont: name,\n        CIDSystemInfo: {\n          Registry: new String('Adobe'),\n          Ordering: new String('Identity'),\n          Supplement: 0\n        },\n        FontDescriptor: descriptor,\n        W: [0, this.widths]\n      });\n      descendantFont.end();\n      this.dictionary.data = {\n        Type: 'Font',\n        Subtype: 'Type0',\n        BaseFont: name,\n        Encoding: 'Identity-H',\n        DescendantFonts: [descendantFont],\n        ToUnicode: this.toUnicodeCmap()\n      };\n      return this.dictionary.end();\n    } // Maps the glyph ids encoded in the PDF back to unicode strings\n    // Because of ligature substitutions and the like, there may be one or more\n    // unicode characters represented by each glyph.\n\n  }, {\n    key: \"toUnicodeCmap\",\n    value: function toUnicodeCmap() {\n      var cmap = this.document.ref();\n      var entries = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.unicode[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var codePoints = _step.value;\n          var encoded = []; // encode codePoints to utf16\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = codePoints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var value = _step2.value;\n\n              if (value > 0xffff) {\n                value -= 0x10000;\n                encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n                value = 0xdc00 | value & 0x3ff;\n              }\n\n              encoded.push(toHex(value));\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          entries.push(\"<\".concat(encoded.join(' '), \">\"));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      cmap.end(\"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n1 beginbfrange\\n<0000> <\".concat(toHex(entries.length - 1), \"> [\").concat(entries.join(' '), \"]\\nendbfrange\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"));\n      return cmap;\n    }\n  }]);\n\n  return EmbeddedFont;\n}(PDFFont);\n\nvar PDFFontFactory =\n/*#__PURE__*/\nfunction () {\n  function PDFFontFactory() {\n    _classCallCheck(this, PDFFontFactory);\n  }\n\n  _createClass(PDFFontFactory, null, [{\n    key: \"open\",\n    value: function open(document, src, family, id) {\n      var font;\n\n      if (typeof src === 'string') {\n        if (StandardFont.isStandardFont(src)) {\n          return new StandardFont(document, src, id);\n        }\n\n        src = fs.readFileSync(src);\n      }\n\n      if (Buffer.isBuffer(src)) {\n        font = fontkit.create(src, family);\n      } else if (src instanceof Uint8Array) {\n        font = fontkit.create(new Buffer(src), family);\n      } else if (src instanceof ArrayBuffer) {\n        font = fontkit.create(new Buffer(new Uint8Array(src)), family);\n      }\n\n      if (font == null) {\n        throw new Error('Not a supported font format or standard PDF font.');\n      }\n\n      return new EmbeddedFont(document, font, id);\n    }\n  }]);\n\n  return PDFFontFactory;\n}();\n\nvar FontsMixin = {\n  initFonts: function initFonts() {\n    var defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Helvetica';\n    // Lookup table for embedded fonts\n    this._fontFamilies = {};\n    this._fontCount = 0; // Font state\n\n    this._fontSize = 12;\n    this._font = null;\n    this._registeredFonts = {}; // Set the default font\n\n    if (defaultFont) {\n      this.font(defaultFont);\n    }\n  },\n  font: function font(src, family, size) {\n    var cacheKey, font;\n\n    if (typeof family === 'number') {\n      size = family;\n      family = null;\n    } // check registered fonts if src is a string\n\n\n    if (typeof src === 'string' && this._registeredFonts[src]) {\n      cacheKey = src;\n      var _this$_registeredFont = this._registeredFonts[src];\n      src = _this$_registeredFont.src;\n      family = _this$_registeredFont.family;\n    } else {\n      cacheKey = family || src;\n\n      if (typeof cacheKey !== 'string') {\n        cacheKey = null;\n      }\n    }\n\n    if (size != null) {\n      this.fontSize(size);\n    } // fast path: check if the font is already in the PDF\n\n\n    if (font = this._fontFamilies[cacheKey]) {\n      this._font = font;\n      return this;\n    } // load the font\n\n\n    var id = \"F\".concat(++this._fontCount);\n    this._font = PDFFontFactory.open(this, src, family, id); // check for existing font familes with the same name already in the PDF\n    // useful if the font was passed as a buffer\n\n    if (font = this._fontFamilies[this._font.name]) {\n      this._font = font;\n      return this;\n    } // save the font for reuse later\n\n\n    if (cacheKey) {\n      this._fontFamilies[cacheKey] = this._font;\n    }\n\n    if (this._font.name) {\n      this._fontFamilies[this._font.name] = this._font;\n    }\n\n    return this;\n  },\n  fontSize: function fontSize(_fontSize) {\n    this._fontSize = _fontSize;\n    return this;\n  },\n  currentLineHeight: function currentLineHeight(includeGap) {\n    if (includeGap == null) {\n      includeGap = false;\n    }\n\n    return this._font.lineHeight(this._fontSize, includeGap);\n  },\n  registerFont: function registerFont(name, src, family) {\n    this._registeredFonts[name] = {\n      src: src,\n      family: family\n    };\n    return this;\n  }\n};\n\nvar LineWrapper =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(LineWrapper, _EventEmitter);\n\n  function LineWrapper(document, options) {\n    var _this;\n\n    _classCallCheck(this, LineWrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LineWrapper).call(this));\n    _this.document = document;\n    _this.indent = options.indent || 0;\n    _this.characterSpacing = options.characterSpacing || 0;\n    _this.wordSpacing = options.wordSpacing === 0;\n    _this.columns = options.columns || 1;\n    _this.columnGap = options.columnGap != null ? options.columnGap : 18; // 1/4 inch\n\n    _this.lineWidth = (options.width - _this.columnGap * (_this.columns - 1)) / _this.columns;\n    _this.spaceLeft = _this.lineWidth;\n    _this.startX = _this.document.x;\n    _this.startY = _this.document.y;\n    _this.column = 1;\n    _this.ellipsis = options.ellipsis;\n    _this.continuedX = 0;\n    _this.features = options.features; // calculate the maximum Y position the text can appear at\n\n    if (options.height != null) {\n      _this.height = options.height;\n      _this.maxY = _this.startY + options.height;\n    } else {\n      _this.maxY = _this.document.page.maxY();\n    } // handle paragraph indents\n\n\n    _this.on('firstLine', function (options) {\n      // if this is the first line of the text segment, and\n      // we're continuing where we left off, indent that much\n      // otherwise use the user specified indent option\n      var indent = _this.continuedX || _this.indent;\n      _this.document.x += indent;\n      _this.lineWidth -= indent;\n      return _this.once('line', function () {\n        _this.document.x -= indent;\n        _this.lineWidth += indent;\n\n        if (options.continued && !_this.continuedX) {\n          _this.continuedX = _this.indent;\n        }\n\n        if (!options.continued) {\n          return _this.continuedX = 0;\n        }\n      });\n    }); // handle left aligning last lines of paragraphs\n\n\n    _this.on('lastLine', function (options) {\n      var align = options.align;\n\n      if (align === 'justify') {\n        options.align = 'left';\n      }\n\n      _this.lastLine = true;\n      return _this.once('line', function () {\n        _this.document.y += options.paragraphGap || 0;\n        options.align = align;\n        return _this.lastLine = false;\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(LineWrapper, [{\n    key: \"wordWidth\",\n    value: function wordWidth(word) {\n      return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;\n    }\n  }, {\n    key: \"eachWord\",\n    value: function eachWord(text, fn) {\n      // setup a unicode line breaker\n      var bk;\n      var breaker = new LineBreaker(text);\n      var last = null;\n      var wordWidths = Object.create(null);\n\n      while (bk = breaker.nextBreak()) {\n        var shouldContinue;\n        var word = text.slice((last != null ? last.position : undefined) || 0, bk.position);\n        var w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word); // if the word is longer than the whole line, chop it up\n        // TODO: break by grapheme clusters, not JS string characters\n\n        if (w > this.lineWidth + this.continuedX) {\n          // make some fake break objects\n          var lbk = last;\n          var fbk = {};\n\n          while (word.length) {\n            // fit as much of the word as possible into the space we have\n            var l, mightGrow;\n\n            if (w > this.spaceLeft) {\n              // start our check at the end of our available space - this method is faster than a loop of each character and it resolves\n              // an issue with long loops when processing massive words, such as a huge number of spaces\n              l = Math.ceil(this.spaceLeft / (w / word.length));\n              w = this.wordWidth(word.slice(0, l));\n              mightGrow = w <= this.spaceLeft && l < word.length;\n            } else {\n              l = word.length;\n            }\n\n            var mustShrink = w > this.spaceLeft && l > 0; // shrink or grow word as necessary after our near-guess above\n\n            while (mustShrink || mightGrow) {\n              if (mustShrink) {\n                w = this.wordWidth(word.slice(0, --l));\n                mustShrink = w > this.spaceLeft && l > 0;\n              } else {\n                w = this.wordWidth(word.slice(0, ++l));\n                mustShrink = w > this.spaceLeft && l > 0;\n                mightGrow = w <= this.spaceLeft && l < word.length;\n              }\n            } // send a required break unless this is the last piece and a linebreak is not specified\n\n\n            fbk.required = bk.required || l < word.length;\n            shouldContinue = fn(word.slice(0, l), w, fbk, lbk);\n            lbk = {\n              required: false\n            }; // get the remaining piece of the word\n\n            word = word.slice(l);\n            w = this.wordWidth(word);\n\n            if (shouldContinue === false) {\n              break;\n            }\n          }\n        } else {\n          // otherwise just emit the break as it was given to us\n          shouldContinue = fn(word, w, bk, last);\n        }\n\n        if (shouldContinue === false) {\n          break;\n        }\n\n        last = bk;\n      }\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(text, options) {\n      var _this2 = this;\n\n      // override options from previous continued fragments\n      if (options.indent != null) {\n        this.indent = options.indent;\n      }\n\n      if (options.characterSpacing != null) {\n        this.characterSpacing = options.characterSpacing;\n      }\n\n      if (options.wordSpacing != null) {\n        this.wordSpacing = options.wordSpacing;\n      }\n\n      if (options.ellipsis != null) {\n        this.ellipsis = options.ellipsis;\n      } // make sure we're actually on the page\n      // and that the first line of is never by\n      // itself at the bottom of a page (orphans)\n\n\n      var nextY = this.document.y + this.document.currentLineHeight(true);\n\n      if (this.document.y > this.maxY || nextY > this.maxY) {\n        this.nextSection();\n      }\n\n      var buffer = '';\n      var textWidth = 0;\n      var wc = 0;\n      var lc = 0;\n      var y = this.document.y; // used to reset Y pos if options.continued (below)\n\n      var emitLine = function emitLine() {\n        options.textWidth = textWidth + _this2.wordSpacing * (wc - 1);\n        options.wordCount = wc;\n        options.lineWidth = _this2.lineWidth;\n        y = _this2.document.y;\n\n        _this2.emit('line', buffer, options, _this2);\n\n        return lc++;\n      };\n\n      this.emit('sectionStart', options, this);\n      this.eachWord(text, function (word, w, bk, last) {\n        if (last == null || last.required) {\n          _this2.emit('firstLine', options, _this2);\n\n          _this2.spaceLeft = _this2.lineWidth;\n        }\n\n        if (w <= _this2.spaceLeft) {\n          buffer += word;\n          textWidth += w;\n          wc++;\n        }\n\n        if (bk.required || w > _this2.spaceLeft) {\n          // if the user specified a max height and an ellipsis, and is about to pass the\n          // max height and max columns after the next line, append the ellipsis\n          var lh = _this2.document.currentLineHeight(true);\n\n          if (_this2.height != null && _this2.ellipsis && _this2.document.y + lh * 2 > _this2.maxY && _this2.column >= _this2.columns) {\n            if (_this2.ellipsis === true) {\n              _this2.ellipsis = '…';\n            } // map default ellipsis character\n\n\n            buffer = buffer.replace(/\\s+$/, '');\n            textWidth = _this2.wordWidth(buffer + _this2.ellipsis); // remove characters from the buffer until the ellipsis fits\n            // to avoid inifinite loop need to stop while-loop if buffer is empty string\n\n            while (buffer && textWidth > _this2.lineWidth) {\n              buffer = buffer.slice(0, -1).replace(/\\s+$/, '');\n              textWidth = _this2.wordWidth(buffer + _this2.ellipsis);\n            } // need to add ellipsis only if there is enough space for it\n\n\n            if (textWidth <= _this2.lineWidth) {\n              buffer = buffer + _this2.ellipsis;\n            }\n\n            textWidth = _this2.wordWidth(buffer);\n          }\n\n          if (bk.required) {\n            if (w > _this2.spaceLeft) {\n              emitLine();\n              buffer = word;\n              textWidth = w;\n              wc = 1;\n            }\n\n            _this2.emit('lastLine', options, _this2);\n          }\n\n          emitLine(); // if we've reached the edge of the page,\n          // continue on a new page or column\n\n          if (_this2.document.y + lh > _this2.maxY) {\n            var shouldContinue = _this2.nextSection(); // stop if we reached the maximum height\n\n\n            if (!shouldContinue) {\n              wc = 0;\n              buffer = '';\n              return false;\n            }\n          } // reset the space left and buffer\n\n\n          if (bk.required) {\n            _this2.spaceLeft = _this2.lineWidth;\n            buffer = '';\n            textWidth = 0;\n            return wc = 0;\n          } else {\n            // reset the space left and buffer\n            _this2.spaceLeft = _this2.lineWidth - w;\n            buffer = word;\n            textWidth = w;\n            return wc = 1;\n          }\n        } else {\n          return _this2.spaceLeft -= w;\n        }\n      });\n\n      if (wc > 0) {\n        this.emit('lastLine', options, this);\n        emitLine();\n      }\n\n      this.emit('sectionEnd', options, this); // if the wrap is set to be continued, save the X position\n      // to start the first line of the next segment at, and reset\n      // the y position\n\n      if (options.continued === true) {\n        if (lc > 1) {\n          this.continuedX = 0;\n        }\n\n        this.continuedX += options.textWidth || 0;\n        return this.document.y = y;\n      } else {\n        return this.document.x = this.startX;\n      }\n    }\n  }, {\n    key: \"nextSection\",\n    value: function nextSection(options) {\n      this.emit('sectionEnd', options, this);\n\n      if (++this.column > this.columns) {\n        // if a max height was specified by the user, we're done.\n        // otherwise, the default is to make a new page at the bottom.\n        if (this.height != null) {\n          return false;\n        }\n\n        this.document.addPage();\n        this.column = 1;\n        this.startY = this.document.page.margins.top;\n        this.maxY = this.document.page.maxY();\n        this.document.x = this.startX;\n\n        if (this.document._fillColor) {\n          var _this$document;\n\n          (_this$document = this.document).fillColor.apply(_this$document, _toConsumableArray(this.document._fillColor || []));\n        }\n\n        this.emit('pageBreak', options, this);\n      } else {\n        this.document.x += this.lineWidth + this.columnGap;\n        this.document.y = this.startY;\n        this.emit('columnBreak', options, this);\n      }\n\n      this.emit('sectionStart', options, this);\n      return true;\n    }\n  }]);\n\n  return LineWrapper;\n}(EventEmitter);\n\nvar number$2 = PDFObject.number;\nvar TextMixin = {\n  initText: function initText() {\n    this._line = this._line.bind(this); // Current coordinates\n\n    this.x = 0;\n    this.y = 0;\n    return this._lineGap = 0;\n  },\n  lineGap: function lineGap(_lineGap) {\n    this._lineGap = _lineGap;\n    return this;\n  },\n  moveDown: function moveDown(lines) {\n    if (lines == null) {\n      lines = 1;\n    }\n\n    this.y += this.currentLineHeight(true) * lines + this._lineGap;\n    return this;\n  },\n  moveUp: function moveUp(lines) {\n    if (lines == null) {\n      lines = 1;\n    }\n\n    this.y -= this.currentLineHeight(true) * lines + this._lineGap;\n    return this;\n  },\n  _text: function _text(text, x, y, options, lineCallback) {\n    options = this._initOptions(x, y, options); // Convert text to a string\n\n    text = text == null ? '' : \"\".concat(text); // if the wordSpacing option is specified, remove multiple consecutive spaces\n\n    if (options.wordSpacing) {\n      text = text.replace(/\\s{2,}/g, ' ');\n    } // word wrapping\n\n\n    if (options.width) {\n      var wrapper = this._wrapper;\n\n      if (!wrapper) {\n        wrapper = new LineWrapper(this, options);\n        wrapper.on('line', lineCallback);\n      }\n\n      this._wrapper = options.continued ? wrapper : null;\n      this._textOptions = options.continued ? options : null;\n      wrapper.wrap(text, options); // render paragraphs as single lines\n    } else {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = text.split('\\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var line = _step.value;\n          lineCallback(line, options);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return this;\n  },\n  text: function text(_text2, x, y, options) {\n    return this._text(_text2, x, y, options, this._line);\n  },\n  widthOfString: function widthOfString(string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);\n  },\n  heightOfString: function heightOfString(text, options) {\n    var _this = this;\n\n    var x = this.x,\n        y = this.y;\n    options = this._initOptions(options);\n    options.height = Infinity; // don't break pages\n\n    var lineGap = options.lineGap || this._lineGap || 0;\n\n    this._text(text, this.x, this.y, options, function () {\n      return _this.y += _this.currentLineHeight(true) + lineGap;\n    });\n\n    var height = this.y - y;\n    this.x = x;\n    this.y = y;\n    return height;\n  },\n  list: function list(_list, x, y, options, wrapper) {\n    var _this2 = this;\n\n    options = this._initOptions(x, y, options);\n    var listType = options.listType || 'bullet';\n    var unit = Math.round(this._font.ascender / 1000 * this._fontSize);\n    var midLine = unit / 2;\n    var r = options.bulletRadius || unit / 3;\n    var indent = options.textIndent || (listType === 'bullet' ? r * 5 : unit * 2);\n    var itemIndent = options.bulletIndent || (listType === 'bullet' ? r * 8 : unit * 2);\n    var level = 1;\n    var items = [];\n    var levels = [];\n    var numbers = [];\n\n    var flatten = function flatten(list) {\n      var n = 1;\n\n      for (var _i = 0; _i < list.length; _i++) {\n        var item = list[_i];\n\n        if (Array.isArray(item)) {\n          level++;\n          flatten(item);\n          level--;\n        } else {\n          items.push(item);\n          levels.push(level);\n\n          if (listType !== 'bullet') {\n            numbers.push(n++);\n          }\n        }\n      }\n    };\n\n    flatten(_list);\n\n    var label = function label(n) {\n      switch (listType) {\n        case 'numbered':\n          return \"\".concat(n, \".\");\n\n        case 'lettered':\n          var letter = String.fromCharCode((n - 1) % 26 + 65);\n          var times = Math.floor((n - 1) / 26 + 1);\n          var text = Array(times + 1).join(letter);\n          return \"\".concat(text, \".\");\n      }\n    };\n\n    wrapper = new LineWrapper(this, options);\n    wrapper.on('line', this._line);\n    level = 1;\n    var i = 0;\n    wrapper.on('firstLine', function () {\n      var l;\n\n      if ((l = levels[i++]) !== level) {\n        var diff = itemIndent * (l - level);\n        _this2.x += diff;\n        wrapper.lineWidth -= diff;\n        level = l;\n      }\n\n      switch (listType) {\n        case 'bullet':\n          _this2.circle(_this2.x - indent + r, _this2.y + midLine, r);\n\n          return _this2.fill();\n\n        case 'numbered':\n        case 'lettered':\n          var text = label(numbers[i - 1]);\n          return _this2._fragment(text, _this2.x - indent, _this2.y, options);\n      }\n    });\n    wrapper.on('sectionStart', function () {\n      var pos = indent + itemIndent * (level - 1);\n      _this2.x += pos;\n      return wrapper.lineWidth -= pos;\n    });\n    wrapper.on('sectionEnd', function () {\n      var pos = indent + itemIndent * (level - 1);\n      _this2.x -= pos;\n      return wrapper.lineWidth += pos;\n    });\n    wrapper.wrap(items.join('\\n'), options);\n    return this;\n  },\n  _initOptions: function _initOptions() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var y = arguments.length > 1 ? arguments[1] : undefined;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof x === 'object') {\n      options = x;\n      x = null;\n    } // clone options object\n\n\n    var result = Object.assign({}, options); // extend options with previous values for continued text\n\n    if (this._textOptions) {\n      for (var key in this._textOptions) {\n        var val = this._textOptions[key];\n\n        if (key !== 'continued') {\n          if (result[key] == null) {\n            result[key] = val;\n          }\n        }\n      }\n    } // Update the current position\n\n\n    if (x != null) {\n      this.x = x;\n    }\n\n    if (y != null) {\n      this.y = y;\n    } // wrap to margins if no x or y position passed\n\n\n    if (result.lineBreak !== false) {\n      if (result.width == null) {\n        result.width = this.page.width - this.x - this.page.margins.right;\n      }\n    }\n\n    if (!result.columns) {\n      result.columns = 0;\n    }\n\n    if (result.columnGap == null) {\n      result.columnGap = 18;\n    } // 1/4 inch\n\n\n    return result;\n  },\n  _line: function _line(text) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var wrapper = arguments.length > 2 ? arguments[2] : undefined;\n\n    this._fragment(text, this.x, this.y, options);\n\n    var lineGap = options.lineGap || this._lineGap || 0;\n\n    if (!wrapper) {\n      return this.x += this.widthOfString(text);\n    } else {\n      return this.y += this.currentLineHeight(true) + lineGap;\n    }\n  },\n  _fragment: function _fragment(text, x, y, options) {\n    var _this3 = this;\n\n    var dy, encoded, i, positions, textWidth, words;\n    text = \"\".concat(text).replace(/\\n/g, '');\n\n    if (text.length === 0) {\n      return;\n    } // handle options\n\n\n    var align = options.align || 'left';\n    var wordSpacing = options.wordSpacing || 0;\n    var characterSpacing = options.characterSpacing || 0; // text alignments\n\n    if (options.width) {\n      switch (align) {\n        case 'right':\n          textWidth = this.widthOfString(text.replace(/\\s+$/, ''), options);\n          x += options.lineWidth - textWidth;\n          break;\n\n        case 'center':\n          x += options.lineWidth / 2 - options.textWidth / 2;\n          break;\n\n        case 'justify':\n          // calculate the word spacing value\n          words = text.trim().split(/\\s+/);\n          textWidth = this.widthOfString(text.replace(/\\s+/g, ''), options);\n          var spaceWidth = this.widthOfString(' ') + characterSpacing;\n          wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);\n          break;\n      }\n    } // text baseline alignments based on http://wiki.apache.org/xmlgraphics-fop/LineLayout/AlignmentHandling\n\n\n    if (typeof options.baseline === 'number') {\n      dy = -options.baseline;\n    } else {\n      switch (options.baseline) {\n        case 'svg-middle':\n          dy = 0.5 * this._font.xHeight;\n          break;\n\n        case 'middle':\n        case 'svg-central':\n          dy = 0.5 * (this._font.descender + this._font.ascender);\n          break;\n\n        case 'bottom':\n        case 'ideographic':\n          dy = this._font.descender;\n          break;\n\n        case 'alphabetic':\n          dy = 0;\n          break;\n\n        case 'mathematical':\n          dy = 0.5 * this._font.ascender;\n          break;\n\n        case 'hanging':\n          dy = 0.8 * this._font.ascender;\n          break;\n\n        case 'top':\n          dy = this._font.ascender;\n          break;\n\n        default:\n          dy = this._font.ascender;\n      }\n\n      dy = dy / 1000 * this._fontSize;\n    } // calculate the actual rendered width of the string after word and character spacing\n\n\n    var renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1); // create link annotations if the link option is given\n\n    if (options.link != null) {\n      this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);\n    }\n\n    if (options.goTo != null) {\n      this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);\n    }\n\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    } // create underline or strikethrough line\n\n\n    if (options.underline || options.strike) {\n      this.save();\n\n      if (!options.stroke) {\n        this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));\n      }\n\n      var lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);\n      this.lineWidth(lineWidth);\n      var d = options.underline ? 1 : 2;\n      var lineY = y + this.currentLineHeight() / d;\n\n      if (options.underline) {\n        lineY -= lineWidth;\n      }\n\n      this.moveTo(x, lineY);\n      this.lineTo(x + renderedWidth, lineY);\n      this.stroke();\n      this.restore();\n    }\n\n    this.save(); // oblique (angle in degrees or boolean)\n\n    if (options.oblique) {\n      var skew;\n\n      if (typeof options.oblique === 'number') {\n        skew = -Math.tan(options.oblique * Math.PI / 180);\n      } else {\n        skew = -0.25;\n      }\n\n      this.transform(1, 0, 0, 1, x, y);\n      this.transform(1, 0, skew, 1, -skew * dy, 0);\n      this.transform(1, 0, 0, 1, -x, -y);\n    } // flip coordinate system\n\n\n    this.transform(1, 0, 0, -1, 0, this.page.height);\n    y = this.page.height - y - dy; // add current font to page if necessary\n\n    if (this.page.fonts[this._font.id] == null) {\n      this.page.fonts[this._font.id] = this._font.ref();\n    } // begin the text object\n\n\n    this.addContent('BT'); // text position\n\n    this.addContent(\"1 0 0 1 \".concat(number$2(x), \" \").concat(number$2(y), \" Tm\")); // font and font size\n\n    this.addContent(\"/\".concat(this._font.id, \" \").concat(number$2(this._fontSize), \" Tf\")); // rendering mode\n\n    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n\n    if (mode) {\n      this.addContent(\"\".concat(mode, \" Tr\"));\n    } // Character spacing\n\n\n    if (characterSpacing) {\n      this.addContent(\"\".concat(number$2(characterSpacing), \" Tc\"));\n    } // Add the actual text\n    // If we have a word spacing value, we need to encode each word separately\n    // since the normal Tw operator only works on character code 32, which isn't\n    // used for embedded fonts.\n\n\n    if (wordSpacing) {\n      words = text.trim().split(/\\s+/);\n      wordSpacing += this.widthOfString(' ') + characterSpacing;\n      wordSpacing *= 1000 / this._fontSize;\n      encoded = [];\n      positions = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = words[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var word = _step2.value;\n\n          var _this$_font$encode = this._font.encode(word, options.features),\n              _this$_font$encode2 = _slicedToArray(_this$_font$encode, 2),\n              encodedWord = _this$_font$encode2[0],\n              positionsWord = _this$_font$encode2[1];\n\n          encoded = encoded.concat(encodedWord);\n          positions = positions.concat(positionsWord); // add the word spacing to the end of the word\n          // clone object because of cache\n\n          var space = {};\n          var object = positions[positions.length - 1];\n\n          for (var key in object) {\n            var val = object[key];\n            space[key] = val;\n          }\n\n          space.xAdvance += wordSpacing;\n          positions[positions.length - 1] = space;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    } else {\n      var _this$_font$encode3 = this._font.encode(text, options.features);\n\n      var _this$_font$encode4 = _slicedToArray(_this$_font$encode3, 2);\n\n      encoded = _this$_font$encode4[0];\n      positions = _this$_font$encode4[1];\n    }\n\n    var scale = this._fontSize / 1000;\n    var commands = [];\n    var last = 0;\n    var hadOffset = false; // Adds a segment of text to the TJ command buffer\n\n    var addSegment = function addSegment(cur) {\n      if (last < cur) {\n        var hex = encoded.slice(last, cur).join('');\n        var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n        commands.push(\"<\".concat(hex, \"> \").concat(number$2(-advance)));\n      }\n\n      return last = cur;\n    }; // Flushes the current TJ commands to the output stream\n\n\n    var flush = function flush(i) {\n      addSegment(i);\n\n      if (commands.length > 0) {\n        _this3.addContent(\"[\".concat(commands.join(' '), \"] TJ\"));\n\n        return commands.length = 0;\n      }\n    };\n\n    for (i = 0; i < positions.length; i++) {\n      // If we have an x or y offset, we have to break out of the current TJ command\n      // so we can move the text position.\n      var pos = positions[i];\n\n      if (pos.xOffset || pos.yOffset) {\n        // Flush the current buffer\n        flush(i); // Move the text position and flush just the current character\n\n        this.addContent(\"1 0 0 1 \".concat(number$2(x + pos.xOffset * scale), \" \").concat(number$2(y + pos.yOffset * scale), \" Tm\"));\n        flush(i + 1);\n        hadOffset = true;\n      } else {\n        // If the last character had an offset, reset the text position\n        if (hadOffset) {\n          this.addContent(\"1 0 0 1 \".concat(number$2(x), \" \").concat(number$2(y), \" Tm\"));\n          hadOffset = false;\n        } // Group segments that don't have any advance adjustments\n\n\n        if (pos.xAdvance - pos.advanceWidth !== 0) {\n          addSegment(i + 1);\n        }\n      }\n\n      x += pos.xAdvance * scale;\n    } // Flush any remaining commands\n\n\n    flush(i); // end the text object\n\n    this.addContent('ET'); // restore flipped coordinate system\n\n    return this.restore();\n  }\n};\n\nvar MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\nvar COLOR_SPACE_MAP = {\n  1: 'DeviceGray',\n  3: 'DeviceRGB',\n  4: 'DeviceCMYK'\n};\n\nvar JPEG =\n/*#__PURE__*/\nfunction () {\n  function JPEG(data, label) {\n    _classCallCheck(this, JPEG);\n\n    var marker;\n    this.data = data;\n    this.label = label;\n\n    if (this.data.readUInt16BE(0) !== 0xffd8) {\n      throw 'SOI not found in JPEG';\n    }\n\n    var pos = 2;\n\n    while (pos < this.data.length) {\n      marker = this.data.readUInt16BE(pos);\n      pos += 2;\n\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n\n      pos += this.data.readUInt16BE(pos);\n    }\n\n    if (!MARKERS.includes(marker)) {\n      throw 'Invalid JPEG.';\n    }\n\n    pos += 2;\n    this.bits = this.data[pos++];\n    this.height = this.data.readUInt16BE(pos);\n    pos += 2;\n    this.width = this.data.readUInt16BE(pos);\n    pos += 2;\n    var channels = this.data[pos++];\n    this.colorSpace = COLOR_SPACE_MAP[channels];\n    this.obj = null;\n  }\n\n  _createClass(JPEG, [{\n    key: \"embed\",\n    value: function embed(document) {\n      if (this.obj) {\n        return;\n      }\n\n      this.obj = document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: this.bits,\n        Width: this.width,\n        Height: this.height,\n        ColorSpace: this.colorSpace,\n        Filter: 'DCTDecode'\n      }); // add extra decode params for CMYK images. By swapping the\n      // min and max values from the default, we invert the colors. See\n      // section 4.8.4 of the spec.\n\n      if (this.colorSpace === 'DeviceCMYK') {\n        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];\n      }\n\n      this.obj.end(this.data); // free memory\n\n      return this.data = null;\n    }\n  }]);\n\n  return JPEG;\n}();\n\nvar PNGImage =\n/*#__PURE__*/\nfunction () {\n  function PNGImage(data, label) {\n    _classCallCheck(this, PNGImage);\n\n    this.label = label;\n    this.image = new PNG(data);\n    this.width = this.image.width;\n    this.height = this.image.height;\n    this.imgData = this.image.imgData;\n    this.obj = null;\n  }\n\n  _createClass(PNGImage, [{\n    key: \"embed\",\n    value: function embed(document) {\n      this.document = document;\n\n      if (this.obj) {\n        return;\n      }\n\n      var hasAlphaChannel = this.image.hasAlphaChannel;\n      this.obj = this.document.ref({\n        Type: 'XObject',\n        Subtype: 'Image',\n        BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,\n        Width: this.width,\n        Height: this.height,\n        Filter: 'FlateDecode'\n      });\n\n      if (!hasAlphaChannel) {\n        var params = this.document.ref({\n          Predictor: 15,\n          Colors: this.image.colors,\n          BitsPerComponent: this.image.bits,\n          Columns: this.width\n        });\n        this.obj.data['DecodeParms'] = params;\n        params.end();\n      }\n\n      if (this.image.palette.length === 0) {\n        this.obj.data['ColorSpace'] = this.image.colorSpace;\n      } else {\n        // embed the color palette in the PDF as an object stream\n        var palette = this.document.ref();\n        palette.end(new Buffer(this.image.palette)); // build the color space array for the image\n\n        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];\n      } // For PNG color types 0, 2 and 3, the transparency data is stored in\n      // a dedicated PNG chunk.\n\n\n      if (this.image.transparency.grayscale != null) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var val = this.image.transparency.grayscale;\n        this.obj.data['Mask'] = [val, val];\n      } else if (this.image.transparency.rgb) {\n        // Use Color Key Masking (spec section 4.8.5)\n        // An array with N elements, where N is two times the number of color components.\n        var rgb = this.image.transparency.rgb;\n        var mask = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = rgb[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var x = _step.value;\n            mask.push(x, x);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.obj.data['Mask'] = mask;\n      } else if (this.image.transparency.indexed) {\n        // Create a transparency SMask for the image based on the data\n        // in the PLTE and tRNS sections. See below for details on SMasks.\n        return this.loadIndexedAlphaChannel();\n      } else if (hasAlphaChannel) {\n        // For PNG color types 4 and 6, the transparency data is stored as a alpha\n        // channel mixed in with the main image data. Separate this data out into an\n        // SMask object and store it separately in the PDF.\n        return this.splitAlphaChannel();\n      }\n\n      this.finalize();\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.alphaChannel) {\n        var sMask = this.document.ref({\n          Type: 'XObject',\n          Subtype: 'Image',\n          Height: this.height,\n          Width: this.width,\n          BitsPerComponent: 8,\n          Filter: 'FlateDecode',\n          ColorSpace: 'DeviceGray',\n          Decode: [0, 1]\n        });\n        sMask.end(this.alphaChannel);\n        this.obj.data['SMask'] = sMask;\n      } // add the actual image data\n\n\n      this.obj.end(this.imgData); // free memory\n\n      this.image = null;\n      return this.imgData = null;\n    }\n  }, {\n    key: \"splitAlphaChannel\",\n    value: function splitAlphaChannel() {\n      var _this = this;\n\n      return this.image.decodePixels(function (pixels) {\n        var a, p;\n        var colorCount = _this.image.colors;\n        var pixelCount = _this.width * _this.height;\n        var imgData = new Buffer(pixelCount * colorCount);\n        var alphaChannel = new Buffer(pixelCount);\n        var i = p = a = 0;\n        var len = pixels.length; // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)\n\n        var skipByteCount = _this.image.bits === 16 ? 1 : 0;\n\n        while (i < len) {\n          for (var colorIndex = 0; colorIndex < colorCount; colorIndex++) {\n            imgData[p++] = pixels[i++];\n            i += skipByteCount;\n          }\n\n          alphaChannel[a++] = pixels[i++];\n          i += skipByteCount;\n        }\n\n        _this.imgData = zlib.deflateSync(imgData);\n        _this.alphaChannel = zlib.deflateSync(alphaChannel);\n        return _this.finalize();\n      });\n    }\n  }, {\n    key: \"loadIndexedAlphaChannel\",\n    value: function loadIndexedAlphaChannel() {\n      var _this2 = this;\n\n      var transparency = this.image.transparency.indexed;\n      return this.image.decodePixels(function (pixels) {\n        var alphaChannel = new Buffer(_this2.width * _this2.height);\n        var i = 0;\n\n        for (var j = 0, end = pixels.length; j < end; j++) {\n          alphaChannel[i++] = transparency[pixels[j]];\n        }\n\n        _this2.alphaChannel = zlib.deflateSync(alphaChannel);\n        return _this2.finalize();\n      });\n    }\n  }]);\n\n  return PNGImage;\n}();\n\nvar PDFImage =\n/*#__PURE__*/\nfunction () {\n  function PDFImage() {\n    _classCallCheck(this, PDFImage);\n  }\n\n  _createClass(PDFImage, null, [{\n    key: \"open\",\n    value: function open(src, label) {\n      var data;\n\n      if (Buffer.isBuffer(src)) {\n        data = src;\n      } else if (src instanceof ArrayBuffer) {\n        data = new Buffer(new Uint8Array(src));\n      } else {\n        var match;\n\n        if (match = /^data:.+;base64,(.*)$/.exec(src)) {\n          data = new Buffer(match[1], 'base64');\n        } else {\n          data = fs.readFileSync(src);\n\n          if (!data) {\n            return;\n          }\n        }\n      }\n\n      if (data[0] === 0xff && data[1] === 0xd8) {\n        return new JPEG(data, label);\n      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {\n        return new PNGImage(data, label);\n      } else {\n        throw new Error('Unknown image format.');\n      }\n    }\n  }]);\n\n  return PDFImage;\n}();\n\nvar ImagesMixin = {\n  initImages: function initImages() {\n    this._imageRegistry = {};\n    return this._imageCount = 0;\n  },\n  image: function image(src, x, y) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var bh, bp, bw, image, ip, left, left1;\n\n    if (typeof x === 'object') {\n      options = x;\n      x = null;\n    }\n\n    x = (left = x != null ? x : options.x) != null ? left : this.x;\n    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n\n    if (!image) {\n      if (src.width && src.height) {\n        image = src;\n      } else {\n        image = this.openImage(src);\n      }\n    }\n\n    if (!image.obj) {\n      image.embed(this);\n    }\n\n    if (this.page.xobjects[image.label] == null) {\n      this.page.xobjects[image.label] = image.obj;\n    }\n\n    var w = options.width || image.width;\n    var h = options.height || image.height;\n\n    if (options.width && !options.height) {\n      var wp = w / image.width;\n      w = image.width * wp;\n      h = image.height * wp;\n    } else if (options.height && !options.width) {\n      var hp = h / image.height;\n      w = image.width * hp;\n      h = image.height * hp;\n    } else if (options.scale) {\n      w = image.width * options.scale;\n      h = image.height * options.scale;\n    } else if (options.fit) {\n      var _options$fit = _slicedToArray(options.fit, 2);\n\n      bw = _options$fit[0];\n      bh = _options$fit[1];\n      bp = bw / bh;\n      ip = image.width / image.height;\n\n      if (ip > bp) {\n        w = bw;\n        h = bw / ip;\n      } else {\n        h = bh;\n        w = bh * ip;\n      }\n    } else if (options.cover) {\n      var _options$cover = _slicedToArray(options.cover, 2);\n\n      bw = _options$cover[0];\n      bh = _options$cover[1];\n      bp = bw / bh;\n      ip = image.width / image.height;\n\n      if (ip > bp) {\n        h = bh;\n        w = bh * ip;\n      } else {\n        w = bw;\n        h = bw / ip;\n      }\n    }\n\n    if (options.fit || options.cover) {\n      if (options.align === 'center') {\n        x = x + bw / 2 - w / 2;\n      } else if (options.align === 'right') {\n        x = x + bw - w;\n      }\n\n      if (options.valign === 'center') {\n        y = y + bh / 2 - h / 2;\n      } else if (options.valign === 'bottom') {\n        y = y + bh - h;\n      }\n    } // create link annotations if the link option is given\n\n\n    if (options.link != null) {\n      this.link(x, y, w, h, options.link);\n    }\n\n    if (options.goTo != null) {\n      this.goTo(x, y, w, h, options.goTo);\n    }\n\n    if (options.destination != null) {\n      this.addNamedDestination(options.destination, 'XYZ', x, y, null);\n    } // Set the current y position to below the image if it is in the document flow\n\n\n    if (this.y === y) {\n      this.y += h;\n    }\n\n    this.save();\n    this.transform(w, 0, 0, -h, x, y + h);\n    this.addContent(\"/\".concat(image.label, \" Do\"));\n    this.restore();\n    return this;\n  },\n  openImage: function openImage(src) {\n    var image;\n\n    if (typeof src === 'string') {\n      image = this._imageRegistry[src];\n    }\n\n    if (!image) {\n      image = PDFImage.open(src, \"I\".concat(++this._imageCount));\n\n      if (typeof src === 'string') {\n        this._imageRegistry[src] = image;\n      }\n    }\n\n    return image;\n  }\n};\n\nvar AnnotationsMixin = {\n  annotate: function annotate(x, y, w, h, options) {\n    options.Type = 'Annot';\n    options.Rect = this._convertRect(x, y, w, h);\n    options.Border = [0, 0, 0];\n\n    if (options.Subtype !== 'Link') {\n      if (options.C == null) {\n        options.C = this._normalizeColor(options.color || [0, 0, 0]);\n      }\n    } // convert colors\n\n\n    delete options.color;\n\n    if (typeof options.Dest === 'string') {\n      options.Dest = new String(options.Dest);\n    } // Capitalize keys\n\n\n    for (var key in options) {\n      var val = options[key];\n      options[key[0].toUpperCase() + key.slice(1)] = val;\n    }\n\n    var ref = this.ref(options);\n    this.page.annotations.push(ref);\n    ref.end();\n    return this;\n  },\n  note: function note(x, y, w, h, contents) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Text';\n    options.Contents = new String(contents);\n    options.Name = 'Comment';\n\n    if (options.color == null) {\n      options.color = [243, 223, 92];\n    }\n\n    return this.annotate(x, y, w, h, options);\n  },\n  goTo: function goTo(x, y, w, h, name) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Link';\n    options.A = this.ref({\n      S: 'GoTo',\n      D: new String(name)\n    });\n    options.A.end();\n    return this.annotate(x, y, w, h, options);\n  },\n  link: function link(x, y, w, h, url) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'Link';\n\n    if (typeof url === 'number') {\n      // Link to a page in the document (the page must already exist)\n      var pages = this._root.data.Pages.data;\n\n      if (url >= 0 && url < pages.Kids.length) {\n        options.A = this.ref({\n          S: 'GoTo',\n          D: [pages.Kids[url], 'XYZ', null, null, null]\n        });\n        options.A.end();\n      } else {\n        throw new Error(\"The document has no page \".concat(url));\n      }\n    } else {\n      // Link to an external url\n      options.A = this.ref({\n        S: 'URI',\n        URI: new String(url)\n      });\n      options.A.end();\n    }\n\n    return this.annotate(x, y, w, h, options);\n  },\n  _markup: function _markup(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    var _this$_convertRect = this._convertRect(x, y, w, h),\n        _this$_convertRect2 = _slicedToArray(_this$_convertRect, 4),\n        x1 = _this$_convertRect2[0],\n        y1 = _this$_convertRect2[1],\n        x2 = _this$_convertRect2[2],\n        y2 = _this$_convertRect2[3];\n\n    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  highlight: function highlight(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Highlight';\n\n    if (options.color == null) {\n      options.color = [241, 238, 148];\n    }\n\n    return this._markup(x, y, w, h, options);\n  },\n  underline: function underline(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Underline';\n    return this._markup(x, y, w, h, options);\n  },\n  strike: function strike(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'StrikeOut';\n    return this._markup(x, y, w, h, options);\n  },\n  lineAnnotation: function lineAnnotation(x1, y1, x2, y2) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Line';\n    options.Contents = new String();\n    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];\n    return this.annotate(x1, y1, x2, y2, options);\n  },\n  rectAnnotation: function rectAnnotation(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Square';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  ellipseAnnotation: function ellipseAnnotation(x, y, w, h) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    options.Subtype = 'Circle';\n    options.Contents = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  textAnnotation: function textAnnotation(x, y, w, h, text) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    options.Subtype = 'FreeText';\n    options.Contents = new String(text);\n    options.DA = new String();\n    return this.annotate(x, y, w, h, options);\n  },\n  _convertRect: function _convertRect(x1, y1, w, h) {\n    // flip y1 and y2\n    var y2 = y1;\n    y1 += h; // make x2\n\n    var x2 = x1 + w; // apply current transformation matrix to points\n\n    var _this$_ctm = _slicedToArray(this._ctm, 6),\n        m0 = _this$_ctm[0],\n        m1 = _this$_ctm[1],\n        m2 = _this$_ctm[2],\n        m3 = _this$_ctm[3],\n        m4 = _this$_ctm[4],\n        m5 = _this$_ctm[5];\n\n    x1 = m0 * x1 + m2 * y1 + m4;\n    y1 = m1 * x1 + m3 * y1 + m5;\n    x2 = m0 * x2 + m2 * y2 + m4;\n    y2 = m1 * x2 + m3 * y2 + m5;\n    return [x1, y1, x2, y2];\n  }\n};\n\nvar PDFOutline =\n/*#__PURE__*/\nfunction () {\n  function PDFOutline(document, parent, title, dest) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      expanded: false\n    };\n\n    _classCallCheck(this, PDFOutline);\n\n    this.document = document;\n    this.options = options;\n    this.outlineData = {};\n\n    if (dest !== null) {\n      this.outlineData['Dest'] = [dest.dictionary, 'Fit'];\n    }\n\n    if (parent !== null) {\n      this.outlineData['Parent'] = parent;\n    }\n\n    if (title !== null) {\n      this.outlineData['Title'] = new String(title);\n    }\n\n    this.dictionary = this.document.ref(this.outlineData);\n    this.children = [];\n  }\n\n  _createClass(PDFOutline, [{\n    key: \"addItem\",\n    value: function addItem(title) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        expanded: false\n      };\n      var result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);\n      this.children.push(result);\n      return result;\n    }\n  }, {\n    key: \"endOutline\",\n    value: function endOutline() {\n      if (this.children.length > 0) {\n        if (this.options.expanded) {\n          this.outlineData.Count = this.children.length;\n        }\n\n        var first = this.children[0],\n            last = this.children[this.children.length - 1];\n        this.outlineData.First = first.dictionary;\n        this.outlineData.Last = last.dictionary;\n\n        for (var i = 0, len = this.children.length; i < len; i++) {\n          var child = this.children[i];\n\n          if (i > 0) {\n            child.outlineData.Prev = this.children[i - 1].dictionary;\n          }\n\n          if (i < this.children.length - 1) {\n            child.outlineData.Next = this.children[i + 1].dictionary;\n          }\n\n          child.endOutline();\n        }\n      }\n\n      return this.dictionary.end();\n    }\n  }]);\n\n  return PDFOutline;\n}();\n\nvar OutlineMixin = {\n  initOutline: function initOutline() {\n    return this.outline = new PDFOutline(this, null, null, null);\n  },\n  endOutline: function endOutline() {\n    this.outline.endOutline();\n\n    if (this.outline.children.length > 0) {\n      this._root.data.Outlines = this.outline.dictionary;\n      return this._root.data.PageMode = 'UseOutlines';\n    }\n  }\n};\n\nvar PDFDocument =\n/*#__PURE__*/\nfunction (_stream$Readable) {\n  _inherits(PDFDocument, _stream$Readable);\n\n  function PDFDocument() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PDFDocument);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PDFDocument).call(this, options));\n    _this.options = options; // PDF version\n\n    switch (options.pdfVersion) {\n      case '1.4':\n        _this.version = 1.4;\n        break;\n\n      case '1.5':\n        _this.version = 1.5;\n        break;\n\n      case '1.6':\n        _this.version = 1.6;\n        break;\n\n      case '1.7':\n      case '1.7ext3':\n        _this.version = 1.7;\n        break;\n\n      default:\n        _this.version = 1.3;\n        break;\n    } // Whether streams should be compressed\n\n\n    _this.compress = _this.options.compress != null ? _this.options.compress : true;\n    _this._pageBuffer = [];\n    _this._pageBufferStart = 0; // The PDF object store\n\n    _this._offsets = [];\n    _this._waiting = 0;\n    _this._ended = false;\n    _this._offset = 0;\n\n    var Pages = _this.ref({\n      Type: 'Pages',\n      Count: 0,\n      Kids: []\n    });\n\n    var Names = _this.ref({\n      Dests: new PDFNameTree()\n    });\n\n    _this._root = _this.ref({\n      Type: 'Catalog',\n      Pages: Pages,\n      Names: Names\n    }); // The current page\n\n    _this.page = null; // Initialize mixins\n\n    _this.initColor();\n\n    _this.initVector();\n\n    _this.initFonts(options.font);\n\n    _this.initText();\n\n    _this.initImages();\n\n    _this.initOutline(); // Initialize the metadata\n\n\n    _this.info = {\n      Producer: 'PDFKit',\n      Creator: 'PDFKit',\n      CreationDate: new Date()\n    };\n\n    if (_this.options.info) {\n      for (var key in _this.options.info) {\n        var val = _this.options.info[key];\n        _this.info[key] = val;\n      }\n    } // Generate file ID\n\n\n    _this._id = PDFSecurity.generateFileID(_this.info); // Initialize security settings\n\n    _this._security = PDFSecurity.create(_assertThisInitialized(_this), options); // Write the header\n    // PDF version\n\n    _this._write(\"%PDF-\".concat(_this.version)); // 4 binary chars, as recommended by the spec\n\n\n    _this._write('%\\xFF\\xFF\\xFF\\xFF'); // Add the first page\n\n\n    if (_this.options.autoFirstPage !== false) {\n      _this.addPage();\n    }\n\n    return _this;\n  }\n\n  _createClass(PDFDocument, [{\n    key: \"addPage\",\n    value: function addPage(options) {\n      // end the current page if needed\n      if (options == null) {\n        options = this.options;\n      }\n\n      if (!this.options.bufferPages) {\n        this.flushPages();\n      } // create a page object\n\n\n      this.page = new PDFPage(this, options);\n\n      this._pageBuffer.push(this.page); // add the page to the object store\n\n\n      var pages = this._root.data.Pages.data;\n      pages.Kids.push(this.page.dictionary);\n      pages.Count++; // reset x and y coordinates\n\n      this.x = this.page.margins.left;\n      this.y = this.page.margins.top; // flip PDF coordinate system so that the origin is in\n      // the top left rather than the bottom left\n\n      this._ctm = [1, 0, 0, 1, 0, 0];\n      this.transform(1, 0, 0, -1, 0, this.page.height);\n      this.emit('pageAdded');\n      return this;\n    }\n  }, {\n    key: \"bufferedPageRange\",\n    value: function bufferedPageRange() {\n      return {\n        start: this._pageBufferStart,\n        count: this._pageBuffer.length\n      };\n    }\n  }, {\n    key: \"switchToPage\",\n    value: function switchToPage(n) {\n      var page;\n\n      if (!(page = this._pageBuffer[n - this._pageBufferStart])) {\n        throw new Error(\"switchToPage(\".concat(n, \") out of bounds, current buffer covers pages \").concat(this._pageBufferStart, \" to \").concat(this._pageBufferStart + this._pageBuffer.length - 1));\n      }\n\n      return this.page = page;\n    }\n  }, {\n    key: \"flushPages\",\n    value: function flushPages() {\n      // this local variable exists so we're future-proof against\n      // reentrant calls to flushPages.\n      var pages = this._pageBuffer;\n      this._pageBuffer = [];\n      this._pageBufferStart += pages.length;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = pages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var page = _step.value;\n          page.end();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addNamedDestination\",\n    value: function addNamedDestination(name) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length === 0) {\n        args = ['XYZ', null, null, null];\n      }\n\n      if (args[0] === 'XYZ' && args[2] !== null) {\n        args[2] = this.page.height - args[2];\n      }\n\n      args.unshift(this.page.dictionary);\n\n      this._root.data.Names.data.Dests.add(name, args);\n    }\n  }, {\n    key: \"ref\",\n    value: function ref(data) {\n      var ref = new PDFReference(this, this._offsets.length + 1, data);\n\n      this._offsets.push(null); // placeholder for this object's offset once it is finalized\n\n\n      this._waiting++;\n      return ref;\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {} // do nothing, but this method is required by node\n\n  }, {\n    key: \"_write\",\n    value: function _write(data) {\n      if (!Buffer.isBuffer(data)) {\n        data = new Buffer(data + '\\n', 'binary');\n      }\n\n      this.push(data);\n      return this._offset += data.length;\n    }\n  }, {\n    key: \"addContent\",\n    value: function addContent(data) {\n      this.page.write(data);\n      return this;\n    }\n  }, {\n    key: \"_refEnd\",\n    value: function _refEnd(ref) {\n      this._offsets[ref.id - 1] = ref.offset;\n\n      if (--this._waiting === 0 && this._ended) {\n        this._finalize();\n\n        return this._ended = false;\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(filename, fn) {\n      // print a deprecation warning with a stacktrace\n      var err = new Error(\"PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.\");\n      console.warn(err.stack);\n      this.pipe(fs.createWriteStream(filename));\n      this.end();\n      return this.once('end', fn);\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.flushPages();\n      this._info = this.ref();\n\n      for (var key in this.info) {\n        var val = this.info[key];\n\n        if (typeof val === 'string') {\n          val = new String(val);\n        }\n\n        var entry = this.ref(val);\n        entry.end();\n        this._info.data[key] = entry;\n      }\n\n      this._info.end();\n\n      for (var name in this._fontFamilies) {\n        var font = this._fontFamilies[name];\n        font.finalize();\n      }\n\n      this.endOutline();\n\n      this._root.end();\n\n      this._root.data.Pages.end();\n\n      this._root.data.Names.end();\n\n      if (this._security) {\n        this._security.end();\n      }\n\n      if (this._waiting === 0) {\n        return this._finalize();\n      } else {\n        return this._ended = true;\n      }\n    }\n  }, {\n    key: \"_finalize\",\n    value: function _finalize(fn) {\n      // generate xref\n      var xRefOffset = this._offset;\n\n      this._write('xref');\n\n      this._write(\"0 \".concat(this._offsets.length + 1));\n\n      this._write('0000000000 65535 f ');\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._offsets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var offset = _step2.value;\n          offset = \"0000000000\".concat(offset).slice(-10);\n\n          this._write(offset + ' 00000 n ');\n        } // trailer\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var trailer = {\n        Size: this._offsets.length + 1,\n        Root: this._root,\n        Info: this._info,\n        ID: [this._id, this._id]\n      };\n\n      if (this._security) {\n        trailer.Encrypt = this._security.dictionary;\n      }\n\n      this._write('trailer');\n\n      this._write(PDFObject.convert(trailer));\n\n      this._write('startxref');\n\n      this._write(\"\".concat(xRefOffset));\n\n      this._write('%%EOF'); // end the stream\n\n\n      return this.push(null);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '[object PDFDocument]';\n    }\n  }]);\n\n  return PDFDocument;\n}(stream.Readable);\n\nvar mixin = function mixin(methods) {\n  Object.assign(PDFDocument.prototype, methods);\n};\n\nmixin(ColorMixin);\nmixin(VectorMixin);\nmixin(FontsMixin);\nmixin(TextMixin);\nmixin(ImagesMixin);\nmixin(AnnotationsMixin);\nmixin(OutlineMixin);\n\nexport default PDFDocument;\n//# sourceMappingURL=pdfkit.es5.js.map\n"],"sourceRoot":""}