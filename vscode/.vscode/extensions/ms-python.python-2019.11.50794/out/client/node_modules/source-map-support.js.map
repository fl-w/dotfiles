{"version":3,"sources":["../../webpack/bootstrap","../.././node_modules/source-map/lib/util.js","../../external \"path\"","../.././node_modules/source-map/lib/source-map-generator.js","../.././node_modules/source-map/lib/base64-vlq.js","../.././node_modules/source-map/lib/array-set.js","../../external \"fs\"","../.././node_modules/source-map-support/source-map-support.js","../.././node_modules/source-map/source-map.js","../.././node_modules/source-map/lib/base64.js","../.././node_modules/source-map/lib/mapping-list.js","../.././node_modules/source-map/lib/source-map-consumer.js","../.././node_modules/source-map/lib/binary-search.js","../.././node_modules/source-map/lib/quick-sort.js","../.././node_modules/source-map/lib/source-node.js","../.././node_modules/buffer-from/index.js","../../external \"module\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getArg","aArgs","aName","aDefaultValue","arguments","length","Error","urlRegexp","dataUrlRegexp","urlParse","aUrl","match","scheme","auth","host","port","path","urlGenerate","aParsedUrl","url","normalize","aPath","part","isAbsolute","parts","split","up","splice","join","aRoot","aPathUrl","aRootUrl","joined","charAt","replace","test","relative","level","indexOf","index","lastIndexOf","slice","Array","substr","supportsNullProto","identity","isProtoString","charCodeAt","strcmp","aStr1","aStr2","toSetString","aStr","fromSetString","compareByOriginalPositions","mappingA","mappingB","onlyCompareOriginal","cmp","source","originalLine","originalColumn","generatedColumn","generatedLine","compareByGeneratedPositionsDeflated","onlyCompareGenerated","compareByGeneratedPositionsInflated","parseSourceMapInput","str","JSON","parse","computeSourceURL","sourceRoot","sourceURL","sourceMapURL","parsed","substring","require","base64VLQ","util","ArraySet","MappingList","SourceMapGenerator","this","_file","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","_version","fromSourceMap","aSourceMapConsumer","generator","file","eachMapping","mapping","newMapping","generated","line","column","original","addMapping","sources","forEach","sourceFile","sourceRelative","has","add","content","sourceContentFor","setSourceContent","_validateMapping","String","aSourceFile","aSourceContent","keys","applySourceMap","aSourceMapPath","newSources","newNames","unsortedForEach","originalPositionFor","aGenerated","aOriginal","aSource","stringify","_serializeMappings","next","nameIdx","sourceIdx","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","result","mappings","toArray","len","encode","_generateSourcesContent","aSources","aSourceRoot","map","toJSON","version","names","sourcesContent","toString","base64","aValue","digit","encoded","vlq","toVLQSigned","VLQ_BASE","decode","aIndex","aOutParam","continuation","shifted","strLen","shift","rest","hasNativeMap","Map","_array","_set","fromArray","aArray","aAllowDuplicates","set","size","getOwnPropertyNames","sStr","isDuplicate","idx","push","at","aIdx","fs","SourceMapConsumer","existsSync","readFileSync","err","bufferFrom","errorFormatterInstalled","uncaughtShimInstalled","emptyCacheBetweenOperations","environment","fileContentsCache","sourceMapCache","reSourceMap","retrieveFileHandlers","retrieveMapHandlers","isInBrowser","window","XMLHttpRequest","process","type","handlerExec","list","arg","ret","retrieveFile","supportRelativeURL","dir","dirname","exec","protocol","startPath","resolve","trim","drive","contents","xhr","open","send","readyState","status","responseText","er","retrieveSourceMap","mapSourcePosition","position","sourceMap","urlAndMap","originalPosition","CallSiteToString","fileName","fileLocation","isNative","getScriptNameOrSourceURL","isEval","getEvalOrigin","lineNumber","getLineNumber","columnNumber","getColumnNumber","functionName","getFunctionName","addSuffix","isConstructor","isToplevel","typeName","getTypeName","methodName","getMethodName","cloneCallSite","frame","getPrototypeOf","wrapCallSite","getFileName","originalFunctionName","origin","mapEvalOrigin","prepareStackTrace","error","stack","message","getErrorSource","code","printErrorAndExit","stderr","_handle","setBlocking","console","exit","sourceMapData","sourceMappingURL","fileData","sourceMapHeader","getResponseHeader","e","lastMatch","re","retrieveSourceMapURL","rawData","originalRetrieveFileHandlers","originalRetrieveMapHandlers","install","options","overrideRetrieveFile","unshift","overrideRetrieveSourceMap","hookRequire","Module","$compile","_compile","__sourceMapSupport","filename","undefined","origEmit","handleUncaughtExceptions","on","emit","hasStack","hasListeners","listeners","apply","resetRetrieveHandlers","SourceNode","intToCharMap","number","TypeError","charCode","_sorted","_last","aCallback","aThisArg","aMapping","lineA","lineB","columnA","columnB","sort","binarySearch","quickSort","aSourceMap","aSourceMapURL","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","_absoluteSources","_sourceMapURL","Mapping","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","consumer","__generatedMappings","configurable","_parseMappings","__originalMappings","_charIsMappingSeparator","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","aContext","aOrder","context","_generatedMappings","_originalMappings","allGeneratedPositionsFor","needle","_findSourceIndex","_findMapping","lastColumn","relativeSource","smc","generatedMappings","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","segment","end","cachedSegments","temp","originalMappings","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","hasContentsOfAllSources","some","sc","nullOnMissing","fileUriAbsPath","generatedPositionFor","constructor","j","sectionIndex","section","bias","every","generatedPosition","sectionMappings","adjustedMapping","aHaystack","aCompare","recursiveSearch","aLow","aHigh","mid","Math","floor","swap","ary","x","y","doQuickSort","comparator","low","high","round","random","pivot","q","REGEX_NEWLINE","isSourceNode","aLine","aColumn","aChunks","children","sourceContents","fromStringWithSourceMap","aGeneratedCode","aRelativePath","node","remainingLines","remainingLinesIndex","shiftNextLine","getNextLine","lastGeneratedLine","lastMapping","nextLine","addMappingWithCode","aChunk","isArray","chunk","prepend","walk","aFn","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","walkSourceContents","toStringWithSourceMap","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","sourceContent","isModern","Buffer","alloc","allocUnsafe","from","encodingOrOffset","input","obj","byteOffset","maxLength","byteLength","RangeError","Uint8Array","fromArrayBuffer","string","encoding","isEncoding","fromString"],"mappings":"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","file":"node_modules/source-map-support.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 895);\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n","module.exports = require(\"path\");","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","module.exports = require(\"fs\");","var SourceMapConsumer = require('source-map').SourceMapConsumer;\nvar path = require('path');\n\nvar fs;\ntry {\n  fs = require('fs');\n  if (!fs.existsSync || !fs.readFileSync) {\n    // fs doesn't have all methods we need\n    fs = null;\n  }\n} catch (err) {\n  /* nop */\n}\n\nvar bufferFrom = require('buffer-from');\n\n// Only install once if called multiple times\nvar errorFormatterInstalled = false;\nvar uncaughtShimInstalled = false;\n\n// If true, the caches are reset before a stack trace formatting operation\nvar emptyCacheBetweenOperations = false;\n\n// Supports {browser, node, auto}\nvar environment = \"auto\";\n\n// Maps a file path to a string containing the file contents\nvar fileContentsCache = {};\n\n// Maps a file path to a source map for that file\nvar sourceMapCache = {};\n\n// Regex for detecting source maps\nvar reSourceMap = /^data:application\\/json[^,]+base64,/;\n\n// Priority list of retrieve handlers\nvar retrieveFileHandlers = [];\nvar retrieveMapHandlers = [];\n\nfunction isInBrowser() {\n  if (environment === \"browser\")\n    return true;\n  if (environment === \"node\")\n    return false;\n  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === \"renderer\"));\n}\n\nfunction hasGlobalProcessEventEmitter() {\n  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));\n}\n\nfunction handlerExec(list) {\n  return function(arg) {\n    for (var i = 0; i < list.length; i++) {\n      var ret = list[i](arg);\n      if (ret) {\n        return ret;\n      }\n    }\n    return null;\n  };\n}\n\nvar retrieveFile = handlerExec(retrieveFileHandlers);\n\nretrieveFileHandlers.push(function(path) {\n  // Trim the path to make sure there is no extra whitespace.\n  path = path.trim();\n  if (/^file:/.test(path)) {\n    // existsSync/readFileSync can't handle file protocol, but once stripped, it works\n    path = path.replace(/file:\\/\\/\\/(\\w:)?/, function(protocol, drive) {\n      return drive ?\n        '' : // file:///C:/dir/file -> C:/dir/file\n        '/'; // file:///root-dir/file -> /root-dir/file\n    });\n  }\n  if (path in fileContentsCache) {\n    return fileContentsCache[path];\n  }\n\n  var contents = '';\n  try {\n    if (!fs) {\n      // Use SJAX if we are in the browser\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', path, /** async */ false);\n      xhr.send(null);\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        contents = xhr.responseText;\n      }\n    } else if (fs.existsSync(path)) {\n      // Otherwise, use the filesystem\n      contents = fs.readFileSync(path, 'utf8');\n    }\n  } catch (er) {\n    /* ignore any errors */\n  }\n\n  return fileContentsCache[path] = contents;\n});\n\n// Support URLs relative to a directory, but be careful about a protocol prefix\n// in case we are in the browser (i.e. directories may start with \"http://\" or \"file:///\")\nfunction supportRelativeURL(file, url) {\n  if (!file) return url;\n  var dir = path.dirname(file);\n  var match = /^\\w+:\\/\\/[^\\/]*/.exec(dir);\n  var protocol = match ? match[0] : '';\n  var startPath = dir.slice(protocol.length);\n  if (protocol && /^\\/\\w\\:/.test(startPath)) {\n    // handle file:///C:/ paths\n    protocol += '/';\n    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\\\/g, '/');\n  }\n  return protocol + path.resolve(dir.slice(protocol.length), url);\n}\n\nfunction retrieveSourceMapURL(source) {\n  var fileData;\n\n  if (isInBrowser()) {\n     try {\n       var xhr = new XMLHttpRequest();\n       xhr.open('GET', source, false);\n       xhr.send(null);\n       fileData = xhr.readyState === 4 ? xhr.responseText : null;\n\n       // Support providing a sourceMappingURL via the SourceMap header\n       var sourceMapHeader = xhr.getResponseHeader(\"SourceMap\") ||\n                             xhr.getResponseHeader(\"X-SourceMap\");\n       if (sourceMapHeader) {\n         return sourceMapHeader;\n       }\n     } catch (e) {\n     }\n  }\n\n  // Get the URL of the source map\n  fileData = retrieveFile(source);\n  var re = /(?:\\/\\/[@#][ \\t]+sourceMappingURL=([^\\s'\"]+?)[ \\t]*$)|(?:\\/\\*[@#][ \\t]+sourceMappingURL=([^\\*]+?)[ \\t]*(?:\\*\\/)[ \\t]*$)/mg;\n  // Keep executing the search to find the *last* sourceMappingURL to avoid\n  // picking up sourceMappingURLs from comments, strings, etc.\n  var lastMatch, match;\n  while (match = re.exec(fileData)) lastMatch = match;\n  if (!lastMatch) return null;\n  return lastMatch[1];\n};\n\n// Can be overridden by the retrieveSourceMap option to install. Takes a\n// generated source filename; returns a {map, optional url} object, or null if\n// there is no source map.  The map field may be either a string or the parsed\n// JSON object (ie, it must be a valid argument to the SourceMapConsumer\n// constructor).\nvar retrieveSourceMap = handlerExec(retrieveMapHandlers);\nretrieveMapHandlers.push(function(source) {\n  var sourceMappingURL = retrieveSourceMapURL(source);\n  if (!sourceMappingURL) return null;\n\n  // Read the contents of the source map\n  var sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    // Support source map URL as a data url\n    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);\n    sourceMapData = bufferFrom(rawData, \"base64\").toString();\n    sourceMappingURL = source;\n  } else {\n    // Support source map URLs relative to the source URL\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);\n    sourceMapData = retrieveFile(sourceMappingURL);\n  }\n\n  if (!sourceMapData) {\n    return null;\n  }\n\n  return {\n    url: sourceMappingURL,\n    map: sourceMapData\n  };\n});\n\nfunction mapSourcePosition(position) {\n  var sourceMap = sourceMapCache[position.source];\n  if (!sourceMap) {\n    // Call the (overrideable) retrieveSourceMap function to get the source map.\n    var urlAndMap = retrieveSourceMap(position.source);\n    if (urlAndMap) {\n      sourceMap = sourceMapCache[position.source] = {\n        url: urlAndMap.url,\n        map: new SourceMapConsumer(urlAndMap.map)\n      };\n\n      // Load all sources stored inline with the source map into the file cache\n      // to pretend like they are already loaded. They may not exist on disk.\n      if (sourceMap.map.sourcesContent) {\n        sourceMap.map.sources.forEach(function(source, i) {\n          var contents = sourceMap.map.sourcesContent[i];\n          if (contents) {\n            var url = supportRelativeURL(sourceMap.url, source);\n            fileContentsCache[url] = contents;\n          }\n        });\n      }\n    } else {\n      sourceMap = sourceMapCache[position.source] = {\n        url: null,\n        map: null\n      };\n    }\n  }\n\n  // Resolve the source URL relative to the URL of the source map\n  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {\n    var originalPosition = sourceMap.map.originalPositionFor(position);\n\n    // Only return the original position if a matching line was found. If no\n    // matching line is found then we return position instead, which will cause\n    // the stack trace to print the path and line for the compiled file. It is\n    // better to give a precise location in the compiled file than a vague\n    // location in the original file.\n    if (originalPosition.source !== null) {\n      originalPosition.source = supportRelativeURL(\n        sourceMap.url, originalPosition.source);\n      return originalPosition;\n    }\n  }\n\n  return position;\n}\n\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\nfunction mapEvalOrigin(origin) {\n  // Most eval() calls are in this format\n  var match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    var position = mapSourcePosition({\n      source: match[2],\n      line: +match[3],\n      column: match[4] - 1\n    });\n    return 'eval at ' + match[1] + ' (' + position.source + ':' +\n      position.line + ':' + (position.column + 1) + ')';\n  }\n\n  // Parse nested eval() calls using recursion\n  match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin);\n  if (match) {\n    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';\n  }\n\n  // Make sure we still return useful information if we didn't find anything\n  return origin;\n}\n\n// This is copied almost verbatim from the V8 source code at\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The\n// implementation of wrapCallSite() used to just forward to the actual source\n// code of CallSite.prototype.toString but unfortunately a new release of V8\n// did something to the prototype chain and broke the shim. The only fix I\n// could find was copy/paste.\nfunction CallSiteToString() {\n  var fileName;\n  var fileLocation = \"\";\n  if (this.isNative()) {\n    fileLocation = \"native\";\n  } else {\n    fileName = this.getScriptNameOrSourceURL();\n    if (!fileName && this.isEval()) {\n      fileLocation = this.getEvalOrigin();\n      fileLocation += \", \";  // Expecting source position to follow.\n    }\n\n    if (fileName) {\n      fileLocation += fileName;\n    } else {\n      // Source code does not originate from a file and is not native, but we\n      // can still get the source position inside the source string, e.g. in\n      // an eval string.\n      fileLocation += \"<anonymous>\";\n    }\n    var lineNumber = this.getLineNumber();\n    if (lineNumber != null) {\n      fileLocation += \":\" + lineNumber;\n      var columnNumber = this.getColumnNumber();\n      if (columnNumber) {\n        fileLocation += \":\" + columnNumber;\n      }\n    }\n  }\n\n  var line = \"\";\n  var functionName = this.getFunctionName();\n  var addSuffix = true;\n  var isConstructor = this.isConstructor();\n  var isMethodCall = !(this.isToplevel() || isConstructor);\n  if (isMethodCall) {\n    var typeName = this.getTypeName();\n    // Fixes shim to be backward compatable with Node v0 to v4\n    if (typeName === \"[object Object]\") {\n      typeName = \"null\";\n    }\n    var methodName = this.getMethodName();\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) != 0) {\n        line += typeName + \".\";\n      }\n      line += functionName;\n      if (methodName && functionName.indexOf(\".\" + methodName) != functionName.length - methodName.length - 1) {\n        line += \" [as \" + methodName + \"]\";\n      }\n    } else {\n      line += typeName + \".\" + (methodName || \"<anonymous>\");\n    }\n  } else if (isConstructor) {\n    line += \"new \" + (functionName || \"<anonymous>\");\n  } else if (functionName) {\n    line += functionName;\n  } else {\n    line += fileLocation;\n    addSuffix = false;\n  }\n  if (addSuffix) {\n    line += \" (\" + fileLocation + \")\";\n  }\n  return line;\n}\n\nfunction cloneCallSite(frame) {\n  var object = {};\n  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {\n    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];\n  });\n  object.toString = CallSiteToString;\n  return object;\n}\n\nfunction wrapCallSite(frame) {\n  if(frame.isNative()) {\n    return frame;\n  }\n\n  // Most call sites will return the source file from getFileName(), but code\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\n  // from getScriptNameOrSourceURL() instead\n  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();\n  if (source) {\n    var line = frame.getLineNumber();\n    var column = frame.getColumnNumber() - 1;\n\n    // Fix position in Node where some (internal) code is prepended.\n    // See https://github.com/evanw/node-source-map-support/issues/36\n    var headerLength = 62;\n    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {\n      column -= headerLength;\n    }\n\n    var position = mapSourcePosition({\n      source: source,\n      line: line,\n      column: column\n    });\n    frame = cloneCallSite(frame);\n    var originalFunctionName = frame.getFunctionName;\n    frame.getFunctionName = function() { return position.name || originalFunctionName(); };\n    frame.getFileName = function() { return position.source; };\n    frame.getLineNumber = function() { return position.line; };\n    frame.getColumnNumber = function() { return position.column + 1; };\n    frame.getScriptNameOrSourceURL = function() { return position.source; };\n    return frame;\n  }\n\n  // Code called using eval() needs special handling\n  var origin = frame.isEval() && frame.getEvalOrigin();\n  if (origin) {\n    origin = mapEvalOrigin(origin);\n    frame = cloneCallSite(frame);\n    frame.getEvalOrigin = function() { return origin; };\n    return frame;\n  }\n\n  // If we get here then we were unable to change the source position\n  return frame;\n}\n\n// This function is part of the V8 stack trace API, for more info see:\n// https://v8.dev/docs/stack-trace-api\nfunction prepareStackTrace(error, stack) {\n  if (emptyCacheBetweenOperations) {\n    fileContentsCache = {};\n    sourceMapCache = {};\n  }\n\n  var name = error.name || 'Error';\n  var message = error.message || '';\n  var errorString = name + \": \" + message;\n\n  return errorString + stack.map(function(frame) {\n    return '\\n    at ' + wrapCallSite(frame);\n  }).join('');\n}\n\n// Generate position and snippet of original source with pointer\nfunction getErrorSource(error) {\n  var match = /\\n    at [^(]+ \\((.*):(\\d+):(\\d+)\\)/.exec(error.stack);\n  if (match) {\n    var source = match[1];\n    var line = +match[2];\n    var column = +match[3];\n\n    // Support the inline sourceContents inside the source map\n    var contents = fileContentsCache[source];\n\n    // Support files on disk\n    if (!contents && fs && fs.existsSync(source)) {\n      try {\n        contents = fs.readFileSync(source, 'utf8');\n      } catch (er) {\n        contents = '';\n      }\n    }\n\n    // Format the line from the original source code like node does\n    if (contents) {\n      var code = contents.split(/(?:\\r\\n|\\r|\\n)/)[line - 1];\n      if (code) {\n        return source + ':' + line + '\\n' + code + '\\n' +\n          new Array(column).join(' ') + '^';\n      }\n    }\n  }\n  return null;\n}\n\nfunction printErrorAndExit (error) {\n  var source = getErrorSource(error);\n\n  // Ensure error is printed synchronously and not truncated\n  if (process.stderr._handle && process.stderr._handle.setBlocking) {\n    process.stderr._handle.setBlocking(true);\n  }\n\n  if (source) {\n    console.error();\n    console.error(source);\n  }\n\n  console.error(error.stack);\n  process.exit(1);\n}\n\nfunction shimEmitUncaughtException () {\n  var origEmit = process.emit;\n\n  process.emit = function (type) {\n    if (type === 'uncaughtException') {\n      var hasStack = (arguments[1] && arguments[1].stack);\n      var hasListeners = (this.listeners(type).length > 0);\n\n      if (hasStack && !hasListeners) {\n        return printErrorAndExit(arguments[1]);\n      }\n    }\n\n    return origEmit.apply(this, arguments);\n  };\n}\n\nvar originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);\nvar originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);\n\nexports.wrapCallSite = wrapCallSite;\nexports.getErrorSource = getErrorSource;\nexports.mapSourcePosition = mapSourcePosition;\nexports.retrieveSourceMap = retrieveSourceMap;\n\nexports.install = function(options) {\n  options = options || {};\n\n  if (options.environment) {\n    environment = options.environment;\n    if ([\"node\", \"browser\", \"auto\"].indexOf(environment) === -1) {\n      throw new Error(\"environment \" + environment + \" was unknown. Available options are {auto, browser, node}\")\n    }\n  }\n\n  // Allow sources to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveFile) {\n    if (options.overrideRetrieveFile) {\n      retrieveFileHandlers.length = 0;\n    }\n\n    retrieveFileHandlers.unshift(options.retrieveFile);\n  }\n\n  // Allow source maps to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveSourceMap) {\n    if (options.overrideRetrieveSourceMap) {\n      retrieveMapHandlers.length = 0;\n    }\n\n    retrieveMapHandlers.unshift(options.retrieveSourceMap);\n  }\n\n  // Support runtime transpilers that include inline source maps\n  if (options.hookRequire && !isInBrowser()) {\n    var Module;\n    try {\n      Module = require('module');\n    } catch (err) {\n      // NOP: Loading in catch block to convert webpack error to warning.\n    }\n    var $compile = Module.prototype._compile;\n\n    if (!$compile.__sourceMapSupport) {\n      Module.prototype._compile = function(content, filename) {\n        fileContentsCache[filename] = content;\n        sourceMapCache[filename] = undefined;\n        return $compile.call(this, content, filename);\n      };\n\n      Module.prototype._compile.__sourceMapSupport = true;\n    }\n  }\n\n  // Configure options\n  if (!emptyCacheBetweenOperations) {\n    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?\n      options.emptyCacheBetweenOperations : false;\n  }\n\n  // Install the error reformatter\n  if (!errorFormatterInstalled) {\n    errorFormatterInstalled = true;\n    Error.prepareStackTrace = prepareStackTrace;\n  }\n\n  if (!uncaughtShimInstalled) {\n    var installHandler = 'handleUncaughtExceptions' in options ?\n      options.handleUncaughtExceptions : true;\n\n    // Provide the option to not install the uncaught exception handler. This is\n    // to support other uncaught exception handlers (in test frameworks, for\n    // example). If this handler is not installed and there are no other uncaught\n    // exception handlers, uncaught exceptions will be caught by node's built-in\n    // exception handler and the process will still be terminated. However, the\n    // generated JavaScript code will be shown above the stack trace instead of\n    // the original source code.\n    if (installHandler && hasGlobalProcessEventEmitter()) {\n      uncaughtShimInstalled = true;\n      shimEmitUncaughtException();\n    }\n  }\n};\n\nexports.resetRetrieveHandlers = function() {\n  retrieveFileHandlers.length = 0;\n  retrieveMapHandlers.length = 0;\n\n  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);\n  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);\n  \n  retrieveSourceMap = handlerExec(retrieveMapHandlers);\n  retrieveFile = handlerExec(retrieveFileHandlers);\n}\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n","var toString = Object.prototype.toString\n\nvar isModern = (\n  typeof Buffer.alloc === 'function' &&\n  typeof Buffer.allocUnsafe === 'function' &&\n  typeof Buffer.from === 'function'\n)\n\nfunction isArrayBuffer (input) {\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer'\n}\n\nfunction fromArrayBuffer (obj, byteOffset, length) {\n  byteOffset >>>= 0\n\n  var maxLength = obj.byteLength - byteOffset\n\n  if (maxLength < 0) {\n    throw new RangeError(\"'offset' is out of bounds\")\n  }\n\n  if (length === undefined) {\n    length = maxLength\n  } else {\n    length >>>= 0\n\n    if (length > maxLength) {\n      throw new RangeError(\"'length' is out of bounds\")\n    }\n  }\n\n  return isModern\n    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))\n    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  return isModern\n    ? Buffer.from(string, encoding)\n    : new Buffer(string, encoding)\n}\n\nfunction bufferFrom (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return isModern\n    ? Buffer.from(value)\n    : new Buffer(value)\n}\n\nmodule.exports = bufferFrom\n","module.exports = require(\"module\");"],"sourceRoot":""}